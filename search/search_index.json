{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"conclusion/","title":"Related Sessions at Cisco Live","text":""},{"location":"conclusion/#related-sessions-at-cisco-live","title":"Related Sessions at Cisco Live","text":"<ul> <li>BRKXXX-1111 My friend's breakout session</li> </ul>"},{"location":"lab1_getting_started/","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#lab-1-getting-started","title":"Lab 1 - Getting Started","text":""},{"location":"lab1_getting_started/#section-1","title":"Section 1","text":"<p>Please use the following credentials to connect to device:</p> <code>IP Address</code> 1.1.1.1 <code>Username</code> admin <code>Password</code> C1sco123 <p>My content</p> <p>Note</p> <p>This is a note</p> <p>Cisco IOS code block:</p> <pre><code>hostname ABC\ninterface GigabitEthernet1\n ip address 122.1.1.1\n</code></pre> <p>Image:</p> <p></p>"},{"location":"lab1_getting_started/#section-2","title":"Section 2","text":"<p>More content</p>"},{"location":"lab_1451_formatting_guide/","title":"Lab 1451 Formatting Guide","text":""},{"location":"lab_1451_formatting_guide/#lab-1451-formatting-guide","title":"Lab 1451 Formatting Guide","text":""},{"location":"lab_1451_formatting_guide/#file-location-naming","title":"File Location &amp; Naming","text":""},{"location":"lab_1451_formatting_guide/#file-locations","title":"File Locations","text":"<p>All Lab related files are under <code>docs &gt; Main-Lab</code></p> <ul> <li> <p>Each Major Lab section is enclosed in their own folder</p> </li> <li> <p>Current Major Sections</p> </li> </ul> Name Location (Path) Description Setup <code>docs &gt; Main-Lab &gt; Setup</code> Covers any Hardware/Software Setup needed for each major part of the Lab RoomOS xAPI and Extensions <code>docs &gt; Main-Lab &gt; RoomOS</code> Lab Content demonstrating use of RoomOS device xAPI and UI Extensions PhoneOS xAPI <code>docs &gt; Main-Lab &gt; PhoneOS</code> Lab Content demonstrating use of RoomOS device xAPI Deployment <code>docs &gt; Main-Lab &gt; Deployment</code> Lab Content demonstrating customization deployment via Control Hub and CE-Deploy Resources <code>docs &gt; Main-Lab &gt; Deployment</code> Helpful resources for trainees to enable extended learning"},{"location":"lab_1451_formatting_guide/#file-naming","title":"File Naming","text":"<p>It's best to keep Files short for maintainability, so keep each topic within a Major Section contained in their own markdown</p> Formal Content Name File Prefix File Content descriptor Example(s) Setup stp Custom Field - Defined by Lab Content Developer stp_intro.md RoomOS rxp Custom Field - Defined by Lab Content Developer rxp_xapi_intro.mdrxp_ui_conclusion.md PhoneOS pxp Custom Field - Defined by Lab Content Developer pxp_intro.md Deployment dep Custom Field - Defined by Lab Content Developer dep_intro.md Resources res Custom Field - Defined by Lab Content Developer res_guide.md"},{"location":"lab_1451_formatting_guide/#section-numbering","title":"Section Numbering","text":"Formal Content Name Prefix Major Number Minor Number(s) Example How to Read Setup stp N/A Custom Field - Defined by Lab Content Developer stp-1.0.X Setup, Section 1, SubSection 0, ... RoomOS rxp Any # Custom Field - Defined by Lab Content Developer rxp-1.0.X RoomOS xAPI and Extensions, Section 1, SubSection 0, ... PhoneOS pxp Any # Custom Field - Defined by Lab Content Developer pxp-1.0.X PhoneOS xAPI, Section 1, SubSection 0, ... Deployment dep Any # Custom Field - Defined by Lab Content Developer dep-1.0.X Deployment, Section 1, SubSection 0, ... Resources res N/A Custom Field - Defined by Lab Content Developer res-1.0.X Resources, Section 1, SubSection 0, ..."},{"location":"lab_1451_formatting_guide/#how-to-implement-section-numbering-in-your-lab","title":"How to Implement Section Numbering in your Lab","text":"<p>Major Section Heading 1</p> <pre><code># Setup ~(stp-1)~\n</code></pre> <p>Rendered Result</p> <p>Sub Section Headings 2</p> <pre><code>## **RoomOS xAPI and Extensions Hardware Requirements** ~(stp-1)~\n</code></pre> <p>Rendered Result</p> <p>Sub Section Lessons</p> <pre><code>???+ lesson \"Lesson: My RoomOS Lesson! ~(rxp-1.1.1)~\"\n    // Lesson Content...\n</code></pre> <p>Rendered Result</p> Lesson: My RoomOS Lesson! <sub>(rxp-1.1.1)</sub> <p>// Lesson Content...</p>"},{"location":"lab_1451_formatting_guide/#setup-stp-1","title":"Setup <sub>(stp-1)</sub>","text":""},{"location":"lab_1451_formatting_guide/#roomos-xapi-and-extensions-hardware-requirements-stp-11","title":"RoomOS xAPI and Extensions Hardware Requirements <sub>(stp-1.1)</sub>","text":""},{"location":"lab_1451_formatting_guide/#roomos-doc-tags","title":"RoomOS Doc Tags","text":"<ul> <li> <p>A Custom tag has been implemented to handle placing a button for RoomOS xAPI Document References</p> </li> <li> <p>Provide the full Shell Path for an API wrapped the custom <code>&lt;roomosdoc&gt;</code> html tag</p> </li> </ul> <pre><code>&lt;roomosdoc&gt;xCommand Audio Volume Set&lt;/roomosdoc&gt; \n</code></pre> <p>Output</p> <p>xCommand Audio Volume Set </p>"},{"location":"lab_1451_formatting_guide/#custom-text-highlighting-tags","title":"Custom Text highlighting Tags","text":"<p>Added in more colors for text highlighting with a slight change to the styling</p> <p>The original MK Docs highlighting is still enabled as well</p> <p>MK Docks Highlighting Syntax</p> <p></p><pre><code>\nTo use MK Docs Highlighting, do the following with your text\n{==For a simple highlight==}\n{++To mark as an addition++}\n{--To mark as a deletion--}\n</code></pre><p></p> <p>Rendered Results</p> <p>To use MK Docs Highlighting, do the following with your text</p> <p>For a simple highlight To mark as an addition To mark as a deletion</p> <p>New Custom Highlighting</p> <p>To use additional custom highlighting, do the following with your text</p> <p></p><pre><code>\n&lt;highlight_0&gt;The highlight_0 tag mimics the original MK Docs Colors but matches the styling to the new highlights&lt;/highlight_0&gt;\n&lt;highlight_1&gt;highlight_1 introduces a new color for highlighting&lt;/highlight_1&gt;\n&lt;highlight_2&gt;highlight_2 introduces a new color for highlighting&lt;/highlight_2&gt;\n&lt;highlight_3&gt;highlight_3 introduces a new color for highlighting&lt;/highlight_3&gt;\n&lt;highlight_4&gt;highlight_4 introduces a new color for highlighting&lt;/highlight_4&gt;\n&lt;highlight_5&gt;highlight_5 introduces a new color for highlighting&lt;/highlight_5&gt;\n&lt;highlight_6&gt;highlight_6 introduces a new color for highlighting&lt;/highlight_6&gt;\n&lt;highlight_7&gt;highlight_7 introduces a new color for highlighting&lt;/highlight_7&gt;\n&lt;!-- Shorthand Versions of Each Tag added --&gt;\n&lt;hl_0&gt;The hl_0 tag mimics the original MK Docs Colors but matches the styling to the new highlights&lt;/hl_0&gt;\n&lt;hl_1&gt;hl_1 introduces a new color for highlighting&lt;/hl_1&gt;\n&lt;hl_2&gt;hl_2 introduces a new color for highlighting&lt;/hl_2&gt;\n&lt;hl_3&gt;hl_3 introduces a new color for highlighting&lt;/hl_3&gt;\n&lt;hl_4&gt;hl_4 introduces a new color for highlighting&lt;/hl_4&gt;\n&lt;hl_5&gt;hl_5 introduces a new color for highlighting&lt;/hl_5&gt;\n&lt;hl_6&gt;hl_6 introduces a new color for highlighting&lt;/hl_6&gt;\n&lt;hl_7&gt;hl_7 introduces a new color for highlighting&lt;/hl_7&gt;\n</code></pre><p></p> <p>Rendered Results</p> <p>To use additional custom highlighting, do the following with your text</p> <p>The highlight_0 or hl_0 tag mimics the original MK Docs Colors but matches the styling to the new highlights highlight_1 or hl_1 introduces a new color for highlighting highlight_2 or hl_2 introduces a new color for highlighting highlight_3 or hl_3 introduces a new color for highlighting highlight_4 or hl_4 introduces a new color for highlighting highlight_5 or hl_5 introduces a new color for highlighting highlight_6 or hl_6 introduces a new color for highlighting highlight_7 or hl_7 introduces a new color for highlighting</p>"},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#overview","title":"Overview","text":""},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>This lab will give you an introduction to ...</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"overview/#lab-access","title":"Lab Access","text":"<p>From your workstation open an RDP (Remote Desktop) session to the following host named \"wkst1\":</p> <ul> <li>IP: 1.2.3.4</li> <li>Username: corp\\demouser</li> <li>Password: C1sco12345</li> </ul>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>This lab leverages Cisco dCloud ...</p>"},{"location":"topologies/","title":"Lab topologies","text":""},{"location":"topologies/#lab-topologies","title":"Lab topologies","text":""},{"location":"Main-Lab/Deployment/dep_conclusion/","title":"Deployment Conclusion","text":"<p>Conclusion</p> <p>Thank you for taking part in the lab. Make sure to keep the URL for the lab handy so you can refer back to it at anytime. This lab demonstrated the end-to-end process of configuring devices in Control Hub and streamlining deployments using  CE-Deploy. Participants gained hands-on experience with provisioning and managing Cisco Webex devices, applying  configuration settings, and ensuring they operate within organizational standards. CE-Deploy simplified the bulk  configuration process, reduced setup time, and ensured consistency across devices. Overall, the lab highlighted how  leveraging Control Hub\u2019s centralized management with CE-Deploy\u2019s automation capabilities enhances deployment efficiency,  minimizes errors, and accelerates the readiness of collaboration environments.  </p>"},{"location":"Main-Lab/Deployment/dep_intro/","title":"Deployment Introduction","text":"<p>Welcome</p> <p>This lab consists of two main sections. The first provides a brief introduction to deploying customizations in  Control Hub. The second section focuses on using CE-Deploy. As Control Hub continues to expand its deployment options,  not every feature can be managed in bulk. However, third-party tools like CE-Deploy can help fill these gaps.</p> <p>If you have never used CE-Deploy before, this is a great introduction. For those already familiar with it, this lab offers  a useful refresher and an opportunity to explore new features such as the CE Macro Editor Pro.</p>"},{"location":"Main-Lab/Deployment/dep_prerequisites/","title":"Deployment Lab Prerequisites","text":""},{"location":"Main-Lab/Deployment/dep_prerequisites/#lab-setup","title":"Lab Setup","text":"Setup: Prepare the Device Skip this step unless otherwise directed by the lab proctor <p>Please Follow Each Step</p> 1. Factory Reset(Optional)2. Setup Device Defaults and Admin Account3 Register to Webex <p></p> <p></p> 2.12.22.32.4 <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> 3.13.2 <p></p> <p></p> <p></p> <p></p> Download Device Pod Assignment Sheet <p></p> Device Pod Assignment Sheet <p></p> Install Ce-Deploy <p>CE-Deploy Install</p> <p>Before we begin our lab you will need to download  and install CE-Deploy using the links below:</p> <ul> <li> <p>Windows Installer </p> </li> <li> <p>Mac Installer </p> </li> </ul> Explore CE-Deploy <p></p> <p></p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_backupsAndLogs/","title":"Device Backups and Logs <sup><sup>dep-2.8</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_backupsAndLogs/#perform-a-device-backup-and-download-logs-using-ce-deploy","title":"Perform a device backup and download logs using CE-Deploy","text":"<p>Abstract</p> <p>In this lab we will perform a backup of your endpoint using CE-Deploy and download the logs.  This backup will include all settings, macros, backgrounds, and extensions.  Having a backup of all your endpoints can be invaluable when you need to replace or restore a device.</p> dep-2.8 Lab Part 1 <p>dep-2.8.1 Open CE-Deploy and ensure you are in local mode and then select Backups from the deployment panel</p> <p>Warning</p> <p>This lab will only work if the endpoint and your PC/MAC running CE-Deploy are on the same  network.</p> <p>dep-2.8.2 Enter your local admin user credentials and select single device and enter the IP address of your endpoint.</p> <p></p> <p></p> <p>dep-2.8.3 Ensure the Download endpoint backups checkbox is selected in Backups panel.</p> <p>dep-2.8.4 Select Start Deployment. The message console will now show the file location of the downloaded backup from the endpoint.</p> <p></p> Message Console <p></p> <p>dep-2.8.5 To open the file location go to the application Tools-&gt;Backup Files. This wiill open the directory where all the backup files are stored.</p> <p></p> <p></p> Tip <p>If you want a more configurable option the web admin portal of the device will allow customization of the device backup you can download from the device. CE-Deploy will only download an entire backup ignoring any options from the  web admin portal.</p> <p>Success</p> <p>What you will find is a full back up of the device in a zip file. Feel free to unzip the file and explore what was backed up on your endpoint. </p> Backup File Unzipped <p></p> <p>Restore(optional) from Backup</p> <p>You have a backup but now what! Can you workout how to restore your endpoint using CE-Deploy? Hints: Deployment feature \"EndpointRestore\" may help. Ensure CE-Deploy is allowed inbound  connections on ports 9001(http) or 8000(https) on your MAC or PC firewall.</p> dep-2.8 Lab Part 2 <p>Tip</p> <p>Ever been asked to download the logs from a endpoint for TAC. Well now you can download all the logs in one simple step. If you are required to download logs from more than one endpoint try the CSV option  where you can enter a list of IP addresses to download logs from multiple endpoints.</p> <p>dep-2.8.6 Open CE-Deploy and ensure you are in local mode and then select Logs from the deployment panel</p> <p>Warning</p> <p>This lab will only work if the endpoint and your PC/MAC running CE-Deploy are on the same  network.</p> <p>dep-2.8.7 Select Download endpoint logs</p> <p></p> <p></p> <p>dep-2.8.8 Select Start Deployment. The message console will now show the file location of the downloaded logs from the endpoint.</p> <p>dep-2.8.9 To open the file location go to the application Tools-&gt;Downloaded and CSV Files Files. This wiill open the directory where all the log files are stored. Log file naming convention will follow log_bundle-SEP-.tar.gz.</p> <p></p> <p></p> <p>Success</p> <p>Well done. While not the most frequently used features of CE-Deploy they are still handy to know when you want  to perform these functions. Next up is dashboards.</p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_dashboards/","title":"Dashboards <sup><sup>dep-2.10</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_dashboards/#perform-a-device-backup-and-download-logs-using-ce-deploy","title":"Perform a device backup and download logs using CE-Deploy","text":"<p>Abstract</p> <p>In this lab we will we are going to open one of the most popular dashboards in CE-Deploy and check out our inventory. In the previous lab we saw the Macro Factory for viewing and controlling the macros on our endpoints. In this lab we are  going to look at our inventory and gather our serial numbers to help with our lifecycle management.</p> dep-2.10 Lab <p>dep-2.10.1 Open CE-Deploy in cloud mode and load the  environment your created in a previous lab.</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>dep-2.10.2 Select the Dashboards tab and the from the  Deployment Options drop down select Org Id. The Org Id will auto populate.</p> <p>Next, select Inventory from the Dashboards panel.</p> <p></p> <p></p> <p>dep-2.10.3 A new window will open with a view into every endpoint in your Control Hub Org. </p> <p></p> <p></p> <p>dep-2.10.4 Explore the types of data it makes accessible. Some examples are Serial Numbers, Year of Manufactor and if a touch panel is present its compatibility to MTR.</p> <p></p> <p></p> <p>dep-2.10.5 Close the Inventory window.</p> <p>dep-2.10.6 Click the Dashboard button button in the  Dashboards pane. Ensure that Org Id is still the selected Deployment Option. If you click away frolm the Dashboards pane this will revert back to the default blank choice.</p> <p></p> <p></p> <p>dep-2.10.7 Notice the data available. Some examples are  active call status even in MTR mode, upgrade channel and any current errors.</p> <p></p> <p></p> <p>dep-2.10.8 Close the Dashboard window.</p> <p>Success</p> <p>Well done. You have explored the main features of CE-Deploy and a few lesser known ones. Feel free to explore and see what else it can do. CE-Deploy is built on public API's freely available to everyone to develop your own solutions and scripts.</p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_deployBranding/","title":"Branding <sup><sup>dep-2.4</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_deployBranding/#deploy-branding-via-ce-deploy","title":"Deploy Branding via CE-Deploy","text":"<p>Abstract</p> <p>Similar to deploying xAPI commands, using CE-Deploy for branding offers unique advantages over  using Control Hub. While Control Hub allows for organization-wide branding, CE-Deploy provides  greater granularity, enabling deployment down to a single endpoint via a CSV file. This is  particularly useful if you have unique QR codes for each endpoint, as you can deliver the images  through CE-Deploy using a CSV file, rather than manually deploying them to each endpoint. In  this lab, we will deploy a branding image along with a QR code as a logo, helping your users  easily access a website of your choosing.</p> <p>The widespread adoption of QR codes has introduced unique advantages to branding. While it's commonly perceived that branding primarily involves displaying a company's logo on various devices, the integration of QR codes can significantly enhance this strategy. By combining branding with QR codes, companies can establish a dynamic communication channel with users directly through the devices they hold. In this exercise, we will create a QR code that will serve as a branding logo. This QR code will provide users with access to information they can conveniently take with them when they leave the room.</p> dep-2.4 Lab <p>dep-2.4.1 Open CE-Deploy and load the environment your created in a previous lab.</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>dep-2.4.2 In this lab we will be load a background and logo on to our lab device but to help us do that first  we must create a tag for your pod's device in Control Hub. Log into the lab control hub instance and find your device.  Remember this Control Hub instance is for the entire lab so choosing your pod's device is important as we only want  to make changes to just your device.</p> <p>Control Hub admin login</p> <p>dep-2.4.3 Add a tag using your pod ID similar to podXXX format.</p> <p></p> <p></p> <p>After typing in the tag press enter. The tag will be saved once you press enter.</p> <p>Now we have a tag added in Control Hub it will be easier to filter to just your device in CE-Deploy as we explore more options.</p> <p>dep-2.4.4 It is now time to create a unique QR code using CE-Deploy. Open CE-Deploy from the deployment options select  Tools-&gt;QRCode.</p> <p></p> <p></p> <p>dep-2.4.5 In the QR URL text box enter</p> <p></p><pre><code>https://www.webexone.com/\n</code></pre> Feel free to adjust the QR Code color palette to your liking or add a center image.<p></p> <p>Other options that are available include adding Banner Text or using the QR Code on a background image but  today we are using the QR code as a logo.</p> CE-Deploy QR Code <p></p> <p></p> <p>dep-2.4.6 Once you have picked your options select Process QRCode.</p> <p></p> <p></p> <p>Everytime you select Process QRCode a new QR Code file is generated with a timestamp embedded in the name. For example code-09_47_51_582.jpeg. Feel free to generate as many codes as you like, you will need to pick one for the next step.</p> <p>dep-2.4.7 Once you see the preview of your QR Code select the Open QR File button.  Take note of the location of the QR Code or copy and paste the QR code file  somewhere you can easily find for the next step.</p> <p>dep-2.4.8 Next we are going to use the Personalization-&gt;Branding deployment option.</p> <p></p> <p></p> <p>Click Browse on the Logo Awake State File. Find your QR Logo and select it using the file picker. Next click Browse on the Logo HalfWake State File. Find your QR logo and select it using the file picker. Once both file are selected it should look like the screenshot below.</p> <p></p> <p></p> <p>dep-2.4.9 In the Deployment Options section dropdown select Tags and enter your pod tag in the text box</p> <p></p> <p></p> <p>dep-2.4.10 Ensure the Video Devices Only checkbox is checked.</p> <p>dep-2.4.12 Press button Start Deployment.</p> <p>dep-2.4.13 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>dep-2.4.14 The Message Console will now appear, you can  follow along the deployment process. Depending on file size this may take a little while, so be patient as it completes the deployment.</p> <p></p> <p></p> <p>Success</p> <p>Congrats you just deployed your QR file as a logo using branding to your endpoint. You should now see the QR on the screen of your endpoint home screen. This was a pretty simple example, but as you can imagine  if you have 100's or 1000's of endpoints to deploy new branding assets to this could save  hours of work. By using tags to deploy your branding you can now see how effective filtering is.  You could deploy unique branding assets to different devices based on the tags you create.</p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_deployExtensions/","title":"UI Extensions <sup><sup>dep-2.6</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_deployExtensions/#deploy-extensions-via-ce-deploy","title":"Deploy Extensions via CE-Deploy","text":"<p>Abstract</p> <p>Extensions enable companies to enhance and personalize the user experience. These extensions  can be deployed through Control Hub or CE-deploy. In this lab, we will deploy an extension to  accompany our macro from the last lab.</p> dep-2.6 Lab <p>dep-2.6.1 Open CE-Deploy and load your environment you created in the previous lab if it's not already loaded</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>Then select Design-&gt;CE Macro Editor Pro from the main menu</p> <p></p> <p></p> <p>dep-2.6.2 The Macro Editor can also be used to create our XML file. Copy the text below and paste it into  the Macro Editor and save the file as LaunchHalfwake.xml. Be sure to change the default extension from  .js to .xml</p> <p></p>LaunchHalfwake.xml<pre><code>&lt;Extensions&gt;\n  &lt;Version&gt;1.8&lt;/Version&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;halfwake&lt;/PanelId&gt;\n    &lt;Origin&gt;local&lt;/Origin&gt;\n    &lt;Type&gt;Home&lt;/Type&gt;\n    &lt;Icon&gt;Power&lt;/Icon&gt;\n    &lt;Color&gt;#07C1E4&lt;/Color&gt;\n    &lt;Name&gt;HalfWake&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre> It should look something like this, ignore that the current file is called New Macro.js. When we save it further on  the file name will be updated:<p></p> <p></p> <p></p> <p>Save the xml file by clicking the Save As button and name your file LaunchHalfWake.xml. Don't forget to change  the file extension to .xml:</p> <p></p> <p></p> <p>You should now see the file under the file manager in the left hand pane of the Macro Editor. Use the Select  button to navigate to your desired folder. You wont see all your files though, the file manager filters all the files based on their extension and only shows .js and .xml files.</p> <p></p> <p></p> <p>dep-2.6.3 Now we have our xml file lets role it out to our  endpoint. For a single panel in the deployment panel select Customizations-&gt;UIExtensions-&gt;Panel. This allows ot deploy or update a single panel.</p> <p></p> <p></p> <p>Tip</p> <p>When deploying a single panel using the same panel ID will create a new panel the first time, but subsequent  uses of the same ID will overwrite existing panels. </p> <p>To update more than 1 panel use the Customizations-&gt;UIExtensions-&gt;Config deployment panel feature. This allows the upload of xml files that contain multiple panels.</p> <p>dep-2.6.4 In the panel ID text box enter halfwake as the panel ID. Using the Browse file picker select your  xml file you created in the last step.</p> <p></p> <p></p> <p>dep-2.6.5 Under deployment Options use the dropdown to select Tags and enter your pod tag for your device.</p> <p></p> <p></p> <p>dep-2.6.6 Ensure the Video Devices Only checkbox is checked.</p> <p>Warning</p> <p>An error may occur if this check box is not selected. Just make sure that it is checked if you receive an error while deploying.</p> <p>dep-2.6.7 Press button Start Deployment.</p> <p>dep-2.6.8 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>dep-2.6.9 The Message Console will now appear, you can follow along the deployment process.</p> <p>Its test time. The halfwake button should now appear on your home screen of your device. Pressing the button should place your endpoint into the halfwake state.</p> <p>Success</p> <p>You now have a working Macro and Extension. Look at you go.</p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_deployLocalUsers/","title":"Local User Accounts <sup><sup>dep-2.7</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_deployLocalUsers/#deploy-a-local-user-admin-using-ce-deploy","title":"Deploy a local user admin using CE-Deploy","text":"<p>Abstract</p> <p>A local user admin account allows direct access to the device without needing to go through  its web portal via Control Hub or the cloud xAPI. Some tasks and configuration options are not available  via the cloud, so having a local admin account provides a way to set configurations  and manage personal mode devices. Typically, setting up a new cloud device removes local  admin accounts, making the device's web portal accessible only through Control Hub. In this lab, you will add a new local admin account to the device via the cloud xAPI using CE-Deploy. </p> dep-2.7 Labs <p>dep-2.7.1 Open CE-Deploy and load your environment you created in the previous lab</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>Then select Users from the deployment panel</p> <p></p> <p></p> <p>Device Users</p> <p>Device users allows us to add, delete and modify device users via the cloud xAPI in CE-Deploy. If you doing integrations with 3rd party's, setting configurations or doing device backups having a local admin  account on the device may be critical for day to day operations. CE-Deploy can access a device by the IP address to take advantage of the local admin account. </p> <p>dep-2.7.2 Set the following setting.</p> <code>Setting</code> <code>Device User Action</code> Add <code>Username</code> adminUserxx(yourPodNo.) <code>Passphrase</code> Cisco12345 <code>User Role</code> Admin, User, Integrator <code>PassPhase Change</code> No <code>Shell Login</code> Yes <code>Activate Account</code> Yes <p></p> <p></p> <p>dep-2.7.3 Under deployment Options use the dropdown to select Tags and enter your pod tag for your device.</p> <p></p> <p></p> <p>dep-2.7.4 Ensure the Video Devices Only checkbox is checked.</p> <p>dep-2.7.5 Press button Start Deployment.</p> <p>dep-2.7.6 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>dep-2.7.7 The Message Console will now appear, you can follow along the deployment process.</p> <p>Network IP Address Challenge</p> <p>In the next portion of the lab you will need the IP address of your pods endpoint. Using the  command below in CE-Deploy can you retrieve your IP?</p> <pre><code>    xStatus Network[1] IPv4 Address\n</code></pre> <p>dep-2.7.8 To test the local admin account we are going to switch CE-Deploy into local mode from cloud and run an xAPI command directly to the device.</p> <p>Select the cloud/local toggle in the main navigation bar.</p> <p></p> <p></p> <p>Ensure that it is set to local and the interface updates:</p> <p></p> <p></p> <p>Now we can use the IP address of the device to send commands.</p> <p>dep-2.7.9 Using the IP address from the IP challenge  and your new local admin username and password enter the details as shown along with the command:</p> <pre><code>xCommand time datetime get\n</code></pre> <p></p> <p></p> <p>dep-2.7.10 Click on Start Deployment</p> <p>dep-2.7.11 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>dep-2.7.12 The Message Console will now appear, you can follow along the deployment process.</p> <p></p> <p></p> <p>Success</p> <p>All done. Congrats, you have now seen the most commonly used functions in CE-Deploy, but there  is still plenty to explore. Stay on the local tab as we dive in deep to some lesser known features.</p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_deployMacros/","title":"Macros <sup><sup>dep-2.5</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_deployMacros/#deploy-macros-via-ce-deploy","title":"Deploy Macros via CE-Deploy","text":"<p>Abstract</p> <p>Macros enhance your customization capabilities, allowing you to tailor your experience exactly  as you want it. However, deploying these macros can be challenging, especially when dealing  with multiple endpoints. While Control Hub supports single-endpoint deployment, this approach  becomes cumbersome and time-consuming for larger deployments. With CE-Deploy, you can roll out  a macro in minutes to hundreds or even thousands of endpoints. The CE-Deploy Macro Factory also  enables you to monitor your deployment for consistency and performance without needing to log  into the endpoint admin portal or control hub. Additionally, you can write your macro code  directly in CE-Deploy and deploy it in just a few easy steps. In this lab, we will write a new  macro, save it, and deploy it to your endpoints. We will then use the Macro Factory  to monitor  the rollout of everyone's macros.</p> CE-Deploy Macro deployment and the Macro Factory <p></p> <p></p> dep-2.5 Lab <p>dep-2.5.1 Open CE-Deploy and load your environment you created in the previous lab</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>Then select Design-&gt;CE Macro Editor Pro from the main menu</p> <p></p> <p></p> <p>dep-2.5.2 Copy the following code and paste it into the editor page and save the file as LaunchHalfwake.js</p> <p></p>LaunchHalfwake.js<pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Panel.Clicked.on((e) =&gt; {\n  if (e.PanelId === 'halfwake') {\n    xapi.Command.Standby.Halfwake();\n  }\n});\n</code></pre> Once completed it should look like the screenshot below.<p></p> <p></p> <p></p> <p>dep-2.5.3 Click Save As.</p> <p>dep-2.5.4 Name your file and select a directory LaunchHalfwake.js and click Save</p> <p>dep-2.5.5 Exit the Macro Editor.</p> <p>dep-2.5.6 Select Customizations-&gt;Macros from the deployment features panel.</p> <p>dep-2.5.7 Using the Macros deployment feature we can easily deploy a macro to hundreds of endpoints in minutes. Name your macro LaunchHalfwake and use the Macro Javascript File Browse button to select  the js file you create just moments ago.</p> <p>Ensure the Activate on deployment checkbox is selected.</p> <p></p> <p></p> <p>dep-2.5.8 Under deployment Options use the dropdown to select Tags and enter your pod tag for your device.</p> <p></p> <p></p> <p>dep-2.5.9 Again ensure the Video Devices Only checkbox is selected.</p> <p>dep-2.5.10 Press button Start Deployment.</p> <p>dep-2.5.11 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>dep-2.5.12 The Message Console will now appear, you can follow along the deployment process.</p> <p></p> <p></p> <p>dep-2.5.13 You just deployed a macro to your device and activated it, we still need one more step  to ensure that it is in fact running. Unlike the device web admin portal which will restart the macro engine automatically everytime a change is made to a macro the APIs are not as polite. So in the next step we will use CE-Deploy xCommand to restart the endpoint macro engine.</p> <p>dep-2.5.14 Open the deployment panel xAPI-&gt;Command feature and enter the restart command:</p> <p></p><pre><code>xCommand Macros Runtime Restart\n</code></pre> <p></p> <p>dep-2.5.15 Under deployment Options use the dropdown to select Tags and enter your pod tag for your device.</p> <p></p>  { width=\"300\" }    <p></p> <p>dep-2.5.16 Ensure the Video Devices Only checkbox is checked.</p> <p>dep-2.5.17 Press button Start Deployment.</p> <p>dep-2.5.18 Ensure the Scheduler has the Run Deployment Now check box selected and click Next.</p> <p>dep-2.5.19 The Message Console will now appear, you can follow along the deployment process.</p> <p>dep-2.5.20 We have our macro rolled out across all our endpoints but lets checkin on the other pods and see how they  doing. We are going to use the Macro Factory to monitor how the other pods are doing. In the deployment panel select the Dashboards. Do not select the Macro Factory just yet. First we need to select our deployment option.</p> <p></p> <p></p> <p>dep-2.5.21 This time around we are going to select the Org Id</p> <p></p> <p></p> <p>When you select Org Id, the id automatically populates for our lab Control Hub org.</p> <p>dep-2.5.22 Select the Macro Factory from the Dashboards</p> <p></p> <p></p> <p>You should now see the Macro Factory appear with all the pod endpoints that have added their macros.</p> <p></p> <p></p> <p>Take a look around. Keep it open and move the window to the side when done. We are going to  use the Macro Factory to clean up later.</p> <p>Success</p> <p>Now that we have our macro deployed we will turn our attention to deploying the accompanying extension to make it work.</p> Macro Factory Add a Macro <p>Can you load or remove a different Macro from an earlier lab? Have a go, its easy.</p> <p>Tip</p> <p>Things to note for the Macro Factory.</p> <ol> <li>Visual way to monitor macros</li> <li>Easy to use buttons, no need to remember commands</li> <li>Great for managment of a few endpoints adding, removing and activating macros</li> <li>For large bulk rollouts of Macros using the Deployment panel Customizations-&gt;Macros is a better option</li> </ol>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_downloadToken/","title":"Download Webex Token <sup><sup>dep-2.2</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_downloadToken/#download-a-webex-token-and-create-an-environment-in-ce-deploy","title":"Download a Webex token and create an Environment in CE-Deploy","text":"<p>Abstract</p> <p>Environments enable an admin to download access and refresh tokens into CE-Deploys OS secure store,  which are refreshed daily. This feature is particularly useful for admins who need to access  multiple Control Hub instances. By utilizing environments, admins can streamline the deployment  process. Instead of logging into Webex everytime you need to perform a deployment you can simply select the appropriate  environment, load the token from the secure store, and perform the required deployment.</p> Creating CE-Deploy Environments <p></p> <p></p> dep-2.2 Lab <p>dep-2.2.1 Open CE-deploy and select the Download Webex Token button in the manage token section</p> <p></p> <p></p> <p>dep-2.2.2 Sign in to Webex and accept the integration permissions when prompted. This will load  your token and refresh token into the default environment. This is not a persistent environment  so will want to save our tokens into the secure store for repeated use.</p> <p></p> <p></p> <p>dep-2.2.3 In the deployment features panel select \"Environment\".</p> <p></p> <p></p> <p>dep-2.2.4 In the Environment Name section, enter EnvLab and  click Save Environment. The new environment is now saved, but the default will continue to be used unless you load  the newly saved environment token. With this setup, you can control which Control Hub instance to deploy to. If you  have multiple Control Hub instances, simply switch between different environments as you save them. Token refresh is  automatic but can also be done manually after the environment is loaded.</p> <p>dep-2.2.5 To load our new environment, use the dropdown in the Environment loading section and select your  new Environment  and select \"Load Environment\".</p> <p></p> <p></p> <p>dep-2.2.6 You should now see your environment name populate the Environment Loaded text under manage Token.</p> <p></p> <p></p> <p>dep-2.2.7 To test your token click the \"Test Token\" button. You should see the response below:</p> <p></p> <p></p> <p>Success</p> <p>Congrats, your token is now downloaded, you are ready to roll. You can build as many  Environments as you require. Whether you have a test and production Orgs or you are a  partner managing multiple customer Orgs this removes the need to always be logging in everytime you need to complete a deployment. The refresh token expires after 90 days so by keeping the app open you wont need to log in everytime you need to do a deployment.</p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_localVsCloud/","title":"Local vs Cloud Auth <sup><sup>dep-2.1</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_localVsCloud/#switch-between-deploying-via-cloud-xapi-and-local-xapi","title":"Switch Between Deploying via Cloud xAPI and Local xAPI","text":"<p>Abstract</p> <p>In this brief lab we explore how you can use CE-Deploy to deploy in Cloud or Local mode. We will explore switching  CE-Deploy between the Cloud mode used for deploying commands Control Hub cloud xAPI and using the local API interface of the device.</p> dep-2.1 Lab <p>dep-2.1.1 To kick things off this short lab shows the two  primary interfaces of CE-Deploy(CED) which are controlled by a switch to back and forth between Cloud and Local.</p> <p>The figure below show CED in cloud mode.</p> <p></p> <p></p> <p>The figure below shows CED in Local Mode.    </p> <p></p> <p></p> <p>To switch between modes click the mode toggle which by default is set to cloud.</p> <p></p> <p></p> <p>dep-2.1.2 In Cloud mode CE-Deploy utilises a classic Webex  Control Hub integration.</p> <p></p> <p></p> <p>dep-2.1.3 In local mode we need to two elments to allow us  to process commands. Direct accesss to the device IP address and also a local admin account on the device.</p> <p></p> <p></p> <p>We will be addressing the local admin account in a later lab, for now just take note of whats required to complete a  deployment accessing the endpoint directly. Note: CE-Deploy takes advantage of Websockets which by default is tied to the NetworkServices HTTP Mode setting which must be enabled. </p> <p>Success</p> <p>Depending on the configuration you need to roll out, you may use either cloud or local options. While local has  some limitations, it may be the only way to change certain settings, since those same settings might be read-only in the cloud.</p> Find My Setting! <p>Can you find the setting NetworkServices HTTP Mode and check that it is enabled either in Control Hub or directly directly on the endpoint?</p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_runCommands/","title":"Run Commands <sup><sup>dep-2.3</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_runCommands/#deploy-xapi-commands-via-ce-deploy","title":"Deploy xAPI commands via CE-Deploy","text":"<p>Abstract</p> <p>Deploying xAPI commands is a fundamental aspect of administering a Cisco collaboration endpoint  deployment. While Control Hub allows us to deploy commands to a single endpoint, scaling this  process to a larger deployment through Control Hub or a terminal command prompt can be  time-consuming and inefficient. By utilizing CE-Deploy, we can efficiently deploy xAPI commands  to multiple endpoints using various criteria such as IP Address, Control Hub Org ID, Control Hub  Tags, and more. This lab will demonstrate how to deploy a system time check across multiple devices.  Although this is not a configuration change, it will showcase how the CE-Deploy message console  provides real-time feedback as the deployment progresses.</p> CE-Deploy Running xAPI Commands <p></p> <p></p> dep-2.3 Lab <p>dep-2.3.1 Open Ce-deploy and load the environment your  created in the last lab if its not already loaded.</p> Loading Environments <p>To load an environment, use the dropdown in the Environment loading section and select your new Environment and select Load Environment.</p> <p>dep-2.3.2 Select xAPI from the deployment section. In the command text box enter:</p> <p></p><pre><code>xCommand Time DateTime Get\n</code></pre> <p></p> <p>dep-2.3.3 Under the deployment options drop down select Org Id, this will populate the lab org ID.  As this command does not make any system changes it can be safely run against all the devices in the lab Control Hub Organization. By doing this we can see how CE-Deploy queues and completes  xAPI commands in bulk.</p> <p></p> <p></p> <p>dep-2.3.4 Select the video devices only filter checkbox. This will limit running the command to only  the xAPI capable device in the organization and no other devices in the lab, an example being a phone.</p> <p>dep-2.3.5 Select \"Start Deployment\"</p> <p>dep-2.3.6 Ensure Run Deployment Now is selected and select Next.</p> <p>dep-2.3.7 If any devices are offline you may receive a prompt letting your know that some of the devices are offline.  If this is case just select \"Yes\".</p> <p>dep-2.3.8 The message console will now let you see the deployment in progress and all output from the devices.  In this case what is returned is the system time running on the endpoints.</p> <p></p> <p></p> <p>dep-2.3.9 Switch back to CE-Deploy staying in XAPI abd select the \"Command Builder\" button. This launches the Command Builder window. This allows us to search for commands based on the command syntex.</p> <p></p> <p></p> <p>dep-2.3.10 In the search area type \"macros log\" and select the Macros Log Get command.</p> <p></p> <p></p> <p>Click Insert. You should now see the command populate the main XAPI Command area. You should also take note that the Recents drop down is now populated with the last command you ran. This just makes life a little easier to access commands you repeatedly run.</p> <p></p> <p></p> <p>dep-2.3.11 Click Start Deployment. You should see the Macro logs being pulled from each endpoint in the Org. To narrow the amount of data you can use your tag under the deployment options.</p> <p></p> <p></p> <p>The message console should now populate with the log data.</p> <p></p> <p></p> <p>Success</p> <p>This concludes this section. Now that you know how to find and run commands feel free to try a few more commands from the command builder. Make sure to stick with your pod's tag if making changes to your endpoint. Using the Org ID deployment option will make a change to every endpoint in the Control Hub Org.</p> Running a xStatus Command <p>Now that you know how to run a xCommand, can you work out how to run a xStatus command?</p> <p>Find a command at RoomOS or use the Command Builder in CE-Deploy.</p>"},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_tools/","title":"Tools <sup><sup>dep-2.9</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_ceDeploy/dep_ceDeploy_cloud_tools/#deploy-xapi-command-via-the-shell-using-ce-deploy","title":"Deploy xAPI command via the shell using CE-Deploy","text":"<p>Abstract</p> <p>The terminal is not only a crucial tool for administering Cisco collaboration endpoints  but also an important resource for exploring xAPIs. In this lab, we will use CE-Deploy's  terminal emulation feature to run a command. CE-Deploy is the swiss army knife of video endpoint deployments so lets keep exploring.</p> dep-2.9 Lab <p>dep-2.9.1 From the local interface in the deployment panel select Tools-&gt;SSH-TTY.</p> <p>Warning</p> <p>This lab will only work if the endpoint and your PC/MAC running CE-Deploy are on the same  network.</p> <p>dep-2.9.2 Add your endpoint local admin details, choose a theme and add the IP address  from the IP address challenge. </p> <p></p> <p></p> <p>dep-2.9.3 Select Connect. The terminal will appear in a new Window and you can start  interacting with it.</p> <p>Commands to try:</p> <code>Command</code> <code>xCommand ?</code> <code>xCommand Time DateTime Get</code> <code>xConfiguration ?</code> <code>xConfiguration NetworkServices Websocket</code> <p></p> <p></p> <p>Success</p> <p>Once you have tried a few commands type in the Bye command and the window  will automatically close. Lets switch back to Cloud now ready for our next lab.</p>"},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_configTemplates/","title":"Configuration Templates <sup><sup>dep-1.2</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_configTemplates/#building-and-deploying-configuration-templates-via-control-hub","title":"Building and deploying configuration templates via Control Hub","text":"<p>Abstract</p> <p>One of the easiest and most effective ways to deploy a series of configuration changes to  RoomOS devices is through Control Hub default configuration templates. In this lab, we will explore deploying  configurations using both device-based and default organization-based templates. In this lab we are  going to create a template to set the volume of you device and enable macros for the Macro  deployment lab. </p> <p>Tip</p> <p>Default Configuration Templates are hierarchical. Configurations set on location and device levels override  organization level device configurations.</p> <p>If one of your devices doesn't support a specific value, you can't select that value on the organization or location level, even if all other devices support that value. This limitation also applies if one of the devices is running  a software version that doesn't support a selected value. This doesn't impact configuring individual or multiple device, or configuration templates.</p> dep-1.2 Lessons <p>dep-1.2.1 Login to control hub with your lab admin credentials</p> <p>dep-1.2.2 Select Management&gt;Devices</p> <p></p> <p></p> <p>dep-1.2.3 Select Templates</p> <p></p> <p></p> <p>dep-1.2.4 Select Create template</p> <p></p> <p></p> <p>dep-1.2.5 Name your template Wbx1LabTemplate\"yourPodNumber\" and select Next.  For example Wbx1LabTemplate101.</p> <p></p> <p></p> <p>dep-1.2.6 In the Search by configuration name type volume</p> <p></p> <p></p> <p>dep-1.2.7 Select Audio&gt;Default Volume</p> <p>dep-1.2.8 Change the Default Volume to 60</p> <p></p> <p></p> <p>dep-1.2.9 Once you have set Audio to 60 select \"All\" from the setting breadcrumb links to go back to the configuration search</p> <p></p> <p></p> <p>dep-1.2.10 In the Search by configuration name type Macro</p> <p></p> <p></p> <p>dep-1.2.11 Change the Mode from Off to On and then select Next</p> <p></p> <p></p> <p>dep-1.2.12 Review your new template and select Create</p> <p>dep-1.2.13 Now that we have created a new template lets apply it to our device. Select Go to Devices</p> <p></p> <p></p> <p>dep-1.2.14 Select your lab device(Room Bar or Desk Pro)</p> <p></p> <p></p> <p>dep-1.2.15 Select Edit</p> <p></p> <p></p> <p>dep-1.2.16 Select Configuration templates</p> <p></p> <p></p> <p>dep-1.2.17 From the template dropdown select the Wbx1LabTemplateXXX and review your settings</p> <p></p> <p></p> <p>dep-1.2.18 Select Next and then Apply</p> <p>dep-1.2.19 Review the successful deployment of your configurations and select close</p> <p></p> <p></p> <p>Success</p> <p>Well done. This lab section is now complete.</p>"},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_deployExtensions/","title":"Deploy UI Extensions <sup><sup>dep-1.5</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_deployExtensions/#deploy-extensions-via-control-hub","title":"Deploy Extensions via Control Hub","text":"<p>Abstract</p> <p>Adding custom buttons can be achieved in several ways, including via the API, embedded in a macro , the web admin portal on the device, Control Hub, or CE-Deploy. Regardless of the method you  choose, all approaches yield the same outcome. In our labs, we will try using Control Hub and  then CE-Deploy. Make sure to complete lab dep-1.4 before  continuing with this lab. The Run Commands lab lays the foundation for this lab.</p> dep-1.5 Lab <p>dep-1.5.1 In the clear search box for Run xCommands type UserInterface &gt; Extensions &gt;Panel and select  the Save option</p> <p></p> <p></p> <p>dep-1.5.2 This will open the Save Arguments dialog</p> <p></p> <p></p> <p>dep-1.5.3 Use Post_Meeting_Survey as the PanelId.  Open Post_Meeting_Survey.xml in a text editor, or copy the XML provided below. Then, paste the contents of  Post_Meeting_Survey.xml into the Body section. To make this easier, you can also use the copy button located on the  right of any text section.</p> Post_Meeting_Survey_Macro.xml<pre><code>&lt;Extensions&gt;\n    &lt;Version&gt;1.11&lt;/Version&gt;\n    &lt;Panel&gt;\n        &lt;Order&gt;14&lt;/Order&gt;\n        &lt;PanelId&gt;Post_Meeting_Survey&lt;/PanelId&gt;\n        &lt;Location&gt;Hidden&lt;/Location&gt;\n        &lt;Icon&gt;Lightbulb&lt;/Icon&gt;\n        &lt;Name&gt;Post Meeting Survey&lt;/Name&gt;\n        &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n        &lt;Page&gt;\n            &lt;Name&gt;Post Meeting Survey&lt;/Name&gt;\n            &lt;Row&gt;\n                &lt;Name&gt;Overall Rating&lt;/Name&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_overall_text&lt;/WidgetId&gt;\n                    &lt;Name&gt;- - - - -&lt;/Name&gt;\n                    &lt;Type&gt;Text&lt;/Type&gt;\n                    &lt;Options&gt;size=2;fontSize=normal;align=center&lt;/Options&gt;\n                &lt;/Widget&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_overall_change&lt;/WidgetId&gt;\n                    &lt;Name&gt;Change&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=2&lt;/Options&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name&gt;Audio Quality&lt;/Name&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Audio&lt;/WidgetId&gt;\n                    &lt;Type&gt;GroupButton&lt;/Type&gt;\n                    &lt;Options&gt;size=4&lt;/Options&gt;\n                    &lt;ValueSpace&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;4&lt;/Key&gt;\n                            &lt;Name&gt;Superb \ud83c\udf89&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;3&lt;/Key&gt;\n                            &lt;Name&gt;Good \ud83d\ude0a&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;2&lt;/Key&gt;\n                            &lt;Name&gt;Ok \ud83d\udc4d&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;1&lt;/Key&gt;\n                            &lt;Name&gt;Poor \ud83e\udee4&lt;/Name&gt;\n                        &lt;/Value&gt;\n                    &lt;/ValueSpace&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name&gt;Video Quality&lt;/Name&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Video&lt;/WidgetId&gt;\n                    &lt;Type&gt;GroupButton&lt;/Type&gt;\n                    &lt;Options&gt;size=4&lt;/Options&gt;\n                    &lt;ValueSpace&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;4&lt;/Key&gt;\n                            &lt;Name&gt;Superb \ud83c\udf89&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;3&lt;/Key&gt;\n                            &lt;Name&gt;Good \ud83d\ude0a&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;2&lt;/Key&gt;\n                            &lt;Name&gt;Ok \ud83d\udc4d&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;1&lt;/Key&gt;\n                            &lt;Name&gt;Poor \ud83e\udee4&lt;/Name&gt;\n                        &lt;/Value&gt;\n                    &lt;/ValueSpace&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name&gt;Room Cleanliness&lt;/Name&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Room&lt;/WidgetId&gt;\n                    &lt;Type&gt;GroupButton&lt;/Type&gt;\n                    &lt;Options&gt;size=4&lt;/Options&gt;\n                    &lt;ValueSpace&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;4&lt;/Key&gt;\n                            &lt;Name&gt;Superb \ud83c\udf89&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;3&lt;/Key&gt;\n                            &lt;Name&gt;Good \ud83d\ude0a&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;2&lt;/Key&gt;\n                            &lt;Name&gt;Ok \ud83d\udc4d&lt;/Name&gt;\n                        &lt;/Value&gt;\n                        &lt;Value&gt;\n                            &lt;Key&gt;1&lt;/Key&gt;\n                            &lt;Name&gt;Poor \ud83e\udee4&lt;/Name&gt;\n                        &lt;/Value&gt;\n                    &lt;/ValueSpace&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name/&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Email_text&lt;/WidgetId&gt;\n                    &lt;Name&gt;[Enter Email] -- &amp;gt;&lt;/Name&gt;\n                    &lt;Type&gt;Text&lt;/Type&gt;\n                    &lt;Options&gt;size=3;fontSize=normal;align=center&lt;/Options&gt;\n                &lt;/Widget&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Email_enter&lt;/WidgetId&gt;\n                    &lt;Name&gt;Enter&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=1&lt;/Options&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Row&gt;\n                &lt;Name/&gt;\n                &lt;Widget&gt;\n                    &lt;WidgetId&gt;post_Submit&lt;/WidgetId&gt;\n                    &lt;Name&gt;Submit&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=4&lt;/Options&gt;\n                &lt;/Widget&gt;\n            &lt;/Row&gt;\n            &lt;Options/&gt;\n        &lt;/Page&gt;\n    &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre> <p></p> Saving the Panel extension <p></p> <p>dep-1.5.4 Scroll done to the bottom of the Arguments section and Select Execute</p> <p></p> <p></p> <p>You should see a response after execution to show it has been successful</p> <p></p> <p></p> <p>Success</p> <p>You should now see the Post_Meeting_Survey button on your device panel/display.  Next step is making our new custom button function.</p>"},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_deployMacros/","title":"Deploy Macros <sup><sup>dep-1.6</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_deployMacros/#deploy-macros-via-control-hub","title":"Deploy Macro's via Control Hub","text":"<p>Abstract</p> <p>As it stand right now our new custom button does nothing. We are about to change that by adding  a macro that will act on the button being touched.</p> <p>An increasing number of customers are implementing macros and customizations. Without an  efficient deployment solution, it is improbable that customers will extend their custom  solutions beyond a handful of endpoints. Fortunately, Control Hub and CE-Deploy offer tools  that facilitate this process. Control Hub now has the capability to manage both UI and Macro  customizations on individual endpoints, while CE-Deploy can assist with bulk deployment.</p> dep-1.6 Lab <p>dep-1.6.1 Login to control hub with your lab admin credentials</p> <p>dep-1.6.2 First step is to enable Control Hub to manage the devices macros. Select Devices-&gt;Settings</p> <p>dep-1.6.3 Scroll down to the Macros section and toggle on -&gt; Allow Control Hub to manage macros</p> <p></p> <p></p> <p>dep-1.6.4 Next is to deploy our first macro to the Lab device</p> <p>dep-1.6.5 Choose the lab device. Devices -&gt; LabRoomBar/DeskPro(choose your lab device)</p> <p>dep-1.6.6 You can now see that there are no macros deployed to this device  under Configuration -&gt; Macros</p> <p></p> <p></p> <p>dep-1.6.7 Click on Macros</p> <p>dep-1.6.8 Select Add Macro</p> <p></p> <p></p> <p>dep-1.6.9 Copy the javascript below, paste into a text editor  of your choice and save it as a .js file named Post_Meeting_Survey_Macro.js.</p> <p></p>Post_Meeting_Survey_Macro.js<pre><code>import xapi from 'xapi';\n\nconst star_rating_icon = '\u272a ';\n\nxapi.Event.CallDisconnect.on(event =&gt; {\n    setTimeout(Start_Survey, 1000)\n})\n\nlet meetingScores = {\n    Audio: 4,\n    Video: 4,\n    Room: 4\n}\n\nasync function Start_Survey() {\n    //Reset widget values\n    meetingScores.Audio = 4\n    meetingScores.Video = 4\n    meetingScores.Room = 4\n    await xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_overall_text', Value: '- - - - -' });\n    await xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_Email_text', Value: '[Enter Email] -- &gt;' });\n\n    const buttons = ['post_Audio', 'post_Video', 'post_Room']\n    for (let i = 0; i &lt; buttons.length; i++) {\n        await xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: buttons[i], Value: 4 })\n    }\n\n    await xapi.Command.UserInterface.Message.Rating.Display({ Title: 'Rate your call?', Text: 'How would you rate your overall call experience?', FeedbackId: 'star_rating', Duration: 120 })\n}\n\nfunction Followup_Survey(rating) {\n    xapi.Command.UserInterface.Message.Prompt.Display({\n        Title: 'Tell us more of your Experience?',\n        Text: `Would you like to take our extended survey so we can learn more about your ${star_rating_icon.repeat(rating)}experience?`,\n        FeedbackId: 'extended_survey',\n        \"Option.1\": 'Nah, I\\'m Good',\n        \"Option.2\": 'Sure, Happy to Help!'\n    })\n}\n\nxapi.Event.UserInterface.Message.Rating.Response.on(event =&gt; {\n    if (event.FeedbackId == 'star_rating') {\n        xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_overall_text', Value: `${star_rating_icon.repeat(parseInt(event.Rating))}` });\n        if (parseInt(event.Rating) &lt; 5) {\n            Followup_Survey(parseInt(event.Rating))\n        } else {\n            xapi.Command.UserInterface.Message.Prompt.Display({ Title: `Awesome \ud83e\udd73`, Text: 'Thanks for 5 Star Rating!&lt;p&gt;Have a Great Day!', Duration: 15 })\n        }\n    }\n\n    if (event.FeedbackId == 'star_rating_change') {\n        xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_overall_text', Value: `${star_rating_icon.repeat(parseInt(event.Rating))}` });\n    }\n})\n\nxapi.Event.UserInterface.Message.Prompt.Response.on(event =&gt; {\n    if (event.FeedbackId == 'extended_survey' &amp;&amp; event.OptionId == 2) {\n        xapi.Command.UserInterface.Extensions.Panel.Open({ PanelId: 'Post_Meeting_Survey' })\n    }\n})\n\n\nxapi.Event.UserInterface.Message.TextInput.Response.on(event =&gt; {\n    if (event.FeedbackId == 'email') {\n        xapi.Command.UserInterface.Extensions.Widget.SetValue({ WidgetId: 'post_Email_text', Value: event.Text })\n    }\n})\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(event =&gt; {\n    if (event.Type == 'released') {\n        switch (event.WidgetId) {\n            case 'post_overall_change':\n                xapi.Command.UserInterface.Message.Rating.Display({ Title: 'Rate your call?', Text: 'How would you rate your overall call experience?', FeedbackId: 'star_rating_change', Duration: 120 })\n                break;\n            case 'post_Audio':\n                meetingScores.Audio = parseInt(event.Value)\n                break;\n            case 'post_Video':\n                meetingScores.Video = parseInt(event.Value)\n                break;\n            case 'post_Room':\n                meetingScores.Room = parseInt(event.Value)\n                break;\n            case 'post_Email_enter':\n                xapi.Command.UserInterface.Message.TextInput.Display({ Title: 'Add your Email', Text: '(Optional) By providing your Email, we may follow up with you about your Meeting Room Experience', FeedbackId: 'email', Duration: 120 })\n                break;\n            case 'post_Submit':\n                xapi.Command.UserInterface.Extensions.Panel.Close()\n                setTimeout(function () {\n                    xapi.Command.UserInterface.Message.Prompt.Display({\n                        Title: `Thanks for letting us know!`,\n                        Text: `We appreciate your feedback and aim to do better next time&lt;p&gt;Room Score: ${meetingScores.Audio + meetingScores.Video + meetingScores.Room} out of 12`,\n                        Duration: 15\n                    })\n                }, 125)\n                break;\n        }\n    }\n})\n</code></pre> Return to the add macro browser and Select -&gt; Choose a File and navigate to Post_Meeting_Survey_Macro.js.<p></p> <p></p> <p></p> <p>dep-1.6.104.6.10 Click Next</p> <p></p> <p></p> <p>dep-1.6.114.6.11 Ensure that your Macro is enabled</p> <p></p> <p></p> <p>dep-1.6.124.6.12 Click Save. Then click Save again</p> <p>dep-1.6.134.6.13 You should now see in the macro engine logs your macro is loaded without error.</p> <p></p> <p></p> <p>dep-1.6.144.6.14 While still in the Macros lets make a change to our uploaded macro.  Click on the edit button.</p> <p></p> <p></p> <p>dep-1.6.154.6.15 Type the following line to the Macro on line 2.</p> <p></p><pre><code>console.log(\"Post Survey Macro Loading\u2026..\");\n</code></pre> Click save<p></p> <p>dep-1.6.16 You should now notice in your logs that the console message now appears  as the macro is loaded.</p> <p></p> <p></p> <p>Success</p> <p>Console logging is a great way to debug your macro\u2019s in combination with the  macro engine log. To see your new Macro and Extension run try calling another pod and hang up. The Survey will appear after you hang up the call.</p>"},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_orgTemplates/","title":"Org-Wide Templates <sup><sup>dep-1.3</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_orgTemplates/#building-and-deploying-org-wide-configuration-templates-via-control-hub","title":"Building and deploying Org-Wide configuration templates via Control Hub","text":"<p>Abstract</p> <p>In the last lab, we built device-specific configuration templates that can be deployed to  specific endpoints or groups of selected endpoints. We can make this easier by building a  hierarchy of settings that allows us to control these settings at an organization or  location level.</p> <p>Tip</p> <p>You can set configuration defaults for the whole organization,  or for an individual location. These configurations are applied automatically to all devices  that are enrolled in an organization, or set to a specific location. This helps you to manage  configuration consistency across devices. When default configurations are applied, you can still configure an individual device or a set of devices if needed.</p> dep-1.3 Lab <p>dep-1.3.1 Login to control hub with your lab admin credentials</p> <p>dep-1.3.2 Select Management&gt;Devices&gt;Settings&gt;Configuration Defaults</p> <p></p> <p></p> <p></p> <p></p> <p>dep-1.3.3 Select Open org-wide defaults</p> <p>dep-1.3.4 You may notice there are already some defaults provisioned,  we are going to select Add configurations</p> <p></p> <p></p> <p>dep-1.3.5 This presents a similar configuration selection as device templates.  For our org-wide template we are just going  to set the Macro mode. In the Search by configuration name type Macro</p> <p></p> <p></p> <p>dep-1.3.6 Change the Mode from Off to On and select Next</p> <p></p> <p></p> <p>dep-1.3.7 Review the changes and select Cancel changes. Our lab environment contains multiple pods so applying the change is not possible for this configuration.</p> <p></p> <p></p> <p>Success</p> <p>Congratulations! You\u2019ve just viewed an organization-wide configuration template. From now on, whenever a new  device is added to this organization, the org-wide default settings will be applied automatically. These settings  will remain in effect unless overridden by a more specific location or device configuration.</p> <p></p> <p></p>"},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_prepDevices/","title":"Preparing Your Devices <sup><sup>dep-1.1</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_prepDevices/#preparing-your-devices","title":"Preparing Your Devices","text":"<p>Abstract</p> <p>Device Tags are one of the most underutilized features for sorting and filtering devices.  Not only are tags useful in Control Hub, but they are also extremely beneficial when working  with the Webex RESTful APIs, providing one of the most effective ways to filter devices. In  this lab you are only adding tags to one device but the method is the same for multiple devices.</p> <p>Tip</p> <p>Add as many tags in this exercise as you please. They will help you identify your pod's device in later labs. Hint, a pod\"yourPodNumber\" tag may be handy. In the real world you could add a tag for  each of the following:</p> <pre><code>- Country\n- State \n- City\n- Building\n- Room\n- Product\n</code></pre> <p>Using tags in the manner gives you better control over deployments. Imagine an issue is occuring but only on Room Bars. Now you have a tag to run a command using CE-Deploy(which you will see in a later lab) that will  only affect those devices.</p> dep-1.1 Lab <p>dep-1.1.1 Login to the lab's Control Hub with your admin credentials</p> <p>Login to Control Hub.</p> <p>dep-1.1.2 Select Management&gt;Devices</p> <p></p> <p></p> <p>dep-1.1.3 Select your lab device(Room Bar or Desk Pro)</p> <p></p> <p></p> <p>Tip</p> <p>In this lab we are only configuring the one device but if you needed to supply the same tag to multiple devices it would be at this stage you would just continue selecting more devices before selecting edt.</p> <p>dep-1.1.4 Select Edit</p> <p></p> <p></p> <p>dep-1.1.5 The Edit tag page will now allow you to set as many tags as you need.  For this lab we will be using the tag wbx\"yourPodNumber\". As an example wbx01. Also add the tag -&gt; webexRocks.</p> <p></p> <p></p> <p>dep-1.1.6 Select Add tag</p> <p></p> Edit tag <p></p> <p>dep-1.1.7 Add wbx\"YourPodNumber\" and press enter. Repeat for the tag  webexRocks and press enter.</p> <p></p> <p></p> <p>dep-1.1.8 Select Close to close the Edit tags page.</p> <p>dep-1.1.9 Close the edit configurations popout and return to the main devices page.</p> <p>dep-1.1.10 In the Find by devices dialog box type Tags: then enter the device tag previously set.</p> <p></p> <p></p> <p></p> <p></p> <p>Success</p> <p>While this may seem rather insignificant with just one or two devices, if you where deploying  100's or 1000's of endpoints this just makes finding your group of endpoints a whole lot easier.  In a later lab we will use the wbx1 and your pod tag to do a deployment via the Rest API. This concludes  deployment lab one. Now on to using templates.</p>"},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_runCommands/","title":"Run Commands <sup><sup>dep-1.4</sup></sup>","text":""},{"location":"Main-Lab/Deployment/dep_controlHub/dep_controlHub_runCommands/#running-xapi-commands-via-control-hub","title":"Running xAPI commands via Control Hub","text":"<p>Abstract</p> <p>Running xAPI commands in Control Hub can be done on an endpoint by endpoint basis. In this lab  you will execute a simple xAPI command to get the system time to understand how to  execute and find a command. In the next lab we will follow that up with deploying extensions  in a similar fashion.</p> dep-1.4 Lab <p>dep-1.4.1 Login to control hub with your lab admin credentials</p> <p>dep-1.4.2 Select Management&gt;Devices</p> <p></p> <p></p> <p>dep-1.4.3 Right-click on your lab device, no need to highlight the checkbox  this time(Room Bar or Desk Pro)</p> <p>dep-1.4.4 Select Actions and Run xCommand</p> <p></p> <p></p> <p>dep-1.4.5 Type time into the search for a command name text box. Select Time&gt;DateTime</p> <p></p> <p></p> <p>dep-1.4.6 Select Get from the two options for DateTime</p> <p></p> <p></p> <p>dep-1.4.7 Select Execute</p> <p></p> <p></p> <p>Success</p> <p>Well done. While this is a simple example we will dive a little deeper next with using  the same method to deploy extensions so don\u2019t stray to far. Cancel out the Time &gt; DateTime &gt; Get  text in the search bar by using the x button on the left hand side of the text box and do not move a muscle.  We are jumping straight into our next lab Deploy UI Extensions dep-1.5</p>"},{"location":"Main-Lab/PhoneOS/pxp_cloud/","title":"Pxp cloud","text":""},{"location":"Main-Lab/PhoneOS/pxp_conclusion/","title":"Pxp conclusion","text":""},{"location":"Main-Lab/PhoneOS/pxp_intro/","title":"Pxp intro","text":""},{"location":"Main-Lab/PhoneOS/pxp_prerequisites/","title":"Pxp prerequisites","text":""},{"location":"Main-Lab/Resources/res_communities/","title":"Communities","text":""},{"location":"Main-Lab/Resources/res_guides/","title":"Guides","text":""},{"location":"Main-Lab/Resources/res_tools/","title":"Tools&nbsp<i class=\"fa-solid fa-gear\"></i>","text":"Code Difference Checker <p>Use this tool to compare your syntax against the answers to help find stray characters, artifacts or to compare your successful implementation against the lab guides to understand the differences</p>          Ignore Whitespace      Check Differences Differences: <p></p> Base64 Conversion Tool <p></p><p>Convert any string into a base64 encoded string</p> <p>If setting up Basic Auth for an endpoint, be sure to use a colon : to separate the Username and Password</p> <p>Example: username:password </p><p> </p> Click to Convert      Copy your converted Base64 String      <p></p> Flatten Multiline String Tool <p></p><p>Some command fields can't accept a multi-line string. Use this tool to remove line breaks in your string.</p> Flatten Text      Copy your flattened text      <p></p> Stringify XML Body <p></p><p>Use this tool to \"Stringify\" your XML string. Some data fields may be formatted in XML itself, so if your string is written in XML, then you may confuse that xAPI call if you don't handle the syntax appropriately.</p> Stringify XML      Copy your stringified XML <p></p>"},{"location":"Main-Lab/RoomOS/rxp_intro/","title":"RoomOS Introduction","text":"<p>Welcome</p> <p>This section of the lab consists 3 main sections. </p> <p>RoomOS xAPI will teach you to interact with the RoomOS xAPI stack from several different integration points, such as SSH, HTTP and Macros. The xAPI are the building blocks to help you bring your solution to life.</p> <p>RoomOS UserInterfaces will guide you through the customizable interfaces of the device. These pieces help you communicate with your users and build new experiences.</p> <p>Solution Exercises discusses best practices for developing any customization with the RoomOS xAPI and contains walkthroughs of real solutions for you to build leveraging what you learned from the RoomOS xAPI and UserInterfaces sections</p> <p>Important</p> <p>Before you start, if you're running through this lab at Webex One, please ensure the Subscription Assistant UI is available on your RoomOS Device. </p> <p>If it's not, follow the instructions below to download and install the Subscription Assistant Macro.</p> <p></p> Subscription Assistant Icon <p></p> <p>This macro was built to assist you for lessons where you'll Subscribe/Register Feedback to various xAPI Paths. Do not modify this macro, but feel free to learn from this macro and how it operates. </p> <p>We won't be reviewing this macro in this lab, so if we'd encourage you take a copy home with you and review outside this course</p> Download and InstallHow to Use DownloadInstall <p></p> Lab-1451_Subscription-Assistant Macro <p></p> <p>Gif</p> <ul> <li>Locate the <code>Lab-1451_Subscription-Assistant_Part-2.zip</code> file you downloaded</li> <li>Unzip it's Contents</li> <li>Login into the WebUI of your RoomOS Device <pre><code>https://[ROOMOS_IP_ADDRESS]</code></pre></li> <li>Navigate to Macro Editor</li> <li>Drag and Drop the Subscription Assistant Macro into the Macro Editor</li> <li>Save the Macro and Activate the Macro</li> </ul> <p></p> <p></p> Home ScreenxConfigurationsxStatusesxEventsSection Cleanup <p></p> <p>After installing and enabling the Subscription Assistant Macro, the macro will generate a UI extension on your Codec's Touch Control Surface</p> <p>Clicking on this button, will open various tools for you to use when running through Part 2</p> View UI Operation <p></p> <p></p> <p></p> <p>In the xConfigurations Page, you'll have tools for modifying xConfigurations on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xConfigurations throughout the various lessons in Part 2</p> <p></p> <p>In the xStatuses Page, you'll have tools that will issue certain xCommands that will cause certain xStatus events to fire on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xStatus throughout the various lessons in Part 2</p> <p></p> <p>In the xEvents Page, you'll have tools that will cause certain xEvent events to fire on your device. </p> <p>Use these tools when Subscribing/Registering feedback to xEvents throughout the various lessons in Part 2</p> <p></p> <p>Throughout Part 2, we will Subscribe to the same xAPI paths from each Integration Method. This is to familiarize you more with the Syntax of each integration method and how to structure that xApi Path.</p> <p>That Said, we need to clean up the Codec at the end of each Section. When prompted to by the Lab Guide, run the Section Cleanup button. This will prepare the device for the next set of lessons in Part 2</p>"},{"location":"Main-Lab/RoomOS/rxp_prerequisites/","title":"RoomOS Lab Pre-Requisites","text":""},{"location":"Main-Lab/RoomOS/rxp_prerequisites/#roomos-lab-pre-requisites","title":"RoomOS Lab Pre-Requisites","text":"<p>In order to follow this section of the lab, you will need the following</p> <ul> <li>A Laptop</li> <li>Access to a current Desk, Board or Room Series Device running the latest On Premise or Stable Cloud software</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/rxp_exe_intro/","title":"Abstract & Best Practices","text":"<p>Before you Start</p> <p>Solution Exercises may require specific hardware. Each solution will outline any prerequisites needed for Hardware, Cabling and Software loads as needed for the Exercise.</p> <p>If following along </p>"},{"location":"Main-Lab/RoomOS/rxp_exercises/rxp_exe_intro/#outlining-customizations","title":"Outlining Customizations","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/rxp_exe_intro/#outlining-customizations_1","title":"Outlining Customizations","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/rxp_exe_intro/#outlining-customizations_2","title":"Outlining Customizations","text":"<p>When Jumping into your customization, it's good to understand a few things prior to diving in. </p> <p>You should should consider the following</p>"},{"location":"Main-Lab/RoomOS/rxp_exercises/rxp_exe_intro/#keep-things-simple","title":"KEEP THINGS SIMPLE","text":"<ul> <li>There are some pretty robust solutions out there. It can be easy to over-engineer a solution, especially as your skill set starts to flourish.</li> <li>Wherever possible, keep things simple<ul> <li>But sometimes too simple can be a bottleneck, do what's best to provide a robust solution, while also not getting too far into the weeds.</li> </ul> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/rxp_exe_intro/#understanding-your-hardware","title":"Understanding your Hardware","text":"<ul> <li>What are the hardware and software differences between codecs?<ul> <li>Should I hard code Video Output 3 or should I dynamically discover those inputs</li> </ul> </li> <li>How many peripherals are connected?<ul> <li>This could change from room to room. Knowing how to adapt this in your solution dynamically will reduce complications when deploying at scale</li> </ul> </li> <li>Are there differences in how the xAPI is executed between devices?<ul> <li>There certainly is, but it's not impossible to handle and make you solution robust and rugged</li> </ul> </li> <li>What external services are available to me to optimize or enhance this experience?<ul> <li>APIs are wonderful, and everywhere. Explore them and find out what's possible when they start to work together</li> </ul> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/rxp_exe_intro/#understanding-your-stakeholders","title":"Understanding your Stakeholders","text":"<ul> <li>Who will interact with my customization?<ul> <li>IT Folks, C-Suite, Engineers, Admins, Etc</li> </ul> </li> <li>Are you working with the person procuring or using the solution?<ul> <li>Procurement and the end use may be one in the same, but at times they are disconnected. If possible, engage with those who ultimately use your customization to get a better understanding of their need.</li> </ul> </li> <li>How do these individuals do work?<ul> <li>Is this a seminar space, a conference room, an open collaboration space, a classroom, a lab?</li> <li>Optimizing your solution to fit those needs are key to success</li> </ul> </li> <li>What are their expectations of the solution?<ul> <li>Is the vision of the end user in line with your vision of the solution. Keeping an open dialogue with your customer as to what's possible will help keep your goals in line</li> </ul> </li> <li>What can you anticipate that wasn't considered in the original ask?<ul> <li>Some asks are too simple. Putting in the extra 2 cents to really flesh out a professional solution, even for a small ask, can yield a better solution in the end.</li> </ul> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/rxp_exe_intro/#tackle-your-solution-from-outside-the-box","title":"Tackle your solution from outside the box","text":"<ul> <li>Best to design for scale, wherever possible<ul> <li>How can I make my solution on all hardware and software iterations?</li> </ul> </li> <li>Make you solution flexible<ul> <li>If your code can solve for multiple room flows, build in tools to let you quickly adapt your code</li> </ul> </li> <li>Think of your colleagues and future self<ul> <li>Some day you or a colleague may be called upon to troubleshoot a solution, make sure you leave breadcrumbs or documentation to help yourself years from now.</li> </ul> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Camera_Compositions/","title":"rxp exe Camera Compositions","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Codec_To_Codec_Comms/","title":"rxp exe Codec To Codec Comms","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Dial_Button/","title":"rxp exe Quick Dial Button","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT1/","title":"Part 1 - Start Simple <sup><sup>rxe-m1</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT1/#quick-docs-macro-exercise-part-1-start-simple-section-rxe-m1","title":"Quick Docs Macro Exercise - Part 1 - Start Simple <sub>(section rxe-m1)</sub>","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT1/#section-rxe-m1-requirements","title":"Section rxe-m1 Requirements","text":"<p>Note</p> <p>This lab assumes you have access to a Cisco RoomOS Device that is already setup and ready for use. If your device is not registered and online, please do so before beginning</p> <p>Additional Lessons</p> <ul> <li>It's recommended you have run through Accessing RoomOS xAPI via Macros in Macros rxp-6 at a minimum before proceeding with this Exercise</li> </ul> <p>Hardware</p> <ul> <li>A Laptop</li> <li>A Cisco Desk, Board or Room Series Device running the most recent On Premise or Cloud Stable software<ul> <li>A Touch Controller is required when working on a Room Series Device. Either Room navigator or 3rd part touch display</li> <li>Preferred Device: Cisco Desk Pro</li> </ul> </li> <li>A minimum of 1 camera (Either Integrated or External)</li> </ul> <p>Software</p> <ul> <li>Laptop<ul> <li>Recommended Browser: Chrome or Firefox</li> <li>Recommended Terminal Software:<ul> <li>Command Prompt (Windows)</li> <li>Terminal (MAC)</li> <li>Putty (Windows)</li> <li>Termius (Windows, MAC, Linux)</li> </ul> </li> </ul> </li> <li>RoomOS Device<ul> <li>Either the current On Premise or Cloud Stable release</li> </ul> </li> </ul> <p>Network</p> <ul> <li>Local Access to the RoomOS Device over port 80/443</li> <li>General access to the Internet</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT1/#part-1-solution-outline","title":"Part 1 Solution Outline","text":"<p>In section rxe-m1 of this lab, we'll build a Macro that will allow folks to either View a Document or Scan a QR code to take the document with them on your device.</p> <p>We'll review how to:</p> <ul> <li>Build a UserInterface</li> <li>Map those UserInterface elements to actions driven by an accompanying macro</li> <li>Integrate a 3rd party QR code service, leveraging APIs external to the Codec</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT1/#start-with-the-userinterface-rxe-m11","title":"Start with the UserInterface <sub>(rxe-m1.1)</sub>","text":"Lesson: Create a New Panel Button <sub>(rxe-m1.1.1</sub>) <p>Starting with the UserInterface elements helps use visualize our solution and determine how to then structure our Macro</p> <p>Save Extension Button</p> <p></p> <p></p> <ul> <li> <p>Task: </p> <ul> <li>Create a new Panel</li> <li>Assign this panel's id as: <pre><code>wx1_QrDocs</code></pre></li> <li>Assign this panel's name as: <pre><code>Room Docs</code></pre></li> <li>Assign this panel's location as: <code>HomeScreenAndCallControls</code></li> <li>Pick any icon you wish</li> <li>Pick any Panel Color you wish</li> <li>Save your Extension<ul> <li>You should be able to see your Panel on the Codec's Touch Interface</li> </ul> </li> </ul> </li> </ul> View Successful UI Execution OSDOpened PanelUI Properties <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> Challenge: Rename the Page to Room Docs <ul> <li>Rename the Page Name from <code>Page</code> to: <pre><code>Room Docs</code></pre></li> <li>Assign the PageId as: <pre><code>wx1_QrDocs~RoomDocs</code></pre></li> </ul> Lesson: Add Solution Widgets  <sub>(rxe-m1.1.2)</sub> <p>Save Extension Button</p> <p></p> <p></p> <ul> <li> <p>Task: </p> <ul> <li>Rename Row 1 to: <pre><code>Lab 1451</code></pre><ul> <li>Add 2 Buttons to this row<ul> <li>Set the following properties for the left button<ul> <li>Rename Button Text <code>Button</code> to: <pre><code>Open Site</code></pre></li> <li>Assign WidgetId: <pre><code>wx1_QrDocs~OpenSite~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/</code></pre></li> <li>Set the Widget Width to 2</li> </ul> </li> <li>Set the following properties for the Right button<ul> <li>Rename Button Text <code>Button</code> to: <pre><code>Open QrCode \ud83d\udd33</code></pre></li> <li>Assign WidgetId: <pre><code>wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/</code></pre></li> <li>Set the Widget Width to 2</li> </ul> </li> </ul> </li> </ul> </li> <li>Add a second row, with the name: <pre><code>Reimagine Workspaces</code></pre><ul> <li>Add 2 Buttons to this row<ul> <li>Set the following properties for the left button<ul> <li>Rename Button Text <code>Button</code> to: <pre><code>Open Site</code></pre></li> <li>Assign WidgetId: <pre><code>wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html</code></pre></li> <li>Set the Widget Width to 2</li> </ul> </li> <li>Set the following properties for the Right button<ul> <li>Rename Button Text <code>Button</code> to: <pre><code>Open QrCode \ud83d\udd33</code></pre></li> <li>Assign WidgetId: <pre><code>wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html</code></pre></li> <li>Set the Widget Width to 2</li> </ul> </li> </ul> </li> </ul> </li> <li>Save your Extension<ul> <li>You should be able to see your Panel on the Codec's Touch Interface</li> </ul> </li> </ul> </li> </ul> View Successful UI Execution <p></p> <p></p> Add your Organization's HomePage  <p>You may have noticed the WidgetIds have a URL as apart of the ID</p> <p>We'll be using this in the Macro we write later, to open this page</p> <p>Here is how we're structuring WidgetIds for this lab</p> <p>Example</p> <ul> <li> <p>WidgetId Structure: appName~Action~URL</p> <ul> <li>appName: <code>wx1_QrDocs</code> -&gt; Let's us associate this interface with our Macro Script and helps make the WidgetId more unique</li> <li>action: <code>OpenSite</code> or <code>OpenQrCode</code> -&gt; This will tell use how we want to open our URL</li> <li>URL: This is the URL we want to open, or build a QR Code for</li> <li>String Separator: <code>~</code> -&gt; Using a unique character, such as this tilde, can help use split up and access this information later in the Macro</li> </ul> </li> </ul> Is this WidgetId format mandatory? <p>Widget Ids are strings. This is just one of many examples of how you can structure your widgets. It's not required to structure them like this, with the exception of this lab. </p> <p>So long as they are unique in your customization, you should be good to go</p> <ul> <li>Task: <ul> <li>Create a 3rd Row</li> <li>Add in an Open Site button and an Open QrCode \ud83d\udd33 with your Organizations Home Page as the Url</li> <li>Be sure to assign <code>wx1_QrDocs</code> as the appName and the correct action to the button they represent</li> </ul> </li> </ul> Hint <p>OpenSite: </p><pre><code>wx1_QrDocs~OpenSite~YOUR_ORG_HOMEPAGE</code></pre> OpenQrCode: <pre><code>wx1_QrDocs~OpenQrCode~YOUR_ORG_HOMEPAGE</code></pre><p></p>"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT1/#create-a-new-macro-and-subscribe-rxe-m12","title":"Create a New Macro and Subscribe <sub>(rxe-m1.2)</sub>","text":"<p>Abstract</p> <p>Now that we have our UserInterface in place, we can start to build our solution</p> <p>We'll be using the Macro Editor for this solution, but know that you can do these very same tasks from any other avenue we explored in Part 2 of this lab</p> <p>The benefit of Macros, is that they come with every Cisco Codec running Ce9.2 or newer (with the exception of the Sx10). So no need to procure hardware or spin up a service to start building a solution </p> Lesson: Create a new Macro <sub>(rxe-m1.2.1)</sub> <p>If you missed Section 2.6 in part 2 of this lab, please watch this Vidcast</p> Vidcast: Macro Editor IDE Review <p></p> <p></p> <ul> <li> <p>Task:</p> <ul> <li>Select Create new macro in the Macro Editor</li> <li>Name this macro Room Docs</li> <li>Save and Activate+ the Room Docs Macro</li> </ul> Review how To Device LoginDevice HomeMacro EditorCreate, Save and Activate a Macro <p>if NOT already logged into the endpoint, follow these steps</p> <ul> <li>Open a Browser and enter your Codec's IP as a URL and hit enter</li> <li>Login with your Username and Password</li> </ul> <p></p> Device Login Page <p></p> <p>If in the UI Extensions Editor</p> <ul> <li>Click on the Device Name in the Top Left hand corner of the UI Extensions Editor to get back to the Device Home Page</li> </ul> <p></p> Device Home Page <p></p> <p></p> The Macro Editor <p></p> <p>Create, Save and Activate a Macro</p> <p></p> Create, Save and Activate a Macro <p></p> </li> </ul> Lesson: Subscribing to Widget Actions <sub>(rxe-m1.2.2)</sub> <ul> <li> <p>xAPI: xEvent UserInterface Widget Action</p> </li> <li> <p>Task:</p> <ul> <li> <p>Subscribe the xAPI Path above using Macro Syntax</p> </li> <li> <p>Take the Callback information generated by this event, and log it to the Macro Console using <code>console.log()</code></p> </li> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Macro Console Output</li> </ul> </li> </ul> Compare your Macro <p>Note</p> <p>It's ok if your macro's structure doesn't match 1:1 with the examples below</p> <p>As long as they information we access is the same, then format is up to the developers preference</p> <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({WidgetId, Type, Value}) =&gt; {\n  console.log({WidgetId, Type, Value})\n})\n</code></pre> Compare your Macro Console Time Macro WidgetId Type Value HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ pressed <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ released <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ <code>clicked</code> <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ pressed <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ released <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ <code>clicked</code> <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html pressed <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html released <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html <code>clicked</code> <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html pressed <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html released <code></code> HH:MM:SS Room Docs wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html <code>clicked</code> <code></code> Why does each Widget click have 3 events fire? <p>Good Catch ! Many widgets offer 1-3 events that will fire based on the conditions of the action</p> <p>This is important to know, as you may only want an action to happen once, not upwards of 3 times, when building your automation</p> <p>We can use techniques in ES6 JS to filter out what we're interested in for these scenarios</p> <p>For reference, here's a list of Widgets and their event payloads</p> <p>Click on each table below to review each Widget</p> ToggleSliderButtonGroupButtonIcon ButtonSpinnerTextBoxDirectional PadSpacer <p>Gif</p> <p></p> Toggle Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>changed</code> Value <code>on</code> or <code>off</code> <p>Gif</p> <p></p> Slider Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>changed</code> Value <code>Integer between 0 and 255</code> <p>Gif</p> <p></p> Button Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value N/A <p>Gif</p> <p></p> Group Button Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code> Value <code>Assigned by the Developer on Widget Instantiation</code> <p>Gif</p> <p></p> Icon Button Icons <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value N/A <p>Gif</p> <p></p> Spinner Icons <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value <code>increment</code> or <code>decrement</code> <p>Does not fire events</p> <p>Gif</p> <p></p> Directional Pad Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, <code>center</code> <p>Does not fire events</p> Lesson: Refine and Filter our Widget information <sub>(rxe-m1.2.3)</sub> <p>Info</p> <p>As you saw in the previous example Widgets can produce 1-3 events to fire whenever you interact with them</p> <p>It's best to filter this down to the specific even in question</p> <p>In macros, we can use the tools offered to us by ES6 JS to complete this task</p> <ul> <li> <p>xAPI: xEvent UserInterface Widget Action</p> </li> <li> <p>Task: </p> <ul> <li>Replace your original console.log with console.debug<ul> <li>This will hide this log in the debug group, we can use this later to check our work</li> </ul> </li> <li>Use an <code>if</code> ES6 JS statement to filter our WidgetId Event and confirm the widget belongs to our customization<ul> <li>This can be done using ES6 JS's <code>.includes('wx1_QrDocs')</code> prototype</li> </ul> </li> <li>Use an <code>if</code> ES6 JS statement to filter our Type event and check to see if it matches released<ul> <li>This can be done using ES6 JS's Equality <code>==</code> or Strict Equality <code>===</code> operators</li> <li>We won't be using pressed or clicked</li> </ul> </li> <li>Use the <code>.split('~')</code> ES6 JS prototype to split out our app, action and url and assign them to objects using our tilde as the string separator</li> <li>Use a <code>switch</code> ES6 JS statement to handle <code>OpenSite</code> and <code>OpenQrCode</code> actions respectively<ul> <li>Place console.log(action, url) below the <code>OpenSite</code> case and console.warn(action, url) below the <code>OpenQrCode</code> case</li> </ul> </li> </ul> <p>Click the Tabs Below to see how each Task above is implemented</p> Verify WidgetID with <code>if</code> and <code>includes</code>&gt;Compare Type using <code>if</code> and <code>==</code>&gt;Assign app, action and URL using <code>split</code> &gt;Use <code>switch</code> to handle actions <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value }); // &lt;-- Changed to Debug\n  if (WidgetId.includes(`wx1_QrDocs`)) {    // &lt;-- Asks if WidgetIn includes wx1_QrDocs\n\n  };\n});\n</code></pre> Why Use <code>includes()</code>? <p>We structured all of our WidgetIds with the same prefix wx1_QrDocs</p> <p>This helps make our Widget References Unique, but also helps us ignore any widgets that don't include wx1_QrDocs</p> <p>If a solution were to have the same widgetId, then that 1 widget could have solutions fire from 2 different integration sources. In some cases, that's fine or even necessary, but it's best practice to make your widgets as unique to your solution as possible and for your solution to ignore any other chatter on the Codec</p> <p></p>        Learn more about the <code>.includes()</code> prototype         Learn more about <code>if</code> statements  <p></p> <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') { // &lt;-- Asked if the Type is equal to released\n\n    };\n  };\n});\n</code></pre> <p></p>        Learn more about <code>if</code> statements         Learn more about <code>Operators</code> <p></p> <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`); // &lt;-- Extract our App, Action and Url and assigned them to the object they represent\n    };\n  };\n});\n</code></pre> Why <code>.split()</code> our widget? <p>This gives use new objects to work with. The benefit of how we implemented our WidgetId structure[app~action~url] allows us to make our code a bit more flexible</p> <p>Now, if you wanted to add more sites, all you would need to do is add more buttons to the UI Extension following the WidgetId structure we set, and your Macro Code doesn't need to be modified to allow it to work</p> <p></p>        Learn more about the <code>.split()</code> prototype         Learn more about the <code>Destructuring</code> assignments         Learn more about <code>Arrays</code> <p></p> <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {   // &lt;-- Switch what code we run when:\n        case 'OpenSite':  // &lt;-- The OpenSite action comes in\n          console.log(action, url);\n          break;\n        case 'OpenQrCode':// &lt;-- The OpenQrCode action comes in\n          console.warn(action, url);\n          break;\n        default:          // &lt;-- The When an Unknown action comes in\n          console.error(`Unknown Action Fired: [${action}]`)\n          break;\n      };\n    };\n  };\n});\n</code></pre> Why not use <code>if</code> statement instead of <code>switch</code> <p>If statements could work, but as you use more and more if statements, the code becomes a bit harder to read</p> <p>Using switches, if we wanted to define another action, it would be as simple as adding another case and adding codec below it to define how that case runs</p> <p>Both do the same job, some implementations are easier on the eyes than others</p> <p></p>        Learn more about <code>switch...case</code> <p></p> <ul> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Macro Console Output</li> </ul> </li> </ul> Compare your Macro <pre><code>import xapi from 'xapi';\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          console.log(action, url);\n          break;\n        case 'OpenQrCode':\n          console.warn(action, url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`)\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time Macro Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs OpenQrCode https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ HH:MM:SS Room Docs OpenSite https://www.webex.com/us/en/workspaces.html HH:MM:SS Room Docs OpenSite https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ HH:MM:SS Room Docs OpenQrCode https://www.webex.com/us/en/workspaces.html"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT1/#define-and-finalize-solution-rxe-m13","title":"Define and finalize solution <sub>(rxe-m1.3)</sub>\ud83e\udd73 You made a UI and a Macro \ud83c\udf89","text":"<p>Info</p> <p>Now that we can access the data from our widgets as we expect, we can start to implement the function of opening a Web Page on out touch interface</p> Lesson: Defining our <code>OpenSite</code> function <sub>(rxe-m1.3.1)</sub> <p>Important</p> <p>We'll be using the WebView Display API</p> <p>If you're working on a Desk or Board Series Endpoint use the parameter Target:\u00a0OSD in the following lessons</p> <p>If you're working on a Room Series Endpoint with a Room Navigator attached use the parameter Target:\u00a0Controller in the following lessons</p> <p>Note</p> <ul> <li>Room Series with 3rd Party Touch can use OSD as a Target value</li> <li>Room Series with Touch 10 CAN NOT use the Controller Target Value<ul> <li>If you have no touch display or room Navigator, you will need to build a WebView Close Panel</li> <li>This is not covered in this lab</li> </ul> </li> </ul> <ul> <li> <p>xAPI: xCommand UserInterface WebView Display</p> </li> <li> <p>Task: </p> <ul> <li>Declare a new async function called openSite with the following function parameters<ul> <li>url</li> <li>target = 'OSD'<ul> <li>Note: change OSD to Controller if a Room Navigator touch panel is available</li> </ul> </li> </ul> </li> <li>Within this function:<ul> <li>Structure the xAPI reference above using Macro Syntax with the following parameters and values<ul> <li>Url: <code>url</code></li> <li>Target: <code>target</code></li> </ul> </li> <li>Log a Successful response from your xAPI call</li> <li>Catch and log an error from your xAPI call</li> </ul> </li> <li>Replace <code>console.log(action, url);</code> under the OpenSite case within your WidgetActions event with this new openSite() function call and pass in the <code>url</code> object into your function</li> </ul> View <code>openSite(url, target)</code> function <pre><code>async function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    console.error(err);\n  }\n}\n</code></pre> <p></p>        Learn more about <code>Async Functions</code>        Learn more about <code>try..catch</code> statements  <p></p> <ul> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Device OSD and Macro Console Output</li> </ul> </li> </ul> View OSD Output Lab 1451Reimagine Workspaces <p></p> Lab 1451 WebView <p></p> <p></p> Reimagine Workspaces WebView <p></p> Compare your Macro <pre><code>import xapi from 'xapi';\n\nasync function openSite(url, target = 'OSD') { //&lt;-- Declare and define your openSite function\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);  //&lt;-- Log a Successful Response\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    console.error(err); //&lt;-- Catch and log an Error\n  }\n}\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n                        // \u2191 url object\n      switch (action) {\n        case 'OpenSite':\n          openSite(url); //&lt;-- Run the openSite() function and pass in the url object\n          break;\n        case 'OpenQrCode':\n          console.warn(action, url); \n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time Macro Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs Site Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] HH:MM:SS Room Docs OpenQrCode  https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ HH:MM:SS Room Docs Site Webview Opened for: [https://www.webex.com/us/en/workspaces.html] HH:MM:SS Room Docs OpenQrCode  https://www.webex.com/us/en/workspaces.html Lesson: Defining our <code>OpenQrCode</code> function <sub>(rxe-m1.3.2)</sub> <p>Making QR Codes is NOT a normal function of the Codec</p> <p>In this lesson, in order to generate a QR code for our customization, then we'll need to leverage a 3rd party QR API Service</p> <p>This is how you can introduce more functionality to your device by leveraging the World of APIs</p> <p>Always Keep Security Top of Mind!</p> <p>It's easy to fall outside your organization's security policy especially when building new solutions.</p> <p>Make sure you work with your, or your Customer's, Information Security teams before implementing a new solution that requires Integration Authentication of any kind or reaches out on the internet.</p> <p>The security implications of a solution can force you building your solution using a different integration method, or even stop a project all together.</p> <p></p>        Checkout Webex's  Security Technical References  <p></p> <ul> <li> <p>xAPI: xCommand UserInterface WebView Display</p> </li> <li> <p>Task: </p> <ul> <li>Declare a new async function called openQrCode with the following function parameters<ul> <li>url</li> <li>target = 'OSD'<ul> <li>Note: change OSD to Controller if a Room Navigator touch panel is available</li> </ul> </li> </ul> </li> <li>Within this function:<ul> <li>Use ES6 JS's <code>encodeURI()</code> function to modify the URL in and assign it to a new object called <code>encodedUrl</code><ul> <li>This is because we'll be wrapping our target URL within a URL from our QR Code Service</li> </ul> </li> <li>Add your <code>encodedUrl</code> object to the data Url Parameter in the URL and assign it to a new object called <code>qrURL</code><ul> <li><pre><code>https://api.qrserver.com/v1/create-qr-code/?data=encodedUrl</code></pre></li> </ul> </li> <li>Structure the xAPI reference above using Macro Syntax with the following parameters and values<ul> <li>Url: <code>formattedURL</code></li> <li>Target: <code>target</code></li> </ul> </li> <li>Log a Successful response from your xAPI call</li> <li>Catch and log an error from your xAPI call</li> </ul> </li> <li>Replace <code>console.warn(action, url);</code> under the OpenQrCode case within your WidgetActions event with this new openQrCode() function call and pass in the <code>url</code> object into your function</li> </ul> View <code>openQrCode(url, target)</code> function <pre><code>async function openQrCode(url, target = 'OSD') { //&lt;-- Declare and define your openQrCode function\n  const encodedUrl = encodeURI(url);             //&lt;-- Encode the URL that was provided\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL); //&lt;-- Log a Successful Response\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err); //&lt;-- Catch and log an Error\n  }\n}\n</code></pre> <p></p>        Learn more about <code>Async Functions</code>        Learn more about <code>try..catch</code> statements  <p></p> <ul> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Device OSD and Macro Console Output</li> </ul> </li> </ul> View OSD Output Lab 1451Reimagine Workspaces <p></p> Lab 1451 WebView <p></p> <p></p> Reimagine Workspaces WebView <p></p> Compare your Macro <pre><code>import xapi from 'xapi';\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') { //&lt;-- Declare and define your openQrCode function\n  const encodedUrl = encodeURI(url);             //&lt;-- Encode the URL that was provided\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL); //&lt;-- Log a Successful Response\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err); //&lt;-- Catch and log an Error\n  }\n}\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n                        // \u2191 url object\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url); //&lt;-- Run the openQrCode() function and pass in the url object\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time Macro Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs Site Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] HH:MM:SS Room Docs QR Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] HH:MM:SS Room Docs Site Webview Opened for: [https://www.webex.com/us/en/workspaces.html] HH:MM:SS Room Docs QR Webview Opened for: [https://www.webex.com/us/en/workspaces.html] <p>Abstract</p> <p></p><p></p> <p>But we can do a few more things to make this a really rugged solution that enabled simpler deployment and allows us to scale a bit better</p> <p>And we can do this in several ways</p>"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT2/","title":"Part 2 - Optimize<sup><sup>rxe-m2</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT2/#quick-docs-macro-exercise-part-2-optimize-section-rxe-m2","title":"Quick Docs Macro Exercise - Part 2 - Optimize <sub>(section rxe-m2)</sub>","text":""},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT2/#section-rxe-m1-requirements","title":"Section rxe-m1 Requirements","text":"<p>Note</p> <p>This lab assumes you have access to a Cisco RoomOS Device that is already setup and ready for use. If your device is not registered and online, please do so before beginning</p> <p>Additional Lessons</p> <ul> <li>It's recommended you have run through Accessing RoomOS xAPI via Macros in Macros rxp-6 at a minimum before proceeding with this Exercise</li> <li>Complete Quick Docs Part 1 <sup>rxe-m1</sup> before proceeding</li> </ul> <p>Hardware</p> <ul> <li>A Laptop</li> <li>A Cisco Desk, Board or Room Series Device running the most recent On Premise or Cloud Stable software<ul> <li>A Touch Controller is required when working on a Room Series Device. Either Room navigator or 3rd part touch display</li> <li>Preferred Device: Cisco Desk Pro</li> </ul> </li> <li>A minimum of 1 camera (Either Integrated or External)</li> </ul> <p>Software</p> <ul> <li>Laptop<ul> <li>Recommended Browser: Chrome or Firefox</li> <li>Recommended Terminal Software:<ul> <li>Command Prompt (Windows)</li> <li>Terminal (MAC)</li> <li>Putty (Windows)</li> <li>Termius (Windows, MAC, Linux)</li> </ul> </li> </ul> </li> <li>RoomOS Device<ul> <li>Either the current On Premise or Cloud Stable release</li> </ul> </li> </ul> <p>Network</p> <ul> <li>Local Access to the RoomOS Device over port 80/443</li> <li>General access to the Internet</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT2/#part-2-solution-outline","title":"Part 2 Solution Outline","text":"<p>Note</p> <p>In Quick Docs Part 1 <sup>rxe-m1</sup>, we built a complete solution, but the information we wrote into the solution is hardcoded in the Macro. This means every time we want to make a change, we then have to update the macro on all X devices we manage.</p> <p>In Quick Docs Part 2 <sup>rxe-m2</sup> of this lab, we'll expand our quick docs solution that enables use new ways to centralize and scale our solution across our device portfolio.</p> <p>This may be fine for a small number of rooms, but should you have a few hundred or thousand rooms, we'll want to leverage what we can simplify our workload</p> <p>We also may not want to allow this Macro to be edited by our content creators as they may be unfamiliar with the environment and could incur larger changes to the macro's operation. This could lead to additional support time for you but we don't want to have to be the sole curator of the content. To tackle this, we'll host an additional manifest file with Document references that we can share with our content creators and edit our macro on the fly based on that nee external resource.</p> <p>These 2 changes are great, but introduces a problem; we hard coded our UI too. Luckily, by making clever use of the Panel Save command, we can generate this UI as new information enters the Macro</p> <p>Outline</p> <p>In Quick Docs Part 2 <sup>rxe-m2</sup> we'll:</p> <ul> <li>Re-organize our macro to improve readability</li> <li>Modify our Macro to fetch a new list of documents on the network</li> <li>Maintain Backwards compatibility by allowing hard coded docs to continue to live on the device</li> <li>Good for local super users, who may need special documents on a per room basis</li> <li>Automate the UserInterface so we can spawn all new buttons based on this new information</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT2/#implementing-imports-and-exports-rxe-m21","title":"Implementing imports and exports <sub>(rxe-m2.1)</sub>","text":"Lesson: Create another Macro <sub>(rxe-m2.1.1)</sub> <ul> <li> <p>Task:</p> <ul> <li>Select Create new macro in the Macro Editor</li> <li>Name this macro Room Docs Configuration</li> <li>Save and keep the Room Docs Configuration Macro Inactive</li> </ul> </li> </ul> Review how to Create and Save a Macro <p></p> Create, Save and Activate a Macro <p></p> Lesson: Establish a Config Object <sub>(rxe-m2.1.2)</sub> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li> <p>Select the Room Docs Configuration Macro and perform the next few tasks in this Macro</p> </li> <li> <p>Remove <code>import xapi from 'xapi';</code> from the Room Docs Configuration Macro</p> </li> <li> <p>Copy the <code>config</code> object outlined below and paste this into the Room Docs Configuration Macro</p> </li> </ul> Copy this `config` Object<pre><code>const config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: '',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: 'https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/',\n      QrEnabled: false\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: 'https://www.webex.com/us/en/workspaces.html',\n      QrEnabled: true\n    }\n  ]\n};\n\nconsole.log('Config:', config);\n</code></pre> <ul> <li> <p>Once complete, Save, and activate this macro</p> </li> <li> <p>Look at the Macro Console, you should see the contents of the config object print to the console.</p> </li> </ul> Compare your <code>Room Docs Configuration</code> Macro <pre><code>const config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: '',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: '',\n      QrEnabled: false\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: '',\n      QrEnabled: true\n    }\n  ]\n};\n\nconsole.log('Config:', config);\n</code></pre> </li> </ul> Lesson: Export your Config Object <sub>(rxe-m2.1.3)</sub> <p>Now that we've established a config in our new <code>Room Docs Configuration</code> macro, in order to make use of it in any other macros on the device, we'll need to export it</p> <ul> <li> <p>Task: </p> <ul> <li>Below the <code>console.log('Config:', config);</code> in the Room Docs Configuration Macro add the following code</li> </ul> <pre><code>export { config };\n</code></pre> <ul> <li> <p>Once complete, Save your macro.</p> </li> <li> <p>Look at the Macro Console, you should still see the contents of the config object print to the console.</p> </li> </ul> Compare your <code>Room Docs Configuration</code> Macro <pre><code>const config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: '',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: '',\n      QrEnabled: false\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: '',\n      QrEnabled: true\n    }\n  ]\n};\n\nconsole.log('Config:', config);\n\nexport { config };\n</code></pre> </li> </ul> Lesson: Import your Config Object <sub>(rxe-m2.1.4)</sub> <p>With the config object now being exported in your Macro Editor, it's now accessible to any other macro running on the device.</p> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li> <p>Select the Room Docs Macro and perform the next few tasks in this Macro</p> </li> <li> <p>Below <code>import xapi from 'xapi';</code> add the following</p> </li> </ul> <pre><code>import { config } from './Room Docs Configuration';\n</code></pre> <ul> <li>add a new line and add</li> </ul> <pre><code>console.log('Imported Config:', config);\n</code></pre> <ul> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> <li> <p>Monitor your log output</p> <ul> <li>You should now see 2 instances of the config object print to the console</li> <li>This illustrates how both macros are accessing the same object and can perform separate tasks using the same information</li> </ul> </li> <li>However, it's not necessary to have both macros running now. At this time, deactivate the Room Docs Configuration macro</li> </ul> </li> </ul> Why deactivate the Room Docs Configuration Macro?  2mb of Storage?!?!? <p>Not to worry, 2mb may sound small, but this is the storage for the text contained within your macro, and you can store ALOT of tex in 2mb</p> <p>It will take you time to max this out, but should you it may be time for you to help us proctor this lab </p> <p>The Macro Editor can only support 10 active macros at a time per device, however it can support any number of inactive macros so long as long as you haven't exceeded the 2mb of storage for Macro Code.</p> <p>So, by disabling the Room Docs Configuration macro, we free up an active macro slot for our device, and we'll still be able to access this information.</p> <p>Now, this doesn't mean you couldn't have a solution with 2 macros running and still use exporting/importing information. In our case, our Room Docs Configuration macro is only serving as a library of information and not executing any tasks for use, so best to leave off as to not waste an active macro slot.</p> Compare your <code>Room Docs</code> Macro <pre><code>import xapi from 'xapi';\nimport { config } from './Room Docs Configuration'; // &lt;-- Imports should always be on the top level\n\nconsole.log('Config:', config); // &lt;-- Log the config object here\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') {\n  const encodedUrl = encodeURI(url);\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err);\n  }\n}\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time App Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs Config: {\"manifestVisibility\":\"localOnly\",\"remoteSiteManifest\":\"\",\"localSiteManifest\":[{\"Name\":\"Lab 1451\",\"Url\":\"\",\"QrEnabled\":false},{\"Name\":\"Reimagine Workspaces\",\"Url\":\"\",\"QrEnabled\":true}]}"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT2/#automating-the-userinterface-rxe-m22","title":"Automating the UserInterface <sub>(rxe-m2.2)</sub>","text":"<p>Abstract</p> <p>Now that we have a config object established and it's accessible in our Room Docs macro, we can iterate over this config object and build the UserInterface dynamically. We can use a combination of the Device xAPI and some string manipulation techniques available in ES6 JS to form a new XML payload which we can load in as soon as the script starts</p> Lesson: Download our current UserInterface XML <sub>(rxe-m2.2.1)</sub> <p>Click on the Tabs Below to learn how to download the UI XML</p> Device HomeUI Extensions EditorDownload OptionsDownload Operation <ul> <li>Select the UI Extensions Editor on the Left-Hand Navigation Bar</li> </ul> <p></p> Device Home Page <p></p> <ul> <li>The Options to download the UI Extension Panel is in the Extensions ToolBar</li> </ul> <p></p> UI Extensions Editor <p></p> <ul> <li>Select the Room Docs Panel</li> <li>Select the Editor Menu (\"Pancake\" icon) in the Extensions Toolbar</li> <li>Select Export current panel to file</li> </ul> <p></p> UI Extensions ToolBar Expanded <p></p> <ul> <li>UI Extensions Downloads come with the name roomcontrolconfig\u00a0-\u00a00000-00-00T00:00:00.000.xml</li> <li>The Most Recent Timestamp is the one you just downloaded</li> </ul> <p></p> UI Extensions Download Operation <p></p> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li> <p>Open the roomcontrolconfig\u00a0-\u00a00000-00-00T00:00:00.000.xml file</p> <ul> <li>Use Notepad for Windows</li> <li>Use TextEdit for MAC</li> </ul> </li> <li> <p>Review the contents of your UI Extension's XML</p> </li> <li>We'll be taking parts of this XML in the next lesson, and re-structuring it based on our <code>config</code> object</li> </ul> </li> </ul> Lesson: Add a <code>buildUI()</code> function to the Room Docs Macro  <sub>(rxe-m2.2.2)</sub> <ul> <li> <p>xAPI: xCommand UserInterface Extensions Panel Save</p> </li> <li> <p>Task:</p> <ul> <li> <p>Declare a new async function called buildUI without function parameters</p> </li> <li> <p>Within this function:</p> <ul> <li>Declare a <code>rows</code> object with a value of <code>''</code> (Yes, no value assigned)</li> <li>Use ES6 JS's forEach prototype to loop through <code>config.localSiteManifest</code> Array     <pre><code>let rows = '';\n\nconfig.localSiteManifest.forEach(site =&gt; {\n  console.log(`Appending [${site.Name}] Site to UI`);\n  rows = rows + `&lt;Row&gt;\n                  &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                  &lt;Widget&gt;\n                    &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                    &lt;Name&gt;Open Site&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                  &lt;/Widget&gt;\n                  ${site.QrEnabled ? `&lt;Widget&gt;\n                    &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                    &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                    &lt;Type&gt;Button&lt;/Type&gt;\n                    &lt;Options&gt;size=2&lt;/Options&gt;\n                  &lt;/Widget&gt;`: ''}\n                &lt;/Row&gt;`\n})\n</code></pre></li> </ul> Ok, what's going above??? <p>It's alot to unpack, I know, but it's just too cool to NOT show you </p> <p>In the roomcontrolconfig\u00a0-\u00a00000-00-00T00:00:00.000.xml file we found one of our rows of sites we built out in the UI Extensions Editor</p> <p>We took a Row, which is surrounded by <code>&lt;Row&gt;[More Row Content]&lt;/Row&gt;</code> XML tags that matched our Site information</p> <p>We then declared a new rows object and looped through it using the <code>forEach()</code> ES6 JS prototype</p> <p>In this loop, we accessed the properties of each site, that was configured in the config object under the localSiteManifest Array and as the for the <code>forEach()</code> prototype did cycled through each new doc, we took the Name and URL values and injected them into the correct locations within the XML structure. </p> <p>We do this by referencing the config and making use of ES6 JS's Template Literal feature to place the data as well as leveraging ES6 JS's Conditional Operator to check if the QrEnabled value is set to true</p> <p>Each time the <code>forEach()</code> prototype loops, it takes the rows object and concatenates another row of information and will do so for each site defined in the localSiteManifest Array</p> <p></p>        Learn more about the <code>.forEach()</code> prototype         Learn more about <code>Arrays</code>        Learn more about <code>Template Literals</code>        Learn more about <code>Conditional Operators</code>        Learn more about <code>Concatenation</code> using the <code>+</code> operator  <p></p> <ul> <li>In your roomcontrolconfig\u00a0-\u00a00000-00-00T00:00:00.000.xml make the following changes</li> </ul> Remove Version Tag and ContentRemove PanelIdReplace All Site RowsView Fully Edited XML <ul> <li>This allows the Codec to assign an XML version and avoid conflicts</li> </ul> Remove ME<pre><code>&lt;Version&gt;1.11&lt;/Version&gt; \n</code></pre> <ul> <li>The PanelId is provided as apart of the Panel Save command, so having a mismatch could be problematic</li> <li>Removing this tag prevents the chance of a mismatch and allows the Codec to assign the PanelId based on the command execution</li> </ul> Remove ME<pre><code>&lt;PanelId&gt;wx1_QrDocs&lt;/PanelId&gt;\n</code></pre> <ul> <li>replace All site rows with <code>${rows}</code>, which is out object where we instantiated our new row information based on our <code>config</code> object</li> </ul> Replace ME with ${rows}<pre><code>&lt;Row&gt;\n  &lt;Name&gt;Lab 1451&lt;/Name&gt;\n  &lt;Widget&gt;\n    &lt;WidgetId&gt;wx1_QrDocs~OpenSite~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/&lt;/WidgetId&gt;\n    &lt;Name&gt;Open Site&lt;/Name&gt;\n    &lt;Type&gt;Button&lt;/Type&gt;\n    &lt;Options&gt;size=2&lt;/Options&gt;\n  &lt;/Widget&gt;\n  &lt;Widget&gt;\n    &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/&lt;/WidgetId&gt;\n    &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n    &lt;Type&gt;Button&lt;/Type&gt;\n    &lt;Options&gt;size=2&lt;/Options&gt;\n  &lt;/Widget&gt;\n&lt;/Row&gt;\n&lt;Row&gt;\n  &lt;Name&gt;Reimagine Workspaces&lt;/Name&gt;\n  &lt;Widget&gt;\n    &lt;WidgetId&gt;wx1_QrDocs~OpenSite~https://www.webex.com/us/en/workspaces.html&lt;/WidgetId&gt;\n    &lt;Name&gt;Open Site&lt;/Name&gt;\n    &lt;Type&gt;Button&lt;/Type&gt;\n    &lt;Options&gt;size=2&lt;/Options&gt;\n  &lt;/Widget&gt;\n  &lt;Widget&gt;\n    &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~https://www.webex.com/us/en/workspaces.html&lt;/WidgetId&gt;\n    &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n    &lt;Type&gt;Button&lt;/Type&gt;\n    &lt;Options&gt;size=2&lt;/Options&gt;\n  &lt;/Widget&gt;\n&lt;/Row&gt;\n</code></pre> Should look something like...<pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;Origin&gt;local&lt;/Origin&gt;\n    &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n    &lt;Icon&gt;Language&lt;/Icon&gt;\n    &lt;Color&gt;#875AE0&lt;/Color&gt;\n    &lt;Name&gt;Room Docs&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n    &lt;Page&gt;\n      &lt;Name&gt;Room Docs&lt;/Name&gt;\n      ${rows}\n      &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n      &lt;Options/&gt;\n    &lt;/Page&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre> <ul> <li> <p>Declare a new object called <code>xml</code> and assign it the value of your edited xml</p> </li> <li> <p>Structure the xAPI reference above using Macro Syntax with the following parameters and values</p> <ul> <li>PanelId: wx1_QrDocs</li> <li>body: <code>xml</code></li> </ul> </li> <li> <p>Place this xAPI call in a <code>try...catch</code> block and handle it's response and error appropriately</p> </li> <li> <p>Then run this function after it has been defined</p> </li> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> </ul> </li> </ul> </li> </ul> View <code>buildUI()</code> function <pre><code>async function buildUI() {\n  let rows = '';\n\n  config.localSiteManifest.forEach(site =&gt; {\n    console.log(`Appending [${site.Name}] Site to UI`);\n    rows = rows + `&lt;Row&gt;\n                    &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                    &lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open Site&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                    &lt;/Widget&gt;\n                    ${site.QrEnabled ? `&lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=2&lt;/Options&gt;\n                    &lt;/Widget&gt;`: ''}\n                  &lt;/Row&gt;`;\n  });\n\n  const xml = `&lt;Extensions&gt;\n                &lt;Panel&gt;\n                  &lt;Order&gt;1&lt;/Order&gt;\n                  &lt;Origin&gt;local&lt;/Origin&gt;\n                  &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n                  &lt;Icon&gt;Language&lt;/Icon&gt;\n                  &lt;Color&gt;#875AE0&lt;/Color&gt;\n                  &lt;Name&gt;Room Docs&lt;/Name&gt;\n                  &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n                  &lt;Page&gt;\n                    &lt;Name&gt;Room Docs&lt;/Name&gt;\n                    ${rows}\n                    &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n                    &lt;Options/&gt;\n                  &lt;/Page&gt;\n                &lt;/Panel&gt;\n              &lt;/Extensions&gt;`;\n\n  try {\n    const build = await xapi.Command.UserInterface.Extensions.Panel.Save({\n      PanelId: 'wx1_QrDocs'\n    }, xml);\n    console.log('UserInterface Built!', build);\n  } catch (e) {\n    const err = {\n      Context: `Failed to Build UserInterface`,\n      ...e\n    };\n    console.error(err);\n  };\n};\n</code></pre> Compare your <code>Room Docs</code> Macro <pre><code>import xapi from 'xapi';\nimport { config } from './Room Docs Configuration';\n\nconsole.log('Config:', config);\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') {\n  const encodedUrl = encodeURI(url);\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err);\n  }\n}\n\nasync function buildUI() { // &lt;-- Declare and Define your buildUI() function\n  let rows = '';  // &lt;-- declare your rows object\n\n  config.localSiteManifest.forEach(site =&gt; { // &lt;-- use forEach() to loop through the localSiteManifest Array\n    console.log(`Appending [${site.Name}] Site to UI`);\n\n    // Re-assign the value of rows with the current value of rows, plus the XML for a new row\n    //  passing in the data for each item listed in the localSiteManifest Array\n    rows = rows + `&lt;Row&gt; \n                    &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                    &lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open Site&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                    &lt;/Widget&gt;\n                    ${site.QrEnabled ? `&lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=2&lt;/Options&gt;\n                    &lt;/Widget&gt;`: ''}\n                  &lt;/Row&gt;`;\n  });\n\n  // Declare and assign the rest of the XML for your panel, and pass in the rows data\n  const xml = `&lt;Extensions&gt;\n                &lt;Panel&gt;\n                  &lt;Order&gt;1&lt;/Order&gt;\n                  &lt;Origin&gt;local&lt;/Origin&gt;\n                  &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n                  &lt;Icon&gt;Language&lt;/Icon&gt;\n                  &lt;Color&gt;#875AE0&lt;/Color&gt;\n                  &lt;Name&gt;Room Docs&lt;/Name&gt;\n                  &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n                  &lt;Page&gt;\n                    &lt;Name&gt;Room Docs&lt;/Name&gt;\n                    ${rows /* Contains all the rows from the forEach() loop*/}\n                    &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n                    &lt;Options/&gt;\n                  &lt;/Page&gt;\n                &lt;/Panel&gt;\n              &lt;/Extensions&gt;`;\n\n  try {\n    const build = await xapi.Command.UserInterface.Extensions.Panel.Save({ // structure xCommand UserInterface Extensions Panel Save\n      PanelId: 'wx1_QrDocs'\n    }, xml);\n    console.log('UserInterface Built!', build); // Log it's repsonse\n  } catch (e) {\n    const err = {\n      Context: `Failed to Build UserInterface`,\n      ...e\n    };\n    console.error(err); // Catch and log it's error\n  };\n};\n\nbuildUI();  //&lt;-- Run the buildUI() function at the top level of your Macro\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console Time App Logs HH:MM:SS Room Docs QJS Ready HH:MM:SS Room Docs Config: {\"manifestVisibility\":\"localOnly\",\"remoteSiteManifest\":\"\",\"localSiteManifest\":[{\"Name\":\"Lab 1451\",\"Url\":\"https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/\",\"QrEnabled\":true},{\"Name\":\"Reimagine Workspaces\",\"Url\":\"https://www.webex.com/us/en/workspaces.html\",\"QrEnabled\":true},{\"Name\":\"Cisco\",\"Url\":\"https://www.cisco.com\",\"QrEnabled\":true}]} HH:MM:SS Room Docs Appending [Lab 1451] Site to UI HH:MM:SS Room Docs Appending [Reimagine Workspaces] Site to UI HH:MM:SS Room Docs Appending [Cisco] Site to UI HH:MM:SS Room Docs UserInterface Built! HH:MM:SS Room Docs Site Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] HH:MM:SS Room Docs QR Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] {\"status\":\"OK\"} https://api.qrserver.com/v1/create-qr-code/?data=https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/ HH:MM:SS Room Docs Site Webview Opened for: [https://www.webex.com/us/en/workspaces.html] HH:MM:SS Room Docs QR Webview Opened for: [https://www.webex.com/us/en/workspaces.html] {\"status\":\"OK\"} https://api.qrserver.com/v1/create-qr-code/?data=https://www.webex.com/us/en/workspaces.html Lesson: Add a new Site to the Config <sub>(rxe-m2.2.3)</sub> <p>Note</p> <p>To check our work, let's expand our <code>localSiteManifest</code> to include 2 new sites</p> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task: </p> <ul> <li>Select the Room Docs Configuration Macro and perform the next few tasks in this Macro</li> <li> <p>Under the <code>localSiteManifest</code> Array add the following 2 sites and additional Properties following the same JSON format as the other sites</p> <ul> <li>Site 1<ul> <li>Name: Cisco</li> <li>Url: https://www.cisco.com</li> <li>QrEnabled: false</li> </ul> </li> <li>Set 2 [Add Your Organizations Home Page]<ul> <li>Name: Your Org Name</li> <li>Url: Your Org Site</li> <li>QrEnabled: true</li> </ul> </li> </ul> </li> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li>Monitor the Device OSD and Macro Console Output</li> </ul> </li> </ul> Compare your <code>Room Docs</code> Panel UI <p></p> Local Panel UI <p></p> Compare your Room Docs Configuration Macro <pre><code>// EDIT MANIFEST URL HERE\nconst config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: 'https://raw.githubusercontent.com/WebexCC-SA/LAB-1451/refs/heads/main/docs/assets/downloadable_resources/3-4-3_remoteManifest.json',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: 'https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/',\n      QrEnabled: true\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: 'https://www.webex.com/us/en/workspaces.html',\n      QrEnabled: true\n    },\n    {\n      Name: 'Cisco',                // &lt;-- Cisco Homepage Added\n      Url: 'https://www.cisco.com',\n      QrEnabled: true\n    },\n    // Your Org Details Below Here\n  ]\n};\n\nexport { config };\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_exercises/macros/rxp_exe_Quick_Docs_PT2/#centralize-your-document-list-rxe-m23","title":"Centralize your Document List <sub>(rxe-m2.3)</sub>","text":"<p>Abstract</p> <p>Now that we have an interface that can build itself with small changes to a config file, let's make this a bit easier for our content creators and ourselves to manage</p> <p>We can do this by leveraging the Codec's HTTPClient xAPIs to reach out to a single endpoint over HTTP that's hosting all of our document references and pull it down into the Codec before running the buildUI() function</p> <p>Note</p> <p>This lab is hosting a file called <code>QuickDocs_remoteManifest.json</code> on GitHub which contains 6 additional sites pre-configured in the same format as the local sites configured on the endpoint</p> <p>   Review the Remote Manifest File  </p> Lesson: Add a Remote Site URL to your <code>config</code> object <sub>(rxe-m2.3.1)</sub> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li>Select the Room Docs Configuration macro</li> <li>Edit the <code>remoteSiteManifest</code> object and assign the following url as a string     <ul> <li>https://raw.githubusercontent.com/WebexCC-SA/LAB-1451/refs/heads/main/docs/assets/downloadable_resources/3-4-3_remoteManifest.json</li> </ul> </li> <li>Once complete, Save, keep this macro Inactive</li> </ul> </li> </ul> Compare your Room Docs Configuration Macro <pre><code>// EDIT MANIFEST URL HERE\nconst config = {\n  manifestVisibility: 'merge', // localOnly, remoteOnly, merge\n  remoteSiteManifest: 'https://raw.githubusercontent.com/WebexCC-SA/LAB-1451/refs/heads/main/docs/assets/downloadable_resources/3-4-3_remoteManifest.json',\n  localSiteManifest: [\n    {\n      Name: 'Lab 1451',\n      Url: 'https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/',\n      QrEnabled: true\n    },\n    {\n      Name: 'Reimagine Workspaces',\n      Url: 'https://www.webex.com/us/en/workspaces.html',\n      QrEnabled: true\n    },\n    {\n      Name: 'Cisco',\n      Url: 'https://www.cisco.com',\n      QrEnabled: true\n    }\n  ]\n};\n\nexport { config };\n</code></pre> Lesson: Declare a <code>getRemoteSiteManifest()</code> function <sub>(rxe-m2.3.2)</sub> <p>Note</p> <p>Here, we'll be making an HTTP Get request using the HTTPClient xAPI stack to reach out and pull information from a site external to the codec</p> Always Keep Security Top of Mind! <p>It's easy to fall outside your organization's security policy especially when building new solutions. Make sure you work with your, or your Customer's, Information Security teams before implementing a new solution that requires Integration Authentication of any kind or reaches out on the internet. The security implications of a solution can force you building your solution using a different integration method, or even stop a project all together. </p>        Checkout Webex's  Security Technical References  <p></p> <ul> <li> <p>xAPI: xCommand HTTPClient Get</p> </li> <li> <p>Task:</p> <ul> <li> <p>Select the Room Docs macro</p> </li> <li> <p>Declare a new async function called getRemoteSiteManifest with no parameters</p> </li> <li> <p>Within this function:</p> <ul> <li>Declare a <code>request</code> object with a value of <code>''</code> (Yes, no value assigned)</li> <li>Declare a <code>remoteData</code> object with a value of <code>[]</code> (Yes, no value assigned)            </li> <li>Within a <code>try...catch</code> block, structure the xAPI path above in Macro Syntax with the following parameters and assign this to the <code>request</code> object</li> <li>Use the JSON.parse() method on the <code>request.Body</code> (the response captured in the <code>request</code> object) and assign this to the <code>remoteData</code> object<ul> <li>JSON.parse() allows us to later handler the data from the external site as if it were a JSON object, not a string</li> </ul> </li> <li>Use console.debug to log the <code>remoteData</code> object</li> <li>Return the <code>remoteData</code> object</li> <li>Catch and log any errors</li> </ul> <p>Click the Tabs below to see each step outlined above</p> Declare Function and ObjectsAssign Request with xAPIParse Response and ReturnCatch and Log Errors (Full Func) <pre><code>async function getRemoteSiteManifest() {\n  let request = ''; // &lt;-- Declare request object\n  let remoteData = []; // &lt;-- Declare remoteData object\n\n}\n</code></pre> <pre><code>async function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try { // &lt;-- Setup try...catch block\n    request = await xapi.Command.HttpClient.Get({ // &lt;-- Assign xCommand HTTPClient Get\n      Url: config.remoteSiteManifest // &lt;-- Assign remoteManifest URL from the config\n    })\n\n  } catch (e) {\n\n  }\n}\n</code></pre> <pre><code>async function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try {\n    request = await xapi.Command.HttpClient.Get({\n      Url: config.remoteSiteManifest\n    })\n    remoteData = JSON.parse(request.Body); // &lt;-- Use JSON.parse to process the request.Body\n    console.debug(`Remote Site Manifest Found`, remoteData); // &lt;-- log the response to the debug console\n    return remoteData // &lt;-- return the remote site data\n  } catch (e) {\n\n  }\n}\n</code></pre> <pre><code>async function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try {\n    request = await xapi.Command.HttpClient.Get({\n      Url: config.remoteSiteManifest\n    })\n    remoteData = JSON.parse(request.Body);\n    console.debug(`Remote Site Manifest Found`, remoteData);\n    return remoteData\n  } catch (e) { // &lt;-- Handle the possible Error\n    const err = {\n      Context: 'Failed to Get remote site manifest', // &lt;-- Leave yourself clues to troubleshoot\n      ...e\n    }\n    console.error(err); // &lt;-- Log the error\n  }\n}\n</code></pre> <ul> <li>Once complete, Save and Activate the Room Docs Macro (if inactive)</li> </ul> </li> </ul> </li> </ul> Lesson: Integrate the <code>getRemoteSiteManifest()</code> function into the <code>buildUI()</code> function <sub>(rxe-m2.3.3)</sub> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand HTTPClient Get</li> <li>xCommand UserInterface Extensions Panel Save</li> </ul> </li> <li> <p>Task:</p> <ul> <li>Select the Room Docs macro</li> <li> <ul> <li>Below the <code>let rows</code> declaration and above the <code>config.localSiteManifest.forEach(...)</code> loop, start a <code>switch</code> statement</li> <li>We'll switch based on the <code>config</code> object's manifestVisibility value. This can be 1 of 3 values and should apply the following behaviors<ul> <li>localOnly: The UI will only build sites that are found locally in the Codec's Room Docs Configuration macro</li> <li>remoteOnly: The UI will only build sites that are configured in our remoteSiteManifest Url</li> <li>merge: The UI will combine local and remote sites into the UI</li> <li>if the remoteSiteManifest Url is missing, you should ignore these values</li> </ul> </li> </ul> <p>Edit the <code>buildUI()</code> function</p> <p>Copy the Switch Statement below into your buildUI() function</p> <pre><code>switch (config.manifestVisibility) {\n  case 'remoteOnly':\n    if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) { // &lt;-- Check to see if the ==remoteSiteManifest== Url is configured\n      config.localSiteManifest = await getRemoteSiteManifest(); // &lt;-- overwrite configured localSiteManifest with the remoteSiteManifest\n    }\n    break;\n  case 'merge':\n    if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) { // &lt;-- Check to see if the ==remoteSiteManifest== Url is configured\n      config.localSiteManifest = [...config.localSiteManifest, ...await getRemoteSiteManifest()] // &lt;-- overwrite configured localSiteManifest with a new Array, using both the current localSiteManifest and the remoteSiteManifest\n    }\n    break;\n  case 'localOnly':\n    // No Action Required\n    break;\n  default:\n    console.warn(`Unknown manifestVisibility assignment: [${config.manifestVisibility}]`) // &lt;-- Log unknown manifestVisibility values to the console\n    break;\n}\n</code></pre> </li> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> <li>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</li> <li>Monitor the Macro Console Output</li> </ul> </li> </ul> Compare your <code>Room Docs</code> Panel UI <ul> <li>Remote Sites are marked with a <code>\ud83d\udd17</code> emoji for clarity</li> </ul> <p></p> Remote and Local Panel UI <p></p> Compare your <code>Room Docs</code> Macro <pre><code>import xapi from 'xapi';\nimport { config } from './Room Docs Configuration';\n\nconsole.log('Config:', config);\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') {\n  const encodedUrl = encodeURI(url);\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err);\n  }\n}\n\nasync function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try {\n    request = await xapi.Command.HttpClient.Get({\n      Url: config.remoteSiteManifest\n    })\n    remoteData = JSON.parse(request.Body);\n    console.debug(`Remote Site Manifest Found`, remoteData);\n    return remoteData\n  } catch (e) {\n    const err = {\n      Context: 'Failed to Get remote site manifest',\n      ...e\n    }\n    console.error(err);\n  }\n}\n\nasync function buildUI() {\n  let rows = '';\n\n  switch (config.manifestVisibility) {\n    case 'remoteOnly':\n      if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) {\n        config.localSiteManifest = await getRemoteSiteManifest();\n      }\n      break;\n    case 'merge':\n      if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) {\n        config.localSiteManifest = [...config.localSiteManifest, ...await getRemoteSiteManifest()]\n      }\n      break;\n    case 'localOnly':\n      // No Action Required\n      break;\n    default:\n      console.warn(`Unknown manifestVisibility assignment: [${config.manifestVisibility}]`)\n      break;\n  }\n\n  config.localSiteManifest.forEach(site =&gt; {\n    console.log(`Appending [${site.Name}] Site to UI`);\n\n    rows = rows + `&lt;Row&gt; \n                    &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                    &lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open Site&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                    &lt;/Widget&gt;\n                    ${site.QrEnabled ? `&lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=2&lt;/Options&gt;\n                    &lt;/Widget&gt;`: ''}\n                  &lt;/Row&gt;`;\n  });\n\n  const xml = `&lt;Extensions&gt;\n                &lt;Panel&gt;\n                  &lt;Order&gt;1&lt;/Order&gt;\n                  &lt;Origin&gt;local&lt;/Origin&gt;\n                  &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n                  &lt;Icon&gt;Language&lt;/Icon&gt;\n                  &lt;Color&gt;#875AE0&lt;/Color&gt;\n                  &lt;Name&gt;Room Docs&lt;/Name&gt;\n                  &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n                  &lt;Page&gt;\n                    &lt;Name&gt;Room Docs&lt;/Name&gt;\n                    ${rows}\n                    &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n                    &lt;Options/&gt;\n                  &lt;/Page&gt;\n                &lt;/Panel&gt;\n              &lt;/Extensions&gt;`;\n\n  try {\n    const build = await xapi.Command.UserInterface.Extensions.Panel.Save({\n      PanelId: 'wx1_QrDocs'\n    }, xml);\n    console.log('UserInterface Built!', build);\n  } catch (e) {\n    const err = {\n      Context: `Failed to Build UserInterface`,\n      ...e\n    };\n    console.error(err);\n  };\n};\n\nbuildUI();\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n</code></pre> Compare your Macro Console <p> | Time       | Macro      | Log                                                                                                                                                        | |------------|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------| | 23:50:16   | Room Docs  | QJS Ready                                                                                                                                                  | | 23:50:16   | Room Docs  | Config: {\"manifestVisibility\":\"merge\",\"remoteSiteManifest\":\"https://raw.githubusercontent.com/WebexCC-SA/LAB-1451/refs/heads/main/docs/assets/downloadable_resources/3-4-3_remoteManifest.json\",\"localSiteManifest\":[{\"Name\":\"Lab 1451\",\"Url\":\"https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/\",\"QrEnabled\":true},{\"Name\":\"Reimagine Workspaces\",\"Url\":\"https://www.webex.com/us/en/workspaces.html\",\"QrEnabled\":true},{\"Name\":\"Cisco\",\"Url\":\"https://www.cisco.com\",\"QrEnabled\":true}]} | | 23:50:16   | Room Docs  | Appending [Lab 1451] Site to UI                                                                                                                          | | 23:50:16   | Room Docs  | Appending [Reimagine Workspaces] Site to UI                                                                                                              | | 23:50:16   | Room Docs  | Appending [Cisco] Site to UI                                                                                                                              | | 23:50:16   | Room Docs  | Appending [Room Kit EQX \ud83d\udd17] Site to UI                                                                                                                  | | 23:50:16   | Room Docs  | Appending [WebexOne \ud83d\udd17] Site to UI                                                                                                                        | | 23:50:16   | Room Docs  | Appending [RoomOS xAPI References \ud83d\udd17] Site to UI                                                                                                          | | 23:50:16   | Room Docs  | Appending [Crossview Room Pre Guidelines \ud83d\udd17] Site to UI                                                                                                   | | 23:50:16   | Room Docs  | Appending [Using Extra LoudSpeakers \ud83d\udd17] Site to UI                                                                                                        | | 23:50:16   | Room Docs  | Appending [Webex AI Codec \ud83d\udd17] Site to UI                                                                                                                  | | 23:50:16   | Room Docs  | UserInterface Built! {\"status\":\"OK\"}                                                                                                                     | | 23:50:31   | Room Docs  | Site Webview Opened for: [https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_3/] {\"status\":\"OK\"}                                                    | | 23:50:50   | Room Docs  | QR Webview Opened for: [https://www.cisco.com] {\"status\":\"OK\"} https://api.qrserver.com/v1/create-qr-code/?data=https://www.cisco.com                 | | 23:50:54   | Room Docs  | Site Webview Opened for: [https://roomos.cisco.com/xapi] {\"status\":\"OK\"}                                                                                | | 23:51:02   | Room Docs  | QR Webview Opened for: [https://www.cisco.com/c/dam/en/us/td/docs/telepresence/endpoint/ce97/extra-loudspeakers-local-reinforcement-guide-ce97.pdf] {\"status\":\"OK\"} https://api.qrserver.com/v1/create-qr-code/?data=https://www.cisco.com/c/dam/en/us/td/docs/telepresence/endpoint/ce97/extra-loudspeakers-local-reinforcement-guide-ce97.pdf | | 23:51:04   | Room Docs  | Site Webview Opened for: [https://blog.webex.com/collaboration/hybrid-work/next-level-audio-with-webex-ai-codec/] {\"status\":\"OK\"}                     |</p> Lesson: Refresh you UI More Frequently <sub>(rxe-m2.3.3)</sub> <p>With the external manifest file now being fetched and integrated into our UserInterface, we've introduced a new problem. Now we have a hard coded manifest, which will always refresh when we save over the Room Docs Configuration macro, but will only update the external manifest when the Macro Runtime Restarts</p> <p>The Macro Runtime is what processes and executes the code we provide. It's what makes all of this come to life and it only restarts when</p> <ul> <li>The RoomOS Device Restarts</li> <li>The Runtime is restarted or activated via the RoomOS xAPI</li> <li>Or by toggling Macros either on the Device Web UI or through Control Hub</li> </ul> <p>Where as this can happen less frequently, we'll need to add in some logic to request that manifest more frequently.</p> <p>For our case, subscribing to the Panel Clicked event and re-running our <code>buildUI()</code> function should do fine.</p> <ul> <li> <p>xAPI: xEvent UserInterface Extensions Panel Clicked</p> </li> <li> <p>Task:</p> <ul> <li> <p>Subscribe the xAPI Path above using Macro Syntax</p> </li> <li> <p>Take the Callback information generated by this event, and log it to the Macro Console using <code>console.log()</code></p> </li> <li> <p>Use and <code>if</code> statement to listen for when our PanelId wx1_QrDocs</p> </li> <li> <p>When this resolves true, re-run the <code>buildUI()</code> function</p> </li> <li> <p>Else, do nothing</p> </li> <li> <p>Once complete, Save and Activate the macro (if inactive)</p> </li> <li> <p>Press the Room Docs and Monitor the Macro Console Output. You should see the same output as in Lesson rxe-m2.3.2</p> </li> </ul> </li> </ul> View a successful Panel Clicked Subscription <pre><code>xapi.Event.UserInterface.Extensions.Panel.Clicked.on(({ PanelId}) =&gt; {\n  console.log({ PanelId});\n  if (PanelId == 'wx1_QrDocs') {\n    buildUI();\n  };\n});\n</code></pre> Compare your Macro Compare your <code>Room Docs</code> Macro <pre><code>import xapi from 'xapi';\nimport { config } from './Room Docs Configuration';\n\nconsole.log('Config:', config);\n\nasync function openSite(url, target = 'OSD') {\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: url,\n      Target: target\n    })\n    console.log(`Site Webview Opened for: [${url}]`, openPage);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open Site WebView to: [${url}]`,\n      ...e\n    };\n    throw new Error(err);\n  }\n}\n\nasync function openQrCode(url, target = 'OSD') {\n  const encodedUrl = encodeURI(url);\n  const qrURL = `https://api.qrserver.com/v1/create-qr-code/?data=` + encodedUrl;\n  try {\n    const openPage = await xapi.Command.UserInterface.WebView.Display({\n      Url: qrURL,\n      Target: target\n    })\n    console.log(`QR Webview Opened for: [${url}]`, openPage, qrURL);\n  } catch (e) {\n    const err = {\n      Context: `Failed to open QR WebView to: [${url}]`,\n      QrUrl: qrURL,\n      ...e\n    };\n    console.error(err);\n  }\n}\n\nasync function getRemoteSiteManifest() {\n  let request = '';\n  let remoteData = [];\n\n  try {\n    request = await xapi.Command.HttpClient.Get({\n      Url: config.remoteSiteManifest\n    })\n    remoteData = JSON.parse(request.Body);\n    console.debug(`Remote Site Manifest Found`, remoteData);\n    return remoteData\n  } catch (e) {\n    const err = {\n      Context: 'Failed to Get remote site manifest',\n      ...e\n    }\n    console.error(err);\n  }\n}\n\nasync function buildUI() {\n  let rows = '';\n\n  switch (config.manifestVisibility) {\n    case 'remoteOnly':\n      if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) {\n        config.localSiteManifest = await getRemoteSiteManifest();\n      }\n      break;\n    case 'merge':\n      if (config.remoteSiteManifest != '' &amp;&amp; config.remoteSiteManifest != undefined) {\n        config.localSiteManifest = [...config.localSiteManifest, ...await getRemoteSiteManifest()]\n      }\n      break;\n    case 'localOnly':\n      // No Action Required\n      break;\n    default:\n      console.warn(`Unknown manifestVisibility assignment: [${config.manifestVisibility}]`)\n      break;\n  }\n\n  config.localSiteManifest.forEach(site =&gt; {\n    console.log(`Appending [${site.Name}] Site to UI`);\n\n    rows = rows + `&lt;Row&gt; \n                    &lt;Name&gt;${site.Name}&lt;/Name&gt;\n                    &lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenSite~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open Site&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=${site.QrEnabled ? 2 : 4}&lt;/Options&gt;\n                    &lt;/Widget&gt;\n                    ${site.QrEnabled ? `&lt;Widget&gt;\n                      &lt;WidgetId&gt;wx1_QrDocs~OpenQrCode~${site.Url}&lt;/WidgetId&gt;\n                      &lt;Name&gt;Open QrCode \ud83d\udd33&lt;/Name&gt;\n                      &lt;Type&gt;Button&lt;/Type&gt;\n                      &lt;Options&gt;size=2&lt;/Options&gt;\n                    &lt;/Widget&gt;`: ''}\n                  &lt;/Row&gt;`;\n  });\n\n  const xml = `&lt;Extensions&gt;\n                &lt;Panel&gt;\n                  &lt;Order&gt;1&lt;/Order&gt;\n                  &lt;Origin&gt;local&lt;/Origin&gt;\n                  &lt;Location&gt;HomeScreenAndCallControls&lt;/Location&gt;\n                  &lt;Icon&gt;Language&lt;/Icon&gt;\n                  &lt;Color&gt;#875AE0&lt;/Color&gt;\n                  &lt;Name&gt;Room Docs&lt;/Name&gt;\n                  &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n                  &lt;Page&gt;\n                    &lt;Name&gt;Room Docs&lt;/Name&gt;\n                    ${rows}\n                    &lt;PageId&gt;wx1_QrDocs~RoomDocs&lt;/PageId&gt;\n                    &lt;Options/&gt;\n                  &lt;/Page&gt;\n                &lt;/Panel&gt;\n              &lt;/Extensions&gt;`;\n\n  try {\n    const build = await xapi.Command.UserInterface.Extensions.Panel.Save({\n      PanelId: 'wx1_QrDocs'\n    }, xml);\n    console.log('UserInterface Built!', build);\n  } catch (e) {\n    const err = {\n      Context: `Failed to Build UserInterface`,\n      ...e\n    };\n    console.error(err);\n  };\n};\n\nbuildUI();\n\nxapi.Event.UserInterface.Extensions.Widget.Action.on(({ WidgetId, Type, Value }) =&gt; {\n  console.debug({ WidgetId, Type, Value });\n  if (WidgetId.includes(`wx1_QrDocs`)) {\n    if (Type == 'released') {\n      const [app, action, url] = WidgetId.split(`~`);\n\n      switch (action) {\n        case 'OpenSite':\n          openSite(url);\n          break;\n        case 'OpenQrCode':\n          openQrCode(url);\n          break;\n        default:\n          console.error(`Unknown Action Fired: [${action}]`);\n          break;\n      };\n    };\n  };\n});\n\nxapi.Event.UserInterface.Extensions.Panel.Clicked.on(({ PanelId}) =&gt; {\n  console.log({ PanelId});\n  if (PanelId == 'wx1_QrDocs') {\n    buildUI();\n  };\n});\n</code></pre> Lesson: Adjust the <code>manifestVisibility</code> value in the <code>config</code> object <sub>(rxe-m2.3.4)</sub> <p>Info</p> <p>Last, but certainly not least, is a demonstration that shows what the <code>manifestVisibility</code> value can affect when changed</p> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task:</p> <ul> <li>Select the Room Docs Configuration macro</li> <li> <p>Change the value of <code>manifestVisibility</code> to 1 of the 3 values below</p> <ul> <li>localOnly</li> <li>remoteOnly</li> <li>merge</li> </ul> </li> <li> <p>Once complete, Save and Activate the Room Docs Macro (if inactive)</p> </li> <li> <p>Start pressing the Open Site and Open QrCode \ud83d\udd33 buttons contained within your <code>Room Docs</code> panel</p> </li> <li> <p>Repeat for each <code>manifestVisibility</code> Value</p> </li> </ul> <p>Click the tabs below to see the differences of each <code>manifestVisibility</code> Value</p> localOnlyremoteOnlymerge Syntax<pre><code>manifestVisibility: 'localOnly',\n</code></pre> <p></p> Local Panel UI <p></p> Syntax<pre><code>manifestVisibility: 'remoteOnly',\n</code></pre> <p></p> Remote Panel UI <p></p> Syntax<pre><code>manifestVisibility: 'merge',\n</code></pre> <p></p> Remote and Local Panel UI <p></p> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_extensions/","title":"Extensions <sup><sup>rxu-2</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_extensions/#extensions-section-rxu-2","title":"Extensions <sub>(section rxu-2)</sub>","text":""},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_extensions/#navigating-the-ui-extensions-editor-rxu-21","title":"Navigating the UI Extensions Editor <sub>(rxu-2.1)</sub>","text":"<p>Access the UI Extensions Editor</p> <p>The UI extensions Editor is built into the Devices WebUI</p> <p>Use the steps below the access the WebUI of the RoomOS Device and navigate to the UI Extensions Editor</p> Device LoginDevice HomeUI Extensions EditorAdding a PanelAdding WidgetsEdit Text ElementsAdd/Delete Rows and Pages <ul> <li>Open a Browser and enter your Codec's IP as a URL and hit enter     <pre><code>https://[ROOMOS_IP_ADDRESS]/web</code></pre> </li> <li>Login with your Username and Password<ul> <li>User: [ROOMOS_USERNAME]</li> <li>Pass: [ROOMOS_PASSWORD]</li> </ul> </li> </ul> <p></p> Device Login Page <p></p> <ul> <li>Select the UI Extensions Editor on the Left-Hand Navigation Bar</li> </ul> <p></p> Device Home Page <p></p> <p>Here is a high level breakdown of all the elements found here</p> <p></p> UI Extensions Editor <p></p> <p>Always Assign Unique PanelIds</p> <p>You may not be the only developer. Assigning PanelIds unique to your solution helps limit conflicts with other solutions.</p> <p>How to Add a Panel</p> <p></p> Adding a new Panel <p></p> <p>Info</p> <ul> <li>Panels<ul> <li>Creates a Panel with pages and rows within, containing widgets</li> </ul> </li> <li>Action Buttons<ul> <li>Creates a panel</li> </ul> </li> <li>Web Widgets<ul> <li>Creates a Web Widget on your OSD</li> </ul> </li> <li>Web Apps<ul> <li>Creates a Panel, that when <code>clicked</code>, opens a URL to a target Web Page</li> </ul> </li> </ul> <p>Always Assign Unique WidgetIds</p> <p>You may not be the only developer. Assigning WidgetIds unique to your solution helps limit conflicts with other solutions.</p> <p>How to Add Widgets</p> <p></p> Adding bew Widgets <p></p> <p>Each widget can produce unique events, click on each widget below and learn more</p> ToggleSliderButtonGroupButtonIcon ButtonSpinnerTextBoxDirectional PadSpacer <p>Gif</p> <p></p> Toggle Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>changed</code> Value <code>on</code> or <code>off</code> <p>Gif</p> <p></p> Slider Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>changed</code> Value <code>Integer between 0 and 255</code> <p>Gif</p> <p></p> Button Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value N/A <p>Gif</p> <p></p> Group Button Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code> Value <code>Assigned by the Developer on Widget Instantiation</code> <p>Gif</p> <p></p> Icon Button Icons <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value N/A <p>Gif</p> <p></p> Spinner Icons <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value <code>increment</code> or <code>decrement</code> <p>Does not fire events</p> <p>Gif</p> <p></p> Directional Pad Action <p></p> Key Value WidgetId <code>Assigned by the Developer on Widget Instantiation</code> Type <code>pressed</code>, <code>released</code>, or <code>clicked</code> Value <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, <code>center</code> <p>Does not fire events</p> <p>Tip</p> <p>Some text elements have limited space, but you won't see an error</p> <p>Make sure the Text Renders correctly on your device after you apply it</p> <p>Gif</p> <p></p> Editing Text Elements <p></p> <p>Info</p> <ul> <li>Double clicking on any text element allows you to edit the filed</li> <li>Change the Text as you need it, then press enter</li> </ul> <p>Tip</p> <p>Keep in mind more is not always better. Try to keep things simple</p> <p>Gif</p> <p></p> Adding a new Panel <p></p> <p>Info</p> <ul> <li>You can add as many rows and pages as your solution needs</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_extensions/#build-a-panel-rxu-22","title":"Build a Panel! <sub>(rxu-2.2)</sub>","text":"<p>No lessons here, just take a few moments to explore the various pieces of the UI Extensions Editor</p> <p>Build a Panel, add some widgets, build something you'd like to see on RoomOS Devices or would like to build after this Lab</p>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_features/","title":"Features <sup><sup>rxu-1</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_features/#features-section-rxu-1","title":"Features <sub>(section rxu-1)</sub>","text":"<p>Features are UI elements that come as apart of RoomOS</p> <p>Not all can be manipulated, but many can be, though it is limited in scope but vast in quantity. With that, we'll only review a few here</p> <p>Important</p> <p>In the next few lessons, you'll again use SSH to explore these interfaces</p> <p>If you haven't completed RoomOS xAPI &gt; SSH <sup>(rxp-1)</sup>, please review that material before moving on, or jump to the next section</p> Lesson: Hide a few things <sub>(rxu-1.1)</sub> <ul> <li> <p>xAPI: xConfiguration UserInterface Features Call Start</p> </li> <li> <p>Task:</p> <ul> <li>First, take a mental note of the UI elements on your Devices HomeScreen, then run this Config change</li> </ul> Type into terminal and press Enter<pre><code>xConfiguration UserInterface Features Call Start: Hidden\n</code></pre> <ul> <li>The Call button should be hidden, now run the following</li> </ul> Type into terminal and press Enter<pre><code>xConfiguration UserInterface Features Whiteboard Start: Hidden\nxConfiguration UserInterface Features Call JoinZoom: Hidden\nxConfiguration UserInterface Features Call JoinGoogleMeet: Hidden\nxConfiguration UserInterface Features Call JoinMicrosoftTeamsCVI: Hidden\nxConfiguration UserInterface Features Call JoinMicrosoftTeamsDirectGuestJoin: Hidden\n</code></pre> <ul> <li> <p>Now Webex should be the only user accessible call option</p> </li> <li> <p>This demonstrate not only how you could simplify the # of choices for you used, but whereas these are all accessible be the RoomOS xAPI, you could automate these flows for any use case you can dream of</p> </li> <li> <p>Let's be a bit fair to our calling cousins and bring them back</p> </li> </ul> Type into terminal and press Enter<pre><code>xConfiguration UserInterface Features Call Start: Auto\nxConfiguration UserInterface Features Whiteboard Start: Auto\nxConfiguration UserInterface Features Call JoinZoom: Auto\nxConfiguration UserInterface Features Call JoinGoogleMeet: Auto\nxConfiguration UserInterface Features Call JoinMicrosoftTeamsCVI: Auto\nxConfiguration UserInterface Features Call JoinMicrosoftTeamsDirectGuestJoin: Auto\n</code></pre> </li> </ul> Lesson: Hide everything <sub>(rxu-1.2)</sub> <ul> <li> <p>xAPI: xConfiguration UserInterface Features Call Start</p> </li> <li> <p>Task:</p> <ul> <li>First, take a mental note of the UI elements on your Devices HomeScreen, then run this Config change</li> </ul> Type into terminal and press Enter<pre><code>xConfiguration UserInterface Features HideAll: True\n</code></pre> <ul> <li>Now all RoomOS homescreen buttons should have disappeared</li> <li>And let's bring them back</li> </ul> Type into terminal and press Enter<pre><code>xConfiguration UserInterface Features HideAll: False\n</code></pre> </li> </ul> <p>Something to note, we only have the capacity to hide RoomOS features, we can't change their position on the OSD/Controller</p> <p>To learn more of the available features you can manipulate, click the link below</p> <p>UserInterface Features</p>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_intro/","title":"What are RoomOS UserInterfaces","text":""},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_intro/#what-are-roomos-userinterfaces","title":"What are RoomOS UserInterfaces","text":"<p>In regards to the RoomOS xAPI, RoomOS UserInterfaces are interfaces you can offer to the user whether they be built in an apart of RoomOS software or custom interfaces you can bubble up using the RoomOS xAPI</p> <p>In this section, we'll be focusing on 4 of the major branches of the the UserInterface node in the xAPI, and those are</p>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_intro/#features","title":"Features","text":"Room Navigator HomeScreen (RoomOS 11) <ul> <li><pre><code>x[Path] UserInterface Features...</code></pre></li> <li>The Features path governs mainly the visibility of built-in RoomOS interfaces. Such as the Call button, any of the Platform Buttons, Settings Menu Access and more</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_intro/#extensions","title":"Extensions","text":"UI Extensions Editor <ul> <li><pre><code>x[Path] UserInterface Extensions...</code></pre></li> <li>The Extensions path enables you to create new interfaces, whether they be panels, pages, or widgets, and subscribe to their associated events</li> <li>Extensions are built using XML and can either be assembled using the xAPI or the UI Extensions Editor, located on the WebUI of the Codec</li> <li>These enable you a surface to offer to your users and build our all new solutions</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_intro/#messages","title":"Messages","text":"All Message Interfaces and Locations <ul> <li><pre><code>x[Path] UserInterface Messages...</code></pre></li> <li>The Messages Branch offers OSD and Touch Controller messaging, offering new interfaces that are akin to extensions.</li> <li>They can offer you alerts, text input prompts, ratings interfaces a a few others</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_intro/#webcontent","title":"WebContent","text":"Various WebContent Examples <ul> <li>There isn't a \"WebContent\" branch in our API, but it's still a very important topic to touch upon</li> <li>WebContent exists in many forms in RoomOS such as Web Apps or WebViews and they are all driven by the WebEngine built into RoomOS</li> <li>The Web Engine is built upon the QT WebEngine and it allows you to pull in Web Based content such as a YouTube video or something custom you've built</li> <li>Some of the xAPI is readily available for Booking solutions, though more robust integrations would rely on our NodeJS JSXAPI Module</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_messages/","title":"Messages <sup><sup>rxu-3</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_messages/#messages-section-rxu-3","title":"Messages <sub>(section rxu-3)</sub>","text":"<p>Messages are one of those uniques interfaces that are ONLY accessible by leveraging the RoomOS xAPI</p> <p>Important</p> <p>In the next few lessons, you'll again use SSH to explore these interfaces</p> <p>If you haven't completed RoomOS xAPI &gt; SSH <sup>(rxp-1)</sup>, please review that material before moving on, or jump to the next section</p> Lesson: Prompt Display <sub>(rxu-3.1)</sub> <ul> <li> <p>xAPI: xCommand UserInterface Message Prompt Display</p> </li> <li> <p>Task:</p> <ul> <li>First, setup a Prompt Subscription, this will let us see all the Prompt Events coming into the device</li> <li>Keep on your terminal window for any events that fire</li> </ul> Type into terminal and press Enter<pre><code>xFeedback Register Event/UserInterface/Message/Prompt\n</code></pre> <ul> <li>Now issue your First Prompt</li> </ul> Type into terminal and press Enter<pre><code>xCommand UserInterface Message Prompt Display Duration: 10 FeedbackId: xyz \"Option.1\": 1 \"Option.2\": 2 \"Option.3\": 3 \"Option.4\": 4 \"Option.5\": 5 Text: World Title: Hello\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see a prompt with 5 options, a title, text and will disappear after 10 seconds</li> </ul> Type into terminal and press Enter<pre><code>xCommand UserInterface Message Prompt Display FeedbackId: xyz \"Option.1\": \"It's the best\" \"Option.2\": Yes Text: \"Let us know about this Lab\" Title: \"How's the Lab?\"\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should now see a slightly different Prompt, with less options and the prompt won't dismiss on it's own</li> <li>Prompts can have up to 5 options, but not all are required</li> <li> <p>To dismiss, tap any option below ot outside the prompt and it will close</p> </li> <li> <p>Alternatively you can close a prompt by running <code>xCommand UserInterface Message Prompt Clear</code></p> </li> <li> <p>Finish off this task deregistering your Subscription</p> </li> </ul> Type into terminal and press Enter<pre><code>xFeedback DeregisterAll\n</code></pre> <p>Learn more about Prompts</p> <p>UserInterface Message Prompt</p> </li> </ul> Lesson: Alert Display <sub>(rxu-3.2)</sub> <ul> <li> <p>xAPI: xCommand UserInterface Message Alert Display</p> </li> <li> <p>Task:</p> <ul> <li>First, setup a Alert Subscription, this will let us see all the Alert Events coming into the device</li> <li>Keep on your terminal window for any events that fire</li> </ul> Type into terminal and press Enter<pre><code>xFeedback Register Event/UserInterface/Message/Alert\n</code></pre> <ul> <li>Now issue your First Alert</li> </ul> Type into terminal and press Enter<pre><code>xCommand UserInterface Message Alert Display Duration: 10 Text: World Title: Hello\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see a Alert a title, text and will disappear after 10 seconds</li> </ul> Type into terminal and press Enter<pre><code>xCommand UserInterface Message Alert Display Text: \"Lab Reviews shouldn't contain all yes answers\" Title: \"Uh-Oh! \u26a0\ufe0f\"\n</code></pre> <ul> <li>Observe the change to your Codec's Display</li> <li> <p>To dismiss, tap any option below ot outside the Alert and it will close</p> </li> <li> <p>Alternatively you can close a Alert by running <code>xCommand UserInterface Message Alert Clear</code></p> </li> <li> <p>Finish off this task deregistering your Subscription</p> </li> </ul> Type into terminal and press Enter<pre><code>xFeedback DeregisterAll\n</code></pre> <p>Learn more about Alerts</p> <p>UserInterface Message Alert</p> </li> </ul> Lesson: Rating Display <sub>(rxu-3.3)</sub> <ul> <li> <p>xAPI: xCommand UserInterface Message Rating Display</p> </li> <li> <p>Task:</p> <ul> <li>First, setup a Rating Subscription, this will let us see all the Rating Events coming into the device</li> <li>Keep on your terminal window for any events that fire</li> </ul> Type into terminal and press Enter<pre><code>xFeedback Register Event/UserInterface/Message/Rating\n</code></pre> <ul> <li>Now issue your First Rating</li> </ul> Type into terminal and press Enter<pre><code>xCommand UserInterface Message Rating Display Duration: 10 FeedbackId: xyz SubmitReceiptText: \"Receipt Text\" SubmitReceiptTitle: \"Receipt Title\" Text: \"World\" Title: \"Hello\"\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see a Rating with a Choice of 5 stars</li> </ul> Type into terminal and press Enter<pre><code>xCommand UserInterface Message Rating Display Duration: 10 FeedbackId: xyz SubmitReceiptText: \"Ok, this is a bit more fair of a rating than prompts\" SubmitReceiptTitle: \"Thanks Text: \"Rate this lab below\" Title: \"How's the Lab?\"\n</code></pre> <ul> <li>Ratings give you a different style of prompting, that's a bit more quantitative that qualitative when compared to Ratings</li> <li> <p>To dismiss, tap any option below ot outside the Rating and it will close</p> </li> <li> <p>Alternatively you can close a Rating by running <code>xCommand UserInterface Message Rating Clear</code></p> </li> <li> <p>Finish off this task deregistering your Subscription</p> </li> </ul> Type into terminal and press Enter<pre><code>xFeedback DeregisterAll\n</code></pre> <p>Learn more about Ratings</p> <p>UserInterface Message Rating</p> </li> </ul> Challenge: Explore More Messages <p>As you've probably noticed, the structure is similar</p> <p>Rather than a full lesson, we challenge you to subscribe, execute and interact with TextInput and TextLine</p> <p>When done, move onto the next section</p> <p>UserInterface Message TextInput</p> <p>UserInterface Message TextLine</p>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_webContent/","title":"Web Content <sup><sup>rxu-4</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_webContent/#web-content-section-rxu-4","title":"Web Content <sub>(section rxu-4)</sub>","text":"<p>Web Content could be a lab all on it's own. It delves a bit more into Web Development, which is not what we'll cover in this Lab</p> <p>But, we're not going to leave you without a bit of insight</p> <p>Web Content is used in several different way in RoomOS and is built on our Web Engine</p> <p>Learn more of the Web Engine configuration options</p> <p>xConfiguration WebEngine</p>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_webContent/#webapps","title":"WebApps","text":"<p>Web Content in RoomOS got it's start on the Board and Desk series of endpoints. They are to this day the only devices that contain Web Apps as well</p> <p>Web Apps are lightweight web based applications you can install through the Settings Menu of the device, the UI Extensions Editor or can be pushed from Control hub</p> <p>Multiple apps can run as separate content sources on a Board or Desk series endpoint and the session is cached so it's quick to recover</p>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_webContent/#webviews","title":"WebViews","text":"<p>WebViews are a cousin WebApps, they more or less support the same apps but with a few differeces.</p> <ol> <li>WebViews can be opened on any current RoomOS device on either the OSD or the Room Navigator touch controller<ul> <li>WebViews on a navigator are growing in popularity with new innovations brought by 3rd party controllers like Crestron, QSYS and so on. </li> <li>Controller WebViews can allow you to build nearly any UI far beyond the UI Extensions editor, but not without a deeper understanding of building and hosting applications</li> </ul> </li> <li>Information isn't cached, so when a WebView is closed, the information is purged. Opening the same WebView then requires the device to pull down the site's entire contents</li> </ol> <p>Learn more about WebView APIs</p> <p>UserInterface WebView</p> <p>Check out this advanced WebView solution by the WXSD Sales team, it uses a combination of Macros and dual web sessions socketing together to make OSD WebViews controllable by Controller WebViews</p> <p>     WebView Controls Macro </p>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_webContent/#webwidgets","title":"WebWidgets","text":"<p>WebWidgets are widgets, but they rest on the OSD of the endpoint that show in a Modal Window. This information is live and can be animated, but users are unable to interact with this element.</p> <p>Check out this Analytics Web App built by the WXSD Sales Team</p> <p>       Analytics Web Widget </p>"},{"location":"Main-Lab/RoomOS/rxp_userInterface/rxp_ui_webContent/#kiosk-mode","title":"Kiosk Mode","text":"<p>Kiosk mode is a special case where on our Desk series endpoints you can permanently set a page as the main OSD.</p> <p>Build your user experience from head to toe. </p> <p>They operate similarly to WebApps but you can only have one loaded and it's locked to that UI, though can still interact with the RoomOS calling interfaces and so on.</p> <p>Check out this Kiosk Demo by the WXSD Sales Team</p> <p>       Kiosk Reception Demo </p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/","title":"Accessing xAPI via Cloud xAPI (section rxp-5)","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#accessing-xapi-via-cloud-xapi-section-rxp-5","title":"Accessing xAPI via Cloud xAPI <sub>(section rxp-5)</sub>","text":"<p>Abstract</p> <p>Cloud xAPIs are only accessible for devices registered to the Webex Cloud or Cloud Edge for Devices</p> <p>They are HTTP requests, but differ in the sens that you're not directly communicating to the endpoint in a 1:1 relationship like we would with every other protocol we offer.</p> <p>You instead make a request, or offer a WebHook, to your Webex Cloud instance and then your cloud instance will broker the communication between itself and the device</p> <p>In short, when using Cloud xAPIs you're communicating using the Webex Cloud APIs, not directly interfacing with the Device xAPI. but fortunately, the paths fo the Device xAPI stack remain the same</p> <p>Click the Tabs Below to see how HTTP xAPI calls differ from Cloud xAPI calls</p> HTTP APICloud xAPI Get Requests [xStatuses/xConfigs]Post Requests [xCommands/xConfigs]Subscriptions [HTTPFeedback] <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Target Codec\n  My Customization-&gt;&gt;+Target Codec: xStatus/xConfig Get Request\n  Note over My Customization,Target Codec: If Device Online\n  Target Codec-&gt;&gt;- My Customization: Responds 200 OK</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Target Codec\n  My Customization-&gt;&gt;+Target Codec: xCommand/xConfig Post Request\n  Note over My Customization,Target Codec: If Device Online\n  Target Codec-&gt;&gt;- My Customization: Responds 200 OK</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Target Codec\n  activate Target Codec\n  Note over My Customization, Target Codec: WebHook Offered by My Customization&lt;br&gt;Configured in Target Codec\n  Target Codec --&gt;&gt;+ My Customization: Forwards Subscription Traffic\n  Note over My Customization,Target Codec: On Subscription callBack from Target Codec\n  deactivate Target Codec\n  activate My Customization\n  Target Codec-&gt;&gt;+ My Customization: Ex. xEvent UserInterface Extension Panel Clicked (QuickDial)\n  activate Target Codec\n  My Customization-&gt;&gt;+Target Codec: Responds with xCommand Dial Post Request\n  deactivate My Customization\n  Target Codec-&gt;&gt;- My Customization: Responds 200 OK</code></pre> Get Requests [xStatuses/xConfigs]Post Requests [xCommands]Patch Requests [xConfigs]Subscriptions [Workspace Integrations] <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Webex Cloud\n  participant Target Codec\n  Webex Cloud&lt;&lt;--&gt;&gt;Target Codec: WebSocket Connection\n  Note over Webex Cloud,Target Codec: Forwarding xStatus, xConfig&lt;br&gt; and xEvent information\n  My Customization-&gt;&gt;+Webex Cloud: xStatus/xConfig Get Request\n  Webex Cloud -&gt;&gt;- My Customization: 200 OK\n  Note over My Customization,Webex Cloud: xStatus and xConfig&lt;br&gt; Information Saved in Cloud</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Webex Cloud\n  participant Target Codec\n  Webex Cloud&lt;&lt;--&gt;&gt;Target Codec: WebSocket Connection\n  Note over Webex Cloud,Target Codec: Forwarding xStatus, xConfig&lt;br&gt; and xEvent information\n  My Customization-&gt;&gt;+Webex Cloud: xCommand Post Request\n  activate Webex Cloud\n  Note over Webex Cloud,Target Codec: Runs xCommand if&lt;br&gt;Device is Online\n  Webex Cloud-&gt;&gt;+Target Codec: Forwards Request\n  activate Target Codec\n  Target Codec-&gt;&gt;+Webex Cloud: Responds to Request\n  deactivate Target Codec\n  Webex Cloud-&gt;&gt;- My Customization: Forwards Response 200 OK\n  deactivate Webex Cloud</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Webex Cloud\n  participant Target Codec\n  Webex Cloud&lt;&lt;--&gt;&gt;Target Codec: WebSocket Connection\n  Note over Webex Cloud,Target Codec: Forwarding xStatus, xConfig&lt;br&gt; and xEvent information\n  My Customization-&gt;&gt;+Webex Cloud: xConfig Patch Request\n  activate Webex Cloud\n  %% Note over Webex Cloud,Target Codec: Runs xConfig\n  %% Webex Cloud-&gt;&gt;+Target Codec: Forwards Patch Request\n  %% Target Codec-&gt;&gt;+Webex Cloud: Responds Error 503\n  %% deactivate Target Codec\n  Note over Webex Cloud,My Customization: Cloud Accepts Changes\n  Webex Cloud-&gt;&gt;+ My Customization: Forwards Response 200 OK\n  deactivate Webex Cloud\n  activate Target Codec\n  Webex Cloud-&gt;&gt;+Target Codec: Forwards xConfig Patch Request\n  Note over Webex Cloud,Target Codec: If the Target Codec is Offline, On Boot,&lt;br&gt;Webex Cloud Re-issues all xConfig Changes\n  Target Codec-&gt;&gt;+Webex Cloud: Responds 200 OK\n  deactivate Target Codec</code></pre> <pre><code>%%{init: {'theme':'dark'}}%%\nsequenceDiagram\n  participant My Customization\n  participant Webex Cloud\n  participant All Org Codecs\n  participant Target Codec\n  Webex Cloud&lt;&lt;--&gt;&gt;All Org Codecs: WebSocket Connection&lt;br&gt;HTTP LongPoll\n  Note over Webex Cloud,All Org Codecs: Forwarding xStatus, xConfig&lt;br&gt; and xEvent information\n  Note over My Customization, Webex Cloud: WebHook Offered by My Customization&lt;br&gt;Configured in Webex Cloud\n  Webex Cloud --&gt;&gt;+ My Customization: Forwards Subscription Traffic&lt;br&gt;\n  par\n  Note over My Customization, Target Codec: On Subscription callBack from Target Codec\n  Target Codec --&gt;&gt;+ Webex Cloud: Ex. xEvent UserInterface Extension Panel Clicked (QuickDial)\n  Webex Cloud --&gt;&gt;- My Customization: Forwards xEvent UserInterface Extension Panel Clicked\n  My Customization-&gt;&gt;+Webex Cloud: Responds with xCommand Dial Post Request\n  Note over Webex Cloud,Target Codec: Runs xCommand if&lt;br&gt;Device is Online\n  Webex Cloud-&gt;&gt;-Target Codec: Forwards xCommand Dial Request\n  Target Codec-&gt;&gt;+Webex Cloud: Responds 200 OK\n  Webex Cloud-&gt;&gt;- My Customization: Forwards Response 200 OK\n  end</code></pre> <p>Section Requirements</p> <p>Postman should have been installed on your loaner laptop, make sure it is</p> <ul> <li>If Postman is NOT installed, be sure to install it before continuing section 2.5</li> </ul> <ul> <li> <p> Click the icon below for the Postman Download Page</p> <p> </p> <p></p> </li> <li> <p> Click the icon below for the Section 2.3 Postman Collection</p> <p> </p> <p></p> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#cloud-xapi-authentication-and-format-rxp-51","title":"Cloud xAPI Authentication and Format <sub>(rxp-5.1)</sub>","text":"URL Structure <p>The request URL for your Codec will change depending on whether you're making a Get, Post, Patch or Delete request to the Webex Cloud Service</p> GetPostPatchDelete xAPI BranchDevices BranchWorkSpaces Branch <p>https://webexapis.com/v1/xapi/status?[URL_Params]</p> <p>https://webexapis.com/v1/devices?[URL_Params]</p> <p>https://webexapis.com/v1/workspaces?[URL_Params]</p> Why is there a split between <code>xAPI</code>, <code>Devices</code> and <code>Workspaces</code> <p>The Webex API stack offers APIs from all technologies within it's portfolio, not just for Video Devices. You'll have APIs for phone services, messaging, user management and the list goes on</p> <p>The <code>Devices</code> branch represents cloud-registered Webex RoomOS devices and Webex Calling phones. Devices may be associated with Workspaces.</p> <p>The <code>xAPI</code> branch allows developers to programmatically invoke commands and query the status of devices that run Webex RoomOS software. This is the very same xAPI we've been working with in the Previous Sections. These Video Devices themselves fall under the <code>Devices</code> branch and <code>Workspaces</code> branches, but mainly for management purposes.</p> <p>The <code>Workspaces</code> branch represents where people work, such as conference rooms, meeting spaces, lobbies, and lunch rooms. Devices may be associated with workspaces.</p> <p>We'll only cover 2 simple examples for the <code>Devices</code> and <code>Workspaces</code> branches in this lab as they are a bit out of scope, but they are worthwhile to know about, as they can help you build solutions for your video devices that scale across your organization.</p> xAPI BranchDevices BranchWorkspaces Branch <p>https://webexapis.com/v1/xapi/command/[Command_xAPI_Path]</p> <p>https://webexapis.com/v1/devices/[Devices_API_Path]?[URL_Params]</p> <p>https://webexapis.com/v1/workspaces[Workspaces_API_Path]?[URL_Params]</p> xAPI BranchDevices BranchWorkspaces Branch <p>https://webexapis.com/v1/deviceConfigurations?[URL_Params]</p> I thought this was the <code>xAPI</code> branch, Not the <code>deviceConfigurations</code>? <p>Keen Eye . This is the branch to access Device xAPI/xConfigurations but in Webex, all Device Related Configurations run under this branch</p> <p>So when working with Video Device or Phone Devices, you'll configure them here.</p> <p>https://webexapis.com/v1/devices/[Device_Id]?[URL_Params]</p> <p>https://webexapis.com/v1/workspaces[Workspaces_API_Path]?[URL_Params]</p> xAPI BranchDevices BranchWorkspaces Branch <p>None Available</p> <p>https://webexapis.com/v1/devices/[deviceId]?[URL_Params]</p> <p>https://webexapis.com/v1/workspaceLocations/[locationId]/[Workspaces_API_Path]</p> <p></p>Authentication Format<p></p> <p>Authentication can vary between Webex API branches and it's a bit of a broad topic depending on the solution.</p> <p>If you're interested in learning more about Webex APIs and the various scopes, check out the</p> <p>   Platform Introduction Guide  </p> <p>On developer.webex.com</p> <p>For the lab, we'll use our Personal Access Token, which, with admin or device admin rights, will suffice.</p> <p>Your Personal Access Token is a form of <code>Bearer</code> authentication</p> <p></p>Request Headers<p></p> Key Value <code>Content-Type</code> <code>application/json</code> <code>Content-Type</code> <code>application/json-patch+json</code> <code>Authorization</code> <code>Bearer [YOUR_TOKEN]</code>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#get-your-personal-access-token-import-and-configure-postman-collection-rxp-52","title":"Get your Personal Access Token, Import and Configure Postman Collection <sub>(rxp-5.2)</sub>","text":"<p>Get your Personal Access Token</p> <p>First, go to the Webex Developer Site</p> <p>       Webex for Developers  </p> <p>Click the Tabs and follow the steps to get your Token</p> 1. Select Login &gt;&gt;2. Enter Your Email &gt;&gt;3. Select Documentation &gt;&gt;4. Find Devices Reference &gt;&gt;5. Copy Personal Access Token <p>In the Top Navigation Bar</p> <p></p> Select Login <p></p> <p>Use the email provided to you in this lab</p> <p></p> Enter Your Email <p></p> <p>In the Top Navigation Bar</p> <p></p> Select Documentation <p></p> <p>In the left Navigation Bar</p> <p></p> Select Device References <p></p> <p>In the Top Navigation Bar, then in the right content menu</p> <p></p> Select List Devices and Copy Personal Access Token <p></p> <p>Import and Configure Postman Collection</p> <p></p>Import Collection<p></p> <ul> <li>With Postman open, in a new or existing workspace select import</li> <li>Select File</li> <li>Locate the WX1-Lab:1451-CloudxAPI-Postman-Collection.Postman_collection.json and Open it</li> <li>You should now have the Postman Collection installed for this lab</li> </ul> View Import Postman Collection <p></p> <p></p> <p></p>Configure Collection<p></p> <ul> <li>Click on the WX1-Lab:1451-CloudxAPI-Postman-Collection root folder</li> <li>Select Variables</li> <li> <p>Add the following information for your codec in both the <code>Initial Value</code> and <code>Current Value</code> fields</p> <ul> <li>developer_Token</li> <li>device_Id</li> </ul> <p></p> <ul> <li>To get the Device ID, open an SSH terminal window and run the following xAPI</li> </ul> <pre><code>xStatus Webex DeveloperId\n</code></pre> <ul> <li>Copy the response contained within the double quotes \"\", just be sure not include the double quotes</li> </ul> </li> <li> <p>Select Save (or one of the keyboard shortcuts for your computer)</p> <ul> <li>Ctrl+S for Windows</li> <li>Cmd+S for Mac</li> </ul> </li> </ul> View Configure Postman Collection <p></p> <p></p> <p>Important</p> <p>For each lesson throughout Sections 2.5.3 through 2.5.7, use the WX1-Lab:1451-CloudxAPI-Postman-Collection.Postman_collection.json Postman collection.</p> <p>Each Section has it's own Folder and each lesson name below matches a Postman Request in that folder.</p> <p>When tasked to use Postman, use the Request that matches your current lesson.</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#webex-devices-and-workspace-apis-rxp-53","title":"Webex Devices and Workspace APIs <sub>(rxp-5.3)</sub>","text":"<p>Note</p> <p>In section 2.5.3, we'll review a single API from the Devices and Workspaces branches. These APIs are not directly associated to the Devices xAPI, but help highlights what's possible to do at scale when interacting with your devices.</p> Lesson: List Devices <ul> <li> <p>Webex Api: List Devices</p> </li> <li> <p>Task:</p> <ul> <li>This Postman Request comes predefined, no action other than selecting Send and review the Postman Terminal's repsonse</li> </ul> </li> </ul> <p>Note</p> <p>The result will contain all devices you have access to in your Webex Control Hub Organization. This includes not only Video Collaboration devices, but Phones, headsets and any other hardware listed as a Device</p> <p>You can apply filters to this Get request in the form of URL parameters to refine which devices you're interested in listing</p> View properly formatted Url, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/devices</code></pre><p></p> <p>No Body Required</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": \"{{ device_Id }}\",\n      \"displayName\": \"XXXX-XXXX\",\n      \"placeId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"orgId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"capabilities\": [],\n      \"permissions\": [],\n      \"product\": \"Cisco Desk Mini\",\n      \"type\": \"roomdesk\",\n      \"tags\": [],\n      \"ip\": \"XXX.XXX.XXX.XXX\",\n      \"mac\": \"XX:XX:XX:XX:XX:XX\",\n      \"serial\": \"XXXXXXXXXXX\",\n      \"activeInterface\": \"LAN\",\n      \"software\": \"RoomOS XX.XX.XX.XX xxxxxxxxxx\",\n      \"upgradeChannel\": \"Stable\",\n      \"primarySipUrl\": \"example@example.com\",\n      \"sipUrls\": [\n        \"example@example.com\"\n      ],\n      \"errorCodes\": [],\n      \"connectionStatus\": \"Online\",\n      \"created\": \"0000-00-00T00:00:00.000Z\",\n      \"firstSeen\": \"0000-00-00T00:00:00.000Z\",\n      \"lastSeen\": \"0000-00-00T00:00:00.000Z\",\n      \"managedBy\": \"Webex\",\n      \"devicePlatform\": \"cisco\",\n      \"workspaceId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    },\n    [\"Devices Continued...\"]\n  ]\n}\n</code></pre> Lesson: List Workspaces <ul> <li> <p>Webex Api: List Workspaces</p> </li> <li> <p>Task:</p> <ul> <li>This Postman Request comes predefined, no action other than selecting Send and review the Postman Terminal's repsonse</li> </ul> </li> </ul> <p>Note</p> <p>The result will contain all workspaces you have access to in your Webex Control Hub Organization. This includes information about each workspace you've defined. Keep in mind, each device is apart of a Workspace</p> <p>You can apply filters to this Get request in the form of URL parameters to refine which workspaces you're interested in listing</p> View properly formatted Url, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/workspaces</code></pre><p></p> <p>No Body Required</p> <pre><code>{\n  \"items\": [\n    {\n      \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"orgId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"workspaceLocationId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"locationId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"floorId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"displayName\": \"XXXX-XXXX\",\n      \"capacity\": 16,\n      \"type\": \"meetingRoom\",\n      \"sipAddress\": \"example@example.rooms.webex.com\",\n      \"created\": \"0000-00-00T00:00:00.000Z\",\n      \"calling\": {\n        \"type\": \"webexCalling\",\n        \"licenses\": [\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"]\n      },\n      \"calendar\": {\n        \"type\": \"none\"\n      },\n      \"hotdeskingStatus\": \"off\",\n      \"deviceHostedMeetings\": {\n        \"enabled\": true,\n        \"siteUrl\": \"example.webex.com\"\n      },\n      \"supportedDevices\": \"collaborationDevices\",\n      \"devicePlatform\": \"cisco\"\n    },\n    [\"Workspaces Continued...\"]\n  ]\n}\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#executing-xcommands-rxp-54","title":"Executing xCommands <sub>(rxp-5.4)</sub>","text":"Lesson: Execute an xCommand <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI <p>Url: </p><pre><code>xCommand Child Child ChildParam_X: SomeValue </code></pre><p></p> <p>Url: </p><pre><code>https://webexapis.com/v1/xapi/status?deviceId={{ device_Id }}&amp;name=Child.Child</code></pre><p></p> Body<pre><code>{\n    \"deviceId\": \"{{ device_Id }}\",\n    \"arguments\": {\n      \"ChildParam_X\": \"SomeValue\"\n  }\n}\n</code></pre> <ul> <li> <p>xAPI: xCommand Video Selfview Set</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>In the Postman request Body, structure the following parameters using JSON format into the <code>arguments</code> object</p> <ul> <li>Mode: On</li> <li>FullScreenMode: On</li> <li>OnMonitorRole: First</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> View properly formatted Url, Body and Successful Response UrlBodyResponse <p></p><pre><code>https://webexapis.com/v1/xapi/command/Video.Selfview.Set</code></pre><p></p> <pre><code>{\n    \"deviceId\": \"{{ device_Id }}\",\n    \"arguments\": {\n      \"Mode\": \"On\",\n      \"FullScreenMode\": \"On\",\n      \"OnMonitorRole\": \"First\"\n  }\n}\n</code></pre> <pre><code>{\n  \"deviceId\": \"[YOUR_DEVICE_ID]\",\n  \"result\": {}\n}\n</code></pre> Lesson: Execute an xCommand with multiple arguments with the same name <p>In cases where we need to declare multiple arguments of the same name, rather than duplicating and re-running the parameters, we instead leverage an Array in place of the value, containing all values we want to implement under that Parameter</p> <p>   Learn more about Arrays </p> <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI Syntax <pre><code>xParent Child ChildParam_X: 1, ChildParam_X: 2\n</code></pre> <p>Url: https://webexapis.com/v1/xapi/command/Parent.Child</p> Body<pre><code>{\n    \"deviceId\": \"{{ device_Id }}\",\n    \"arguments\": {\n      \"ChildParam_X\": [1, 2]\n  }\n}\n</code></pre> <ul> <li> <p>xAPI: xCommand Video Input SetMainVideoSource</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>In the Postman request Body, structure the following parameters using JSON format into the <code>arguments</code> object, but duplicate the ConnectorId parameter twice</p> <ul> <li>ConnectorId: 1</li> <li>Layout: Equal</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> View properly formatted Url, Body and Successful Response UrlBodyResponse <p></p><pre><code>https://webexapis.com/v1/xapi/command/Video.Input.SetMainVideoSource</code></pre><p></p> <pre><code>{\n    \"deviceId\": \"{{ device_Id }}\",\n    \"arguments\": {\n      \"ConnectorId\": [1, 1],\n      \"Layout\": \"Equal\"\n  }\n}\n</code></pre> <pre><code>{\n  \"deviceId\": \"[YOUR_DEVICE_ID]\",\n  \"result\": {}\n}\n</code></pre> Lesson: Execute an xCommand with a multiline argument <p>Info</p> <p>Multiline Arguments can be placed into the <code>body</code> object object of your post. This is defined after the arguments object, not within it.</p> <p>The structure of a Multiline argument should look similar to the following</p> <p>Click on the tabs to see how Terminal Syntax relates to WebSocket Syntax</p> Terminal SyntaxWebSocket Syntax <pre><code>[xParent Child ChildParam_X: SomeValue]\n[Multi Line Content]\n.\n</code></pre> <p>Url: https://webexapis.com/v1/xapi/command/Parent.Child</p> Body<pre><code>{\n  \"deviceId\": \"{{ device_Id }}\",,\n  \"arguments\": {\n    \"ChildParam_X\": \"SomeValue\"\n  },\n  \"body\": \"Multi Line Content\"\n}\n</code></pre> <p>Note</p> <p>Your Selfview may still be open</p> <p>Run the following in your terminal window to close selfview</p> <pre><code>xCommand Video Selfview Set Mode: Off\n</code></pre> Challenge: Alter <code>Execute an xCommand</code> in your Cloud xAPI Postman Collection <p>Rather than re-open your terminal session, you can go back to <code>Execute an xCommand</code> in your Cloud xAPI Postman Collection, and update the <code>argument</code> object to set the Mode parameter to Off</p> <p>     Giving Up? Check out the Challenge Answers Page  </p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions Panel Save</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>In the Postman request Body, structure the following parameters into the <code>arguments</code> object</p> <ul> <li>PanelId: wx1_lab_multilineCommand</li> </ul> </li> <li> <p>In the Postman request Body, format the XML below into the <code>body</code> object</p> Your &lt;body&gt; Value<pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FF70CF&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section 2.4.3]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> <p>Note</p> <p>JSON is not a big fan of multiline strings. No need to flatten it to one line yourself, we have a <code>Flatten Multiline String Tool</code> on the Tools page</p> <p>   Open Tools  Page  </p> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> View properly formatted Url, Body and Successful Response UrlBodyResponse <p></p><pre><code>https://webexapis.com/v1/xapi/command/UserInterface.Extensions.Panel.Save</code></pre><p></p> <pre><code>{\n  \"deviceId\": \"{{ device_Id }}\",\n  \"arguments\": {\n    \"PanelId\": \"wx1_lab_multilineCommand\"\n  },\n  \"body\": \"&lt;Extensions&gt; &lt;Panel&gt; &lt;Order&gt;1&lt;/Order&gt; &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt; &lt;Location&gt;HomeScreen&lt;/Location&gt; &lt;Icon&gt;Info&lt;/Icon&gt; &lt;Color&gt;#FF70CF&lt;/Color&gt; &lt;Name&gt;MultiLine Command [Section 2.5.4]&lt;/Name&gt; &lt;ActivityType&gt;Custom&lt;/ActivityType&gt; &lt;/Panel&gt; &lt;/Extensions&gt;\"\n}\n</code></pre> <pre><code>{\n  \"deviceId\": \"[YOUR_DEVICE_ID]\",\n  \"result\": {}\n}\n</code></pre> Lesson: Execute an xCommand which generates data and responds <ul> <li> <p>xAPI: xCommand UserInterface Extensions List</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>In the Postman request Body, structure the following parameters using JSON format into the <code>arguments</code> object.</p> <ul> <li>ActivityType: Custom</li> </ul> </li> </ul> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> View properly formatted Url, Body and Successful Response UrlBodyResponse <p></p><pre><code>https://webexapis.com/v1/xapi/command/UserInterface.Extensions.List</code></pre><p></p> <pre><code>{\n  \"deviceId\": \"{{ device_Id }}\",\n  \"arguments\": {\n    \"ActivityType\": \"Custom\"\n  }\n}\n</code></pre> <pre><code>\"result\": {\n  \"Extensions\": {\n    \"Panel\": [\n      {\n        \"ActivityType\": \"Custom\",\n        \"Color\": \"#FF70CF\",\n        \"Icon\": \"Info\",\n        \"Location\": \"HomeScreen\",\n        \"Name\": \"MultiLine Command [Section 2.5.4]\",\n        \"Order\": 1,\n        \"Origin\": \"local\",\n        \"PanelId\": \"wx1_lab_multilineCommand\",\n        \"Visibility\": \"Auto\",\n        \"id\": 2\n      },\n      {\"Continues...\"}\n    ],\n    \"Version\": \"1.11\"\n  }\n}\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#getting-and-setting-to-xconfigurations-rxp-55","title":"Getting and Setting to xConfigurations <sub>(rxp-5.5)</sub>","text":"Lesson: Getting an xConfiguration Value <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI <p></p><pre><code>xConfiguration Child Child</code></pre><p></p> <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}=Child.Child</code></pre><p></p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}&amp;key=Audio.DefaultVolume</code></pre><p></p> <p>No Body Required</p> <pre><code>{\n    \"deviceId\": \"{{ device_Id }}\",\n    \"items\": {\n        \"Audio.DefaultVolume\": {\n            \"value\": 71, // &lt;-- Response Includes New Value for Path\n            \"source\": \"configured\",\n            \"sources\": {\n                \"default\": {\n                    \"value\": 50,\n                    \"editability\": {\n                        \"isEditable\": false,\n                        \"reason\": \"FACTORY_DEFAULT\"\n                    },\n                    \"level\": \"schemaDefault\",\n                    \"enforced\": false\n                },\n                \"configured\": {\n                    \"value\": 71,\n                    \"editability\": {\n                        \"isEditable\": true\n                    },\n                    \"level\": \"device\",\n                    \"enforced\": false\n                }\n            },\n            \"valueSpace\": {\n                \"type\": \"integer\",\n                \"maximum\": 100,\n                \"minimum\": 0\n            }\n        }\n    }\n}\n</code></pre> Lesson: Getting multiple xConfiguration Values under a common Node <p>Note</p> <p>In order to Get all configuration values under a common node, we need to insert a wildcard (*) into the path as the last argument</p> <p>Click each Tab below to see how the wildcard is implemented in the URL</p> Full xAPI PathNext Higher Common NodeHighest Common Node <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}&amp;key=Bluetooth.Allowed</code></pre><p></p> <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}&amp;key=Bluetooth.*</code></pre><p></p> <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}&amp;key=</code></pre><p></p> <p>Note</p> <p>When requesting the entire xConfiguration Branch, path or wildcard id not required, simply remove the entire <code>key</code> URL parameter</p> <ul> <li> <p>xAPI: xConfiguration Audio</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code></p> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}&amp;key=Audio.*</code></pre><p></p> <p>No Body Required</p> <pre><code>{\n    \"deviceId\": \"{{ device_Id }}\",\n    \"items\": { // &lt;-- Response Includes New Values for Common Path\n      \"Audio.Input.Ethernet[1].Channel[2].Gain\": {\n        \"value\": 45,\n        \"source\": \"default\",\n        \"sources\": {\n          \"default\": {\n            \"value\": 45,\n            \"editability\": {\n              \"isEditable\": false,\n              \"reason\": \"FACTORY_DEFAULT\"\n            },\n            \"level\": \"schemaDefault\",\n            \"enforced\": false\n          },\n          \"configured\": {\n            \"value\": null,\n            \"editability\": {\n              \"isEditable\": true\n            },\n            \"level\": \"device\",\n            \"enforced\": false\n          }\n        },\n        \"valueSpace\": {\n          \"type\": \"integer\",\n          \"maximum\": 70,\n          \"minimum\": 0\n        }\n      },\n      [\"And the list continues...[5000+ Lines]\"]\n    }\n}\n</code></pre> Lesson: Set a new xConfiguration Value <p>Note</p> <p>Unlike commands, configurations use HTTP Patches. This is because you're making a change to the configuration stored on Webex Control Hub, then control hub will forward changes to the device.</p> <p>The benefit here, is that your device doesn't need to be online to make these changes . So in the case of making bulk changes across your portfolio, Webex Control Hub will apply the configurations you set to all online devices, and should a device be offline, Webex Control Hub will apply those config changes after the device reconnects to the cloud on boot</p> <p>With that said, execution of xConfiguration changes via Cloud xAPI changes how the URL and Body are structured</p> <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI Syntax <pre><code>xConfig Child ChildParam_X: 1\n</code></pre> <p>Url: https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}</p> Set new ValueSet Default Value <p>To set a new value, the <code>op</code> object must have a value of replace and the <code>value</code> object requires the configurations new value</p> Body<pre><code>[\n    {\n        \"op\": \"replace\",\n        \"path\": \"Child.ChildParam_X/sources/configured/value\",\n        \"value\": 1\n    }\n]\n</code></pre> <p>To the configuration back to it's default value, the <code>op</code> object must have a value of remove and omit <code>value</code> object</p> Body<pre><code>[\n    {\n        \"op\": \"remove\",\n        \"path\": \"Child.Child/sources/configured/value\",\n    }\n]\n</code></pre> <p>Important</p> <p>All xAPI paths in the <code>path</code> object must end with /sources/configured/value</p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li> <p>Assign the correct value to the <code>op</code> object in order to Set a new value for the xAPI above</p> </li> <li> <p>Structure the xAPI above in the path correctly, be sure to end that path with /sources/configured/value</p> </li> <li> <p>Assign a value of 100 to the <code>value</code> object</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}</code></pre><p></p> <pre><code>[\n    {\n        \"op\": \"replace\",\n        \"path\": \"Audio.DefaultVolume/sources/configured/value\",\n        \"value\": 100\n    }\n]\n</code></pre> <pre><code>{\n  \"deviceId\": \"{{ device_Id }}\",\n  \"items\": {\n    \"Audio.DefaultVolume\": {\n      \"value\": 100, // &lt;-- Response Includes New Value for Path\n      \"source\": \"configured\",\n      \"sources\": {\n        \"default\": {\n          \"value\": 50,\n          \"editability\": {\n            \"isEditable\": false,\n            \"reason\": \"FACTORY_DEFAULT\"\n          },\n          \"level\": \"schemaDefault\",\n          \"enforced\": false\n        },\n        \"configured\": {\n          \"value\": 50,\n          \"editability\": {\n            \"isEditable\": true\n          },\n          \"level\": \"device\",\n          \"enforced\": false\n        }\n      },\n      \"valueSpace\": {\n        \"type\": \"integer\",\n        \"maximum\": 100,\n        \"minimum\": 0\n      }\n    },\n    [\"10000+ Line Response...\"]\n  }\n}\n</code></pre> Lesson: Set an xConfiguration to it's Default Value <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li> <p>Assign the correct value to the <code>op</code> object in order to Set the Default Value for the xAPI above</p> </li> <li> <p>Structure the xAPI above in the path correctly, be sure to end that path with /sources/configured/value</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}</code></pre><p></p> <pre><code>[\n    {\n        \"op\": \"remove\",\n        \"path\": \"Audio.DefaultVolume/sources/configured/value\"\n    }\n]\n</code></pre> <pre><code>{\n  \"deviceId\": \"{{ device_Id }}\",\n  \"items\": {\n    \"Audio.DefaultVolume\": {\n      \"value\": 50,  // &lt;-- Response Includes New Value for Path\n      \"source\": \"configured\",\n      \"sources\": {\n        \"default\": {\n          \"value\": 50,\n          \"editability\": {\n            \"isEditable\": false,\n            \"reason\": \"FACTORY_DEFAULT\"\n          },\n          \"level\": \"schemaDefault\",\n          \"enforced\": false\n        },\n        \"configured\": {\n          \"value\": 50,\n          \"editability\": {\n            \"isEditable\": true\n          },\n          \"level\": \"device\",\n          \"enforced\": false\n        }\n      },\n      \"valueSpace\": {\n        \"type\": \"integer\",\n        \"maximum\": 100,\n        \"minimum\": 0\n      }\n    },\n    [\"10000+ Line Response...\"]\n  }\n}\n</code></pre> Lesson: Setting multiple xConfiguration Values in a single Request <p>Note</p> <p>Setting multiple configuration values can be handled in a single Patch request. The Body starts as an Array, we only need to push more properties into the array</p> <p>Click the Tabs below to view multiple xConfigurations structured in a single request body</p> <p>=== \"Single xConfig\"</p> <pre><code>  ``` JSON\n  [\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_A.Child_A_Param/sources/configured/value\"\n      }\n  ]\n  ```\n</code></pre> <p>=== \"2 xConfigs\"</p> <pre><code>  ``` JSON\n  [\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_A.Child_A_Param/sources/configured/value\"\n      },\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_B.Child_B_Param/sources/configured/value\"\n      }\n  ]\n  ```\n</code></pre> <p>=== \"3 xConfigs\"</p> <pre><code>  ``` JSON\n  [\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_A.Child_A_Param/sources/configured/value\"\n      },\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_B.Child_B_Param/sources/configured/value\"\n      },\n      {\n          \"op\": \"remove\",\n          \"path\": \"Child_B.Child_B_Param/sources/configured/value\"\n      }\n  ]\n  ```\n</code></pre> <ul> <li> <p>xAPI(s):</p> <ul> <li>xConfiguration Video Input Airplay Mode: On</li> <li>xConfiguration Video Input Airplay Beacon: Auto</li> </ul> </li> <li> <p>Task:</p> <ul> <li> <p>Assign the correct value to the <code>op</code> object in order to Set a new value for each xAPI above</p> </li> <li> <p>Structure the xAPI above in the path correctly, be sure to end that path with /sources/configured/value</p> </li> <li> <p>Assign the Values for each xAPI Value above to their <code>value</code> object</p> </li> <li> <p>Hint: Reference the <code>2 xConfig</code> tab above</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/deviceConfigurations?deviceId={{ device_Id }}</code></pre><p></p> <pre><code>[\n    {\n        \"op\": \"remove\",\n        \"path\": \"Audio.DefaultVolume/sources/configured/value\"\n    }\n]\n</code></pre> <pre><code>{\n  \"deviceId\": \"{{ device_Id }}\",\n  \"items\": {\n    \"Video.Input.AirPlay.Mode\": {\n      \"value\": \"On\", // &lt;-- Response Includes New Value for Path\n      \"source\": \"configured\",\n      \"sources\": {\n        \"default\": {\n          \"value\": \"Off\",\n          \"editability\": {\n            \"isEditable\": false,\n            \"reason\": \"FACTORY_DEFAULT\"\n          },\n          \"level\": \"schemaDefault\",\n          \"enforced\": false\n        },\n        \"configured\": {\n          \"value\": \"On\",\n          \"editability\": {\n            \"isEditable\": true\n          },\n          \"level\": \"device\",\n          \"enforced\": false\n        }\n      },\n      \"valueSpace\": {\n        \"enum\": [\n          \"Off\",\n          \"On\"\n        ],\n        \"type\": \"string\"\n      }\n    },\n    \"Video.Input.AirPlay.Beacon\": {\n      \"value\": \"Auto\", // &lt;-- Response Includes New Value for Path\n      \"source\": \"configured\",\n      \"sources\": {\n        \"default\": {\n          \"value\": \"Auto\",\n          \"editability\": {\n            \"isEditable\": false,\n            \"reason\": \"FACTORY_DEFAULT\"\n          },\n          \"level\": \"schemaDefault\",\n          \"enforced\": false\n        },\n        \"configured\": {\n          \"value\": \"Auto\",\n          \"editability\": {\n            \"isEditable\": true\n          },\n          \"level\": \"device\",\n          \"enforced\": false\n        }\n      },\n      \"valueSpace\": {\n        \"enum\": [\n          \"Auto\",\n          \"Off\"\n        ],\n        \"type\": \"string\"\n      }\n    },\n    [\"10000+ Line Response...\"]\n  }\n}\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#getting-xstatuses-rxp-56","title":"Getting xStatuses <sub>(rxp-5.6)</sub>","text":"Lesson: Getting an xStatus Value <p>Click on the tabs to see how Terminal Syntax relates to Cloud xAPI Syntax</p> Terminal SyntaxCloud xAPI <p></p><pre><code>xStatus Child Child</code></pre><p></p> <p></p><pre><code>https://webexapis.com/v1/xapi/status?deviceId={{ device_Id }}&amp;name=Child.Child</code></pre><p></p> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code> of your Postman Request</p> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/xapi/status?deviceId={{ device_Id }}&amp;name=Audio.*</code></pre><p></p> <p>No Body Required</p> <p>``` { .json , .no-copy } {   \"deviceId\": \"{{ device_Id }}\",   \"result\": {     \"Audio\": {       \"Volume\": 71     }   } }</p> Lesson: Get multiple xStatus Values under a Common Node <ul> <li> <p>xAPI: xStatus Audio</p> </li> <li> <p>Task:</p> <ul> <li> <p>Structure the xAPI Path above in the <code>URL</code> of your Postman Request</p> </li> <li> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's repsonse and observe any changes to your device</p> </li> </ul> </li> </ul> View properly formatted URL, Body and Successful Response URLBodyResponse <p></p><pre><code>https://webexapis.com/v1/xapi/status?deviceId={{ device_Id }}&amp;name=Audio.*</code></pre><p></p> <p>No Body Required</p> <pre><code>{\n  \"deviceId\": \"{{ device_Id }}\",\n  \"result\": {\n    \"Audio\": {\n      \"Devices\": {\n        \"Bluetooth\": {\n          \"ActiveProfile\": \"None\"\n        },\n        \"HandsetUSB\": {\n          \"ConnectionStatus\": \"NotConnected\",\n          \"Cradle\": \"OnHook\"\n        },\n        \"HeadsetUSB\": {\n          \"ConnectionStatus\": \"NotConnected\",\n          \"Description\": \"\",\n          \"Manufacturer\": \"\"\n        }\n      },\n      [\"500+ Line Response...\"].\n    }\n  }\n}\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#subscribing-to-xconfigurations-xstatuses-and-xevents-rxp-57","title":"Subscribing to xConfigurations, xStatuses and xEvents <sub>(rxp-5.7)</sub>","text":"<p>Subscribing to Cloud xAPI requires us to setup a Workspace Integration</p> <p>A Workspace Integration is a service you spin up that provides a Webhook, which you take and configure it your Webex Control hub instance.</p> <p>This is not covered by this lab</p> <p>   Learn More about Workspace Integrations  </p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_cloud/#section-rxp-5-cleanup-rxp-58","title":"Section rxp-5 Cleanup <sub>(rxp-5.8)</sub>","text":"<p>Important</p> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface</li> <li>Under the Section Cleanup Page, select the Run Section Cleanup? button</li> <li>Select Yes, Run the Cleanup Script</li> </ul> <p></p> Section Cleanup Confirmation <p></p> <p>This will reverse the changes we've made to the endpoint, and leave us ready for the next section</p> You can run the cleanup via the terminal as well <p>Copy the contents below into your terminal window and run them all at once</p> Type into terminal and press Enter<pre><code>xConfig Audio DefaultVolume: 50\nxCommand UserInterface Extensions Panel Remove PanelId: wx1_lab_multilineCommand\nxCommand Video Selfview Set Mode: Off FullscreenMode: Off\nxCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Audio Volume SetToDefault Device: Internal\nxCommand HTTPFeedBack Deregister FeedbackSlot: 1 FeedbackSlot: 2 FeedbackSlot: 3 FeedbackSlot: 4\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/","title":"HTTP <sup><sup>rxp-3</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#access-roomos-xapi-via-http-section-rxp-3","title":"Access RoomOS xAPI via HTTP <sub>(section rxp-3)</sub>","text":"<p>Abstract</p> <p>In this section, we'll dive into the various pieces of the RoomOS Device xAPI stack and how to make use of them in various ways over the Hypertext Transfer Protocol (HTTP) using local authentication on a Cisco RoomOS Device.</p> <p>Here, we'll see the relationships between HTTP and SSH on how to structure an xConfiguration, xCommand, xStatus and xEvents to a Cisco RoomOS device</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#section-rxp-3-requirements","title":"Section rxp-3 Requirements","text":"<p>Note</p> <p>This lab assumes you have access to a Cisco RoomOS Device that is already setup and ready for use. If your device is not registered and online, please do so before beginning</p> <p>Hardware</p> <ul> <li>A Laptop</li> <li>A Cisco Desk, Board or Room Series Device running the most recent On Premise or Cloud Stable software<ul> <li>A Touch Controller is required when working on a Room Series Device. Either Room navigator or 3rd part touch display</li> <li>Preferred Device: Cisco Desk Pro</li> </ul> </li> <li>A minimum of 1 camera (Either Integrated or External)</li> </ul> <p>Software</p> <ul> <li> <p>Laptop</p> <ul> <li>Recommended Browser: Chrome or Firefox</li> <li>Postman</li> <li>Section rxp-3 Postman Collection</li> <li>Webhook.site</li> </ul> </li> <li> <p>RoomOS Device</p> <ul> <li>Either the current On Premise or Cloud Stable release</li> </ul> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#section-rxp-3-setup","title":"Section rxp-3 Setup","text":"<ul> <li> <p>If joining from a Lab at WebexOne, Postman should be installed on your loaner laptop already, if not, please install the application now using the link below</p> </li> <li> <p>In addition to the Postman application, please download the Postman Collection listed below</p> </li> <li> <p>We'll also be leveraging a Webhook testing site, click the link below to open this is site in a new tab</p> </li> </ul> <ul> <li> <p> Click the icon below for the Postman Download Page</p> <p> </p> <p></p> </li> <li> <p> Click the icon below for the Section rxp-3 Postman Collection</p> <p> </p> <p></p> </li> <li> <p> Click the icon below for the WebHook Site </p> <p> </p> <p></p> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#http-authentication-and-format-rxp-31","title":"HTTP Authentication and Format <sub>(rxp-3.1)</sub>","text":"URL Structure <sub>(rxp-3.1.1)</sub> <p>The request URL for your Codec will change depending on whether you're making a Get or Post Call</p> <p>Click the tabs below to see an example of each URL structure</p> Get URLPost URL <p>https://[YOUR_DEVICE_IP]/getxml?location=[YOUR_XAPI_PATH_BODY]</p> <p>https://[YOUR_DEVICE_IP]/putxml</p> <p></p>Authentication Format <sub>(rxp-3.1.2)</sub><p></p> <p>When using HTTP to talk to a Cisco RoomOS Device locally, the device uses basic authentication to accept those requests. This authentication is formatted in base64 with it's username and password concatenated as a single string separated by a colon :</p> <p>Click on the tabs below to see how a Username and Password transitions to an encoded base64 string</p> Device Credentials &gt;Decoded String &gt;Encoded Base64 String &gt;Authorization Request Header <p>Username: admin Password: admin1234</p> <p>admin:admin1234 </p> <p>YWRtaW46YWRtaW4xMjM0 </p> <p>\"Authorization\": \"Basic YWRtaW46YWRtaW4xMjM0\"  </p> <p></p>Request Headers <sub>(rxp-3.1.3)</sub><p></p> <p>HTTP Requests have a myriad of headers that could be used, and this is usually defined by the device or service you're communicating with. For Cisco RoomOS devices using local authentication your requests will use the following headers</p> <p>Your Get and Post requests will use this Authorization in one of its 2 headers</p> Key Value <code>Content-Type</code> <code>text/xml</code> <code>Authorization</code> <code>Basic [YOUR_BASE64_ENCODED_AUTH]</code> <p></p>URL Parameter Format <sub>(rxp-3.1.4)</sub><p></p> <p>When retrieving xStatus or xConfiguration information, you'll perform an HTTP Get request. Get requests using HTTP and local authentication will target this base url</p> <p></p><pre><code>https://[YOUR_DEVICE_IP]/getxml</code></pre><p></p> <p>The xAPI path you want to target is then defined as a URL parameter</p> <p>This xAPI path is separated by a / and is placed behind the parameter ?location= the prefix x is removed from that start of the xAPI Path</p> Click here to see the difference between a shell path and a Local HTTP Get Path Shell PathLocal HTTP GET Path <p></p><pre><code> xPath Bookings Current Id </code></pre><p></p> <p></p><pre><code>https://[YOUR_DEVICE_IP]/getxml?location=Status/Bookings/Current/Id</code></pre><p></p> xConfiguration ExamplexStatus Example <p>xAPI: xConfiguration SystemUnit Name</p> <p>URL: https://[YOUR_DEVICE_IP]/getxml?location=Configuration/SystemUnit/Name</p> <p>xAPI: xStatus Logging ExtendedLogging Mode</p> <p>URL: https://[YOUR_DEVICE_IP]/getxml?location=Status/Logging/ExtendedLogging/Mode</p> <p></p>Body Format <sub>(rxp-3.1.5)</sub><p></p> <p>When issuing a change to an xConfig or issuing an xCommand, you'll perform an HTTP POST request. POST requests using HTTP and local authentication will target this base url</p> <p></p><pre><code>https://[YOUR_DEVICE_IP]/putxml</code></pre><p></p> <p>The xAPI path you want to target is then defined in the body of the request</p> <p>The body is structured as XML and is formatted as a string. The entire xAPI path, parameters and any values are defined within this XML string.</p> <p>URL: https://[YOUR_DEVICE_IP]/putxml</p> <p>Click the tabs below to see an example xConfiguration and xCommand body structured as XML</p> xConfiguration ExamplexCommand Example <ul> <li>&lt;xConfiguration&gt;&lt;/xConfiguration&gt;</li> <li>&lt;xCommand&gt;&lt;/xConfiguration&gt;</li> <li>&lt;xStatus&gt;&lt;/xConfiguration&gt;</li> </ul> Example XML Structure<pre><code>&lt;Parent&gt;\n  &lt;Child&gt;\n    &lt;ChildParameter&gt;Value&lt;ChildParameter&gt;\n  &lt;/Child&gt;\n&lt;Parent&gt;\n</code></pre> <ul> <li>&lt;xConfiguration&gt;&lt;/xConfiguration&gt;</li> <li>&lt;xCommand&gt;&lt;/xConfiguration&gt;</li> <li>&lt;xStatus&gt;&lt;/xConfiguration&gt;</li> </ul> Example XML Structure<pre><code>&lt;Parent&gt;\n  &lt;Child&gt;\n    &lt;ChildParameter&gt;Value&lt;ChildParameter&gt;\n  &lt;/Child&gt;\n&lt;Parent&gt;\n</code></pre> Take advantage of your Code Language <p>Many languages have built in function to help process data</p> <p>For instance, when working in ES6 or newer Javascript Environments, you can leverage the <code>btoa()</code> and <code>atob()</code> functions that are built into that language to quickly encode and decode strings to/from base64. Ex: <code>btoa('admin:admin1234')</code> = YWRtaW46YWRtaW4xMjM0==</p> <p></p>Full HTTP Get and Post examples <sub>(rxp-3.1.5)</sub><p></p> Click to view a Full Example of each written using the JavaScript Fetch API <sub>(rxp-3.1.5.a)</sub> GetPost <pre><code>const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"text/xml\");\nmyHeaders.append(\"Authorization\", \"Basic [YOUR_BASE64_ENCODED_AUTH]\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"https://[YOUR_DEVICE_IP]/getxml?location=Configuration/SystemUnit/Name\", requestOptions)\n  .then((response) =&gt; response.text())\n  .then((result) =&gt; console.log(result))\n  .catch((error) =&gt; console.error(error));\n\n/* Below is the Response Body after making a Successful Request\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;Configuration product=\"Cisco Codec\" version=\"ce11.20.1.7.913a6c7c769\" apiVersion=\"4\"&gt;\n    &lt;SystemUnit&gt;\n        &lt;Name valueSpaceRef=\"/Valuespace/STR_0_50_NoFilt\"&gt; My Room Bar Pro&lt;/Name&gt;\n    &lt;/SystemUnit&gt;\n&lt;/Configuration&gt;\n*/\n</code></pre> <pre><code>const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"text/xml\");\nmyHeaders.append(\"Authorization\", \"Basic [YOUR_BASE64_ENCODED_AUTH]\");\n\nconst raw = \"&lt;Configuration&gt;&lt;SystemUnit&gt;&lt;Name&gt;My New System Name&lt;/Name&gt;&lt;/SystemUnit&gt;&lt;/Configuration&gt;\";\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"https://[YOUR_DEVICE_IP]/putxml\", requestOptions)\n  .then((response) =&gt; response.text())\n  .then((result) =&gt; console.log(result))\n  .catch((error) =&gt; console.error(error));\n\n/* Below is the Response Body after making a Successful Request\n\n&lt;?xml version=\"1.0\"?&gt;\n&lt;Configuration&gt;\n    &lt;Success/&gt;\n&lt;/Configuration&gt;\n*/\n</code></pre> Click to view a Full Example of each written using the Macro Editor [ES6 JS] and your codec's HTTPClient xAPIs <sub>(rxp-3.1.5.b)</sub> GetPost <pre><code>import xapi from 'xapi';\n\nconst destinationIp = '[YOUR_DEVICE_IP]';\nconst headers = ['Content-Type: text/xml', `Authorization: Basic ${btoa('[YOUR_AUTH]')}`];\n\n\nasync function getPath(path){\n  const destinationUrl = `https://${destinationIp}/getxml?location=${path}`;\n\n  try {\n    const request = await xapi.Command.HttpClient.Get({\n      Url: destinationUrl,\n      Header: headers,\n      AllowInsecureHTTPS: 'True'\n    })\n    console.debug(request);\n    return request\n  } catch (e) {\n    let err = {\n      Context: `Failed Get Request to [${destinationUrl}]`,\n      ...e\n    }\n    throw new Error(e)\n  }\n}\n\ngetPath('Configuration/SystemUnit/Name');\n</code></pre> <pre><code>import xapi from 'xapi';\n\nconst destinationIp = '[YOUR_DEVICE_IP]';\nconst headers = ['Content-Type: text/xml', `Authorization: Basic ${btoa('[YOUR_AUTH]')}`];\n\n\nasync function setPath(body){\n  const destinationUrl = `https://${destinationIp}/putxml`;\n\n  try {\n    const request = await xapi.Command.HttpClient.Post({\n      Url: destinationUrl,\n      Header: headers,\n      AllowInsecureHTTPS: 'True'\n    }, body)\n    console.debug(request);\n    return request\n  } catch (e) {\n    let err = {\n      Context: `Failed Post Request to [${destinationUrl}]`,\n      ...e\n    }\n    throw new Error(e)\n  }\n}\n\nsetPath('&lt;Configuration&gt;&lt;SystemUnit&gt;&lt;Name&gt;My New System Name&lt;/Name&gt;&lt;/SystemUnit&gt;&lt;/Configuration&gt;');\n</code></pre> <p>       Learn more about Device HTTPClient xAPIs </p>  Hey, what's up with that <code>...e</code> in your caught error? <p>Again, knowing you language has it's benefits</p> <p><code>...</code> is called a Spread Operator and it's very useful when playing with data in ES6 JS</p> <p>We're using it here to pass the original error the xAPI produced into an err object as well as some context to help us troubleshoot our macro in the future.</p> <p>       Learn more about Spread Operators </p> Click to view a Full Example of each written using the Python Requests API <sub>(rxp-3.1.5.c)</sub> GetPost <pre><code>import requests\n\nurl = \"https://[YOUR_DEVICE_IP]/getxml?location=Configuration/SystemUnit/Name\"\n\npayload = \"\"\nheaders = {\n  'Content-Type': 'text/xml',\n  'Authorization': 'Basic [YOUR_BASE64_ENCODED_AUTH]'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n\n# Below is the Response Body after making a Successful Request\n\n# &lt;?xml version=\"1.0\"?&gt;\n# &lt;Configuration&gt;\n#     &lt;Success/&gt;\n# &lt;/Configuration&gt;\n</code></pre> <pre><code>import requests\n\nurl = \"https://[YOUR_DEVICE_IP]/putxml\"\n\npayload = \"&lt;Configuration&gt;&lt;SystemUnit&gt;&lt;Name&gt;My New System Name&lt;/Name&gt;&lt;/SystemUnit&gt;&lt;/Configuration&gt;\"\nheaders = {\n  'Content-Type': 'text/xml',\n  'Authorization': 'Basic [YOUR_BASE64_ENCODED_AUTH]'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n\n# Below is the Response Body after making a Successful Request\n\n# &lt;?xml version=\"1.0\"?&gt;\n# &lt;Configuration product=\"Cisco Codec\" version=\"ce11.20.1.7.913a6c7c769\" apiVersion=\"4\"&gt;\n#     &lt;SystemUnit&gt;\n#         &lt;Name valueSpaceRef=\"/Valuespace/STR_0_50_NoFilt\"&gt; My Room Bar Pro&lt;/Name&gt;\n#     &lt;/SystemUnit&gt;\n# &lt;/Configuration&gt;\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#import-and-configure-the-section-rxp-31-postman-collection-rxp-32","title":"Import and Configure the section rxp-3.1 Postman Collection <sub>(rxp-3.2)</sub>","text":"<p>Whereas we'll be using Postman, this tool will automatically take our basic auth and structure as an with Header for us and convert that string into base64</p> <p>This collection has most pieces structured as we'd need it to and will be used through sections rxp-3.3 through rxp-3.5</p> Import Collection <ul> <li>With Postman open, in a new or existing workspace select import</li> <li>Select File</li> <li>Locate the WX1-Lab:1451-HTTP-Postman-Collection.Postman_collection.json and Open it</li> <li>You should now have the Postman Collection installed for this lab</li> </ul> View Import Postman Collection <p></p> <p></p> Configure Postman Collection for sections rxp-3.3 through rxp-3.5 <ul> <li>Click on the WX1-Lab:1451-HTTP-Postman-Collection root folder</li> <li>Select Variables</li> <li>Add the following information for your codec in both the <code>Initial Value</code> and <code>Current Value</code> fields<ul> <li>device_username</li> <li>device_password</li> <li>device_ipAddress</li> </ul> </li> <li>Select Save (or one of the keyboard shortcuts for your computer)<ul> <li>Ctrl+S for Windows</li> <li>Cmd+S for Mac</li> </ul> </li> </ul> View Configure Postman Collection for sections rxp-3.3 through rxp-3.5 <p></p> <p></p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#executing-xcommands-rxp-33","title":"Executing xCommands <sub>(rxp-3.3)</sub>","text":"<p>Abstract</p> <p>Throughout section rxp-3.3, you'll learn how to format and execute xCommands via HTTP using Postman.</p> <p>The techniques outlined here will correspond to the methods needed for setting new xConfiguration Values in section rxp-3.4</p> Lesson: Execute an xCommand <sub>(rxp-3.3.1)</sub> <p>XML Body Location</p> <p></p> <p></p> <ul> <li> <p>xAPI: xCommand Video Selfview Set</p> </li> <li> <p>Task: Structure the xAPI command above into an XML format then place this into the Body of the Execute an xCommand request in your Postman collection. Include the following Parameters and Values</p> <ul> <li>Mode: On</li> <li>FullScreenMode: On</li> <li>OnMonitorRole: First</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's response and observe any changes to your device</p> View properly formatted XML and Successful Response <p></p> <pre><code>&lt;Command&gt;\n  &lt;Video&gt;\n    &lt;Selfview&gt;\n      &lt;Set&gt;\n        &lt;Mode&gt;On&lt;/Mode&gt;\n        &lt;FullScreenMode&gt;On&lt;/FullScreenMode&gt;\n        &lt;OnMonitorRole&gt;First&lt;/OnMonitorRole&gt;\n      &lt;/Set&gt;\n    &lt;/Selfview&gt;\n  &lt;/Video&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p></p> <p></p> Lesson: Execute multiple xCommands in a single request <sub>(rxp-3.3.2)</sub> <p>Info</p> <p>You can structure your XML to allow for multiple xAPI calls under a single Parent Path, in this case the Parent Path is xCommand</p> <p>So long as the paths you're running are under their appropriate Common Path Nodes, then they will be considered. Should those Common Path Nodes deviate, then you must structure the XML to match</p> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand UserInterface WebView Display</li> <li>xCommand UserInterface Message Rating Display</li> </ul> </li> <li> <p>Task: <code>xCommand Video Selfview Set</code> and <code>xCommand UserInterface WebView Display</code> have already be set in your collection under their appropriate Common Node Path. We've highlighted the Common Node Paths above for you to see. Structure the XML for xCommand UserInterface Message Rating Display and place it as the next xCommand in the XML structure given to you. Include the following Parameters and Values</p> <ul> <li>Title: Rate this Site</li> <li>Text: From 0 to 5 stars, rate this Website</li> <li>Duration: 45</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's response and observe any changes to your device</p> View Successful OSD Output <p></p> What to expect on your OSD on a successful request <p></p> View properly formatted XML and Successful Response <p></p> Message Rating Display XMLFull XML body <pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;Message&gt;\n      &lt;Rating&gt;\n        &lt;Display&gt;\n          &lt;Title&gt;Rate this Site&lt;/Title&gt;\n          &lt;Text&gt;From 0 to 5 stars, rate this Website&lt;/Text&gt;\n          &lt;Duration&gt;45&lt;/Duration&gt;\n        &lt;/Display&gt;\n      &lt;/Rating&gt;\n    &lt;/Message&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> <pre><code>&lt;Command&gt;\n  &lt;Video&gt;\n    &lt;Selfview&gt;\n      &lt;Set&gt;\n        &lt;Mode&gt;Off&lt;/Mode&gt;\n      &lt;/Set&gt;\n    &lt;/Selfview&gt;\n  &lt;/Video&gt;\n  &lt;UserInterface&gt;\n    &lt;WebView&gt;\n      &lt;Display&gt;\n        &lt;Mode&gt;Modal&lt;/Mode&gt;\n        &lt;Url&gt;https://roomos.cisco.com&lt;/Url&gt;\n      &lt;/Display&gt;\n    &lt;/WebView&gt;\n    &lt;!-- Message Rating Display Should Start Here --&gt;\n    &lt;Message&gt;\n      &lt;Rating&gt;\n        &lt;Display&gt;\n          &lt;Title&gt;Rate this Site&lt;/Title&gt;\n          &lt;Text&gt;From 0 to 5 stars, rate this Website&lt;/Text&gt;\n          &lt;Duration&gt;45&lt;/Duration&gt;\n        &lt;/Display&gt;\n      &lt;/Rating&gt;\n    &lt;/Message&gt;\n    &lt;!-- Message Rating Display Should End Here --&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p></p> <p></p> Lesson: Execute an xCommand with multiple arguments with the same name  <sub>(rxp-3.3.3)</sub> <p>Info</p> <p>We can structure the XML payload for HTTP to include multiple parameters under the same name</p> <p>Simply duplicate the Parameter that's capable of being duplicated and add that into your XML body. Be sure to include the Opening and Closing XML tags for that parameter as well</p> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand UserInterface WebView Clear</li> <li>xCommand UserInterface Message Rating Clear</li> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> </ul> </li> <li> <p>Task: We'll be running multiple commands in conjunction to having multiple parameters in this lesson.</p> <ul> <li>To clean up from the previous lesson, we'll send an xCommand to clear by replacing the Display Tags for both with Clear and deleting any parameters they had<ul> <li><code>xCommand UserInterface WebView DisplayClear</code></li> <li><code>xCommand UserInterface Message Rating DisplayClear</code></li> </ul> </li> <li>Then we'll set selfview back on in Full Screen</li> <li>The above tasks will come preloaded in the Postman collection, your task is to structure the XML for xCommand Video Input SetMainVideoSource and place it as the next xCommand in the XML structure given to you and duplicate the <code>ConnectorId</code> parameter. Include the following Parameters and Values<ul> <li>ConnectorId: 1</li> <li>Layout: Prominent</li> </ul> </li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's response and observe any changes to your device</p> View Successful OSD Output <p></p> What to expect on your OSD on a successful request <p></p> View properly formatted XML and Successful Response <p></p> Video Input SetMainVideoSource XMLFull XML body <pre><code>&lt;Command&gt;\n  &lt;Video&gt;\n    &lt;Input&gt;\n      &lt;SetMainVideoSource&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;!-- Your Duplicate ConnectorId Parameter Should Start Here  --&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;!-- Your Duplicate ConnectorId Parameter Should End Here  --&gt;\n        &lt;Layout&gt;Prominent&lt;/Layout&gt;\n      &lt;/SetMainVideoSource&gt;\n    &lt;/Input&gt;\n  &lt;/Video&gt;\n&lt;/Command&gt;\n</code></pre> <pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;WebView&gt;\n      &lt;Clear&gt;&lt;/Clear&gt;\n    &lt;/WebView&gt;\n    &lt;Message&gt;\n      &lt;Rating&gt;\n        &lt;Clear&gt;&lt;/Clear&gt;\n      &lt;/Rating&gt;\n    &lt;/Message&gt;\n  &lt;/UserInterface&gt;\n  &lt;Video&gt;\n    &lt;Selfview&gt;\n      &lt;Set&gt;\n        &lt;Mode&gt;On&lt;/Mode&gt;\n        &lt;FullScreenMode&gt;On&lt;/FullScreenMode&gt;\n        &lt;OnMonitorRole&gt;First&lt;/OnMonitorRole&gt;\n      &lt;/Set&gt;\n    &lt;/Selfview&gt;\n    &lt;Input&gt;\n      &lt;SetMainVideoSource&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;!-- Your Duplicate ConnectorId Parameter Should Start Here  --&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;!-- Your Duplicate ConnectorId Parameter Should End Here  --&gt;\n        &lt;Layout&gt;Prominent&lt;/Layout&gt;\n      &lt;/SetMainVideoSource&gt;\n    &lt;/Input&gt;\n  &lt;/Video&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p></p> <p></p> Lesson: Execute an xCommand with a multiline argument  <sub>(rxp-3.3.4)</sub> <p>Info</p> <p>Multiline Arguments can be placed into the body of the XML as well. This specifically uses a <code>&lt;body&gt;</code> which isn't explicitly highlighted in the path of the API.</p> <p>The structure of a Multiline argument should look similar to the following</p> Example XML Structure with Multiline Argument<pre><code>&lt;Parent&gt;\n  &lt;Child&gt;\n    &lt;ChildParameter&gt;Value&lt;ChildParameter&gt;\n    &lt;body&gt;[MY_MULTILINE_ARGUMENT]&lt;/body&gt;\n  &lt;/Child&gt;\n&lt;Parent&gt;\n</code></pre> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> <li>xCommand UserInterface Extensions Panel Save</li> </ul> </li> <li> <p>Task: We'll be running multiple commands in conjunction to having a multiline argument.</p> <ul> <li>We'll start by correcting our Camera View from the previous lesson, which will come pre-loaded in the Postman Collection</li> <li>Your task is to structure the XML for xCommand UserInterface Extensions Panel Save and place it as the next xCommand in the XML structure given. Include the following Parameters and Values<ul> <li>PanelId: wx1_lab_multilineCommand</li> <li>body:     Your &lt;body&gt; Value<pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FF70CF&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section rxp-3.3]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre></li> </ul> </li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's response and observe any changes to your device</p> You're Wrapping XML around XML! <p>Note: Not all multiline arguments are in XML format; for example, xCommand UserInterface Extensions Panel Save is. It\u2019s important to remember that any data placed within a <code>&lt;body&gt;</code> tag should always be written as a <code>String</code>. If your integration automatically injects this information, additional processing may be necessary.</p> <p>The xAPI will have a hard time deciphering your Body's XML value vs the xAPI XML Payload</p> <p>You'll want to \"Stringify\" the XML body by replacing all instances of <code>&lt;</code> characters with &amp;lt; and all instances of <code>&gt;</code> characters with &amp;gt; &gt;</p> <ul> <li>These aren't the only characters that are impacted, and that will largely depend on your XML body value</li> </ul> <p>Luckily, you can use the Stringify XML Body on the Tools Page to do this for you</p> <p>   Open Tools  Page  </p> View Successful OSD Output <p></p> What to expect on your OSD on a successful request <p></p> View properly formatted XML and Successful Response <p></p> UserInterface Extensions Panel Save XMLFull XML body <pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;Extensions&gt;\n      &lt;Panel&gt;\n        &lt;Save&gt;\n          &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n          &lt;body&gt;&amp;lt;Extensions&amp;gt; &amp;lt;Panel&amp;gt; &amp;lt;Order&amp;gt;1&amp;lt;/Order&amp;gt; &amp;lt;PanelId&amp;gt;wx1_lab_multilineCommand&amp;lt;/PanelId&amp;gt; &amp;lt;Location&amp;gt;HomeScreen&amp;lt;/Location&amp;gt; &amp;lt;Icon&amp;gt;Info&amp;lt;/Icon&amp;gt; &amp;lt;Color&amp;gt;#FF70CF&amp;lt;/Color&amp;gt; &amp;lt;Name&amp;gt;MultiLine Command [Section rxp-3.3]&amp;lt;/Name&amp;gt; &amp;lt;ActivityType&amp;gt;Custom&amp;lt;/ActivityType&amp;gt; &amp;lt;/Panel&amp;gt; &amp;lt;/Extensions&amp;gt;\n          &lt;/body&gt;\n        &lt;/Save&gt;\n      &lt;/Panel&gt;\n    &lt;/Extensions&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> <pre><code>&lt;Command&gt;\n  &lt;Video&gt;\n    &lt;Selfview&gt;\n      &lt;Set&gt;\n        &lt;Mode&gt;Off&lt;/Mode&gt;\n      &lt;/Set&gt;\n    &lt;/Selfview&gt;\n    &lt;Input&gt;\n      &lt;SetMainVideoSource&gt;\n        &lt;ConnectorId&gt;1&lt;/ConnectorId&gt;\n        &lt;Layout&gt;Equal&lt;/Layout&gt;\n      &lt;/SetMainVideoSource&gt;\n    &lt;/Input&gt;\n  &lt;/Video&gt;\n  &lt;!-- Your UserInterface Extensions Panel Save XML Should Start Here  --&gt;\n  &lt;UserInterface&gt;\n    &lt;Extensions&gt;\n      &lt;Panel&gt;\n        &lt;Save&gt;\n          &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n          &lt;body&gt;&amp;lt;Extensions&amp;gt; &amp;lt;Panel&amp;gt; &amp;lt;Order&amp;gt;1&amp;lt;/Order&amp;gt; &amp;lt;PanelId&amp;gt;wx1_lab_multilineCommand&amp;lt;/PanelId&amp;gt; &amp;lt;Location&amp;gt;HomeScreen&amp;lt;/Location&amp;gt; &amp;lt;Icon&amp;gt;Info&amp;lt;/Icon&amp;gt; &amp;lt;Color&amp;gt;#FF70CF&amp;lt;/Color&amp;gt; &amp;lt;Name&amp;gt;MultiLine Command [Section rxp-3.3]&amp;lt;/Name&amp;gt; &amp;lt;ActivityType&amp;gt;Custom&amp;lt;/ActivityType&amp;gt; &amp;lt;/Panel&amp;gt; &amp;lt;/Extensions&amp;gt;\n          &lt;/body&gt;\n        &lt;/Save&gt;\n      &lt;/Panel&gt;\n    &lt;/Extensions&gt;\n  &lt;/UserInterface&gt;\n  &lt;!-- Your UserInterface Extensions Panel Save XML Should Start Here  --&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p></p> <p></p> Lesson: Execute an xCommand which generates data and responds <sub>(rxp-3.3.5)</sub> <p>Info</p> <p>Some commands will generate data and output a response of that data. All commands will respond with an \"OK\" or \"Error\" but other can provide data.</p> <p>Whereas we just made a UI extension with the API, we can now pull a list of our custom extensions using the API</p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions List</p> </li> <li> <p>Task: Structure the xAPI command above into an XML format then place this into the Body of the Execute an xCommand which generates data and responds request in your Postman collection. Include the following Parameters and Values</p> <ul> <li>ActivityType: Custom</li> </ul> </li> </ul> <p>Once the Postman Request has been updated, Save the request, select Send and review the Postman Terminal's response and observe any changes to your device</p> View properly formatted XML and Successful Response <p></p> <pre><code>&lt;Command&gt;\n  &lt;UserInterface&gt;\n    &lt;Extensions&gt;\n      &lt;List&gt;\n        &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n      &lt;/List&gt;\n    &lt;/Extensions&gt;\n  &lt;/UserInterface&gt;\n&lt;/Command&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p></p> <p></p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#setting-and-getting-xconfigurations-rxp-34","title":"Setting and Getting xConfigurations <sub>(rxp-3.4)</sub>","text":"<p>Abstract</p> <p>Throughout section rxp-3.4, you'll continue to learn how to format XML payloads as you work to set new xConfigurations against the codec</p> <p>Unlike xCommands, you can then pull back the value of xConfigurations using a Get Request.</p> <p>The techniques outlined here will correspond to the methods needed for Getting xStatus Values in section rxp-3.5</p> Lesson: Set a new xConfiguration Value <sub>(rxp-3.4.1)</sub> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: Structure the xAPI command above into an XML format then place this into the Body of the Set a new xConfiguration Value request in your Postman collection. Set DefaultVolume to <code>75</code></p> </li> </ul> View properly formatted XML and Successful Response <p></p> <pre><code>&lt;Configuration&gt;\n  &lt;Audio&gt;\n    &lt;DefaultVolume&gt;75&lt;/DefaultVolume&gt;\n  &lt;/Audio&gt;\n&lt;/Configuration&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p></p> <p></p> Lesson: Set multiple xConfiguration Values in a single Request <sub>(rxp-3.4.2)</sub> <ul> <li> <p>xAPI(s): </p> <ul> <li>xConfiguration Audio DefaultVolume</li> <li>xConfiguration SystemUnit Name</li> </ul> </li> <li> <p>Task: </p> <ul> <li>We'll set the DefaultVolume back to 50, which will be preloaded into the Postman collection</li> <li>Your task is to structure the XML for xConfiguration SystemUnit Name and place it as the next xCommand in the XML structure given. Set the Name to <code>Codec_X</code> where X is the # of your workstation pod or your name</li> </ul> </li> </ul> View properly formatted XML and Successful Response <p></p> SystemUnit Name XMLFull XML Body <pre><code>&lt;Configuration&gt;\n  &lt;SystemUnit&gt;\n    &lt;Name&gt;Pod_X&lt;/Name&gt;\n  &lt;/SystemUnit&gt;\n&lt;/Configuration&gt;\n</code></pre> <pre><code>&lt;Configuration&gt;\n  &lt;Audio&gt;\n    &lt;DefaultVolume&gt;50&lt;/DefaultVolume&gt;\n  &lt;/Audio&gt;\n  &lt;!-- SystemUnit Name Should Start Here --&gt;\n  &lt;SystemUnit&gt;\n    &lt;Name&gt;Pod_X&lt;/Name&gt;\n  &lt;/SystemUnit&gt;\n  &lt;!-- SystemUnit Name Should End Here --&gt;\n&lt;/Configuration&gt;\n</code></pre> View Failed Response <p>If you have a failed response, review the errors as it will point out how to resolve your particular issue in your XML payload and try again</p> <p></p> <p></p> Lesson: Getting an xConfiguration Value <sub>(rxp-3.4.3)</sub> <p>Info</p> <p>Up until this point, you've been making Post requests with an xAPI path provided as a part of the Post body written in XML format</p> <p>Whereas, we're pivoting to a Get rest, the format of the request changes. We no longer need a body, but we need to define the xAPI path as apart of the URL under it's location tag</p> <p>Refer to section rxp-3.2 for a refresher on this syntax</p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Structure the xAPI command above into the URL under the Getting an xConfiguration Value request in your Postman collection. This path should rest behind the ?location and separated by a <code>/</code></p> </li> </ul> View properly formatted URL and Successful Response <p></p> Audio DefaultVolume URL <p>https://{{ device_ipAddress }}/getxml?location=Configuration/Audio/DefaultVolume</p> View Failed Response <p>Something to note on xConfig Get Requests, is you'll still get a 200 OK if your auth and IP are correct when talking to the Codec</p> <p>But a lack of response information can tell you that you may have a fault in your xAPI path in the URL</p> <p></p> What to expect for a bad path <p></p> <p></p> What to expect for a missing path <p></p> Lesson: Get multiple xConfiguration Values under a Common Node <sub>(rxp-3.4.4)</sub> <p>Info</p> <p>You can pull more information if you move up to a Common Node</p> <p>By dropping <code>DefaultVolume</code> from xConfiguration Audio DefaultVolume we can grab all the Configuration Setting under the Audio Branch from the codec</p> <ul> <li> <p>xAPI: xConfiguration Audio</p> </li> <li> <p>Structure the xAPI command above into the URL under the Getting multiple xConfiguration Values under a Common Node request in your Postman collection.</p> </li> </ul> View properly formatted URL and Successful Response Audio DefaultVolume URL <p>https://{{ device_ipAddress }}/getxml?location=Configuration/Audio</p> View Successful HTTP Response <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Configuration product=\"Cisco Codec\" version=\"ce11.20.1.7.913a6c7c769\" apiVersion=\"4\"&gt;\n  &lt;Audio&gt;\n    &lt;DefaultVolume valueSpaceRef=\"/Valuespace/INT_0_100\"&gt;75&lt;/DefaultVolume&gt;\n    &lt;Ethernet&gt;\n      &lt;Encryption valueSpaceRef=\"/Valuespace/TTPAR_RequiredOptional\"&gt;Required&lt;/Encryption&gt;\n      &lt;SAPDiscovery&gt;\n        &lt;Address valueSpaceRef=\"/Valuespace/STR_0_64_IPv4AdminMcast\"&gt;239.255.255.255&lt;/Address&gt;\n        &lt;Mode valueSpaceRef=\"/Valuespace/TTPAR_OnOff\"&gt;Off&lt;/Mode&gt;\n      &lt;/SAPDiscovery&gt;\n    &lt;/Ethernet&gt;\n    &lt;!-- And the List Goes On... --&gt;\n  &lt;/Audio&gt;\n&lt;/Configuration&gt;\n</code></pre> View Failed Response <p>Something to note on xConfig Get Requests, is you'll still get a 200 OK if your auth and IP are correct when talking to the Codec</p> <p>But a lack of response information can tell you that you may have a fault in your xAPI path in the URL</p> <p></p> What to expect for a bad path <p></p> <p></p> What to expect for a missing path <p></p>  What about Subscribing to an xConfiguration? <p>Subscriptions via HTTP are possible, but require a process outside of using HTTP Post/Get commands. We'll need to leverage the HTTPFeedback feature of the codec and a tool that can receive a WebHook</p> <p>So we'll save HTTPFeedback for the end of section rxp-3 and handle all HTTP based subscriptions there</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#getting-xstatuses-rxp-35","title":"Getting xStatuses <sub>(rxp-3.5)</sub>","text":"Lesson: Getting an xStatus Value <sub>(rxp-3.5.1)</sub> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Structure the xAPI command above into the URL under the Getting an xStatus request in your Postman collection.</p> </li> </ul> View properly formatted URL and Successful Response <p></p> Audio DefaultVolume URL <p>https://{{ device_ipAddress }}/getxml?location=Status/Audio/Volume</p> View Failed Response <p>Something to note on xStatus Get Requests, is you'll still get a 200 OK if your auth and IP are correct when talking to the Codec</p> <p>But a lack of response information can tell you that you may have a fault in your xAPI path in the URL</p> <p></p> What to expect for a bad path <p></p> <p></p> What to expect for a missing path <p></p> Lesson: Get multiple xStatus Values under a Common Node <sub>(rxp-3.5.2)</sub> <ul> <li> <p>xAPI: xStatus Audio</p> </li> <li> <p>Structure the xAPI command above into the URL under the Getting multiple xStatus Values under a Common Node request in your Postman collection.</p> </li> </ul> View properly formatted URL and Successful Response Audio DefaultVolume URL <p>https://{{ device_ipAddress }}/getxml?location=Status/Audio</p> View Successful HTTP Response <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Status product=\"Cisco Codec\" version=\"ce11.20.1.7.913a6c7c769\" apiVersion=\"4\"&gt;\n  &lt;Audio&gt;\n    &lt;Devices&gt;\n      &lt;Bluetooth&gt;\n        &lt;ActiveProfile&gt;None&lt;/ActiveProfile&gt;\n      &lt;/Bluetooth&gt;\n      &lt;HandsetUSB&gt;\n        &lt;ConnectionStatus&gt;NotConnected&lt;/ConnectionStatus&gt;\n        &lt;Cradle&gt;OnHook&lt;/Cradle&gt;\n      &lt;/HandsetUSB&gt;\n      &lt;HeadsetUSB&gt;\n        &lt;ConnectionStatus&gt;NotConnected&lt;/ConnectionStatus&gt;\n        &lt;Description&gt;&lt;/Description&gt;\n        &lt;Manufacturer&gt;&lt;/Manufacturer&gt;\n      &lt;!-- And the List Goes On... --&gt;\n  &lt;/Audio&gt;\n&lt;/Status&gt;\n</code></pre> View Failed Response <p>Something to note on xStatus Get Requests, is you'll still get a 200 OK if your auth and IP are correct when talking to the Codec</p> <p>But a lack of response information can tell you that you may have a fault in your xAPI path in the URL</p> <p></p> What to expect for a bad path <p></p> <p></p> What to expect for a missing path <p></p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#using-webhooks-to-subscribe-to-xconfigurations-xstatuses-and-xevents-rxp-36","title":"Using WebHooks to subscribe to xConfigurations, xStatuses and xEvents <sub>(rxp-3.6)</sub>","text":"<p>Important</p> <p>Your codec has a limit of 4 HTTPFeedback Slots with up to 15 xAPI paths expressions in the same command</p> xCommand References for Section: rxp-3.6 <ul> <li> <p> xCommand HttpFeedback Register</p> <p>Register the device to an HTTP(S) server to return XML feedback over HTTP(S) to specific URLs.</p> <p>Parameters:</p> <p> ServerUrl [Required] FeedbackSlot [Required] Expression Format </p> <p>   Reference for xCommand HttpFeedback Register </p> </li> <li> <p> xCommand HttpFeedback Deregister</p> <p>Deregister the HTTP feedback over HTTP(S).</p> <p>Parameters:</p> <p> FeedbackSlot [Required] </p> <p>   Reference for xCommand HttpFeedback Deregister </p> </li> <li> <p> xCommand HttpFeedback Enable</p> <p>Re-enables a previously registered feedback slot after it has failed and become deactivated.</p> <p>Parameters:</p> <p> FeedbackSlot [Required] </p> <p>   Reference for xCommand HttpFeedback Enable </p> </li> </ul> Locate and Configure your Unique URL from Webhook.Site <ul> <li>Go to https://webhook.site</li> <li>Copy your Unique URL</li> <li>Open Postman<ul> <li>Click on the WX1-Lab:1451-HTTP-Postman-Collection root folder</li> <li>Select Variables</li> <li>Pase your unique URL into <code>Initial Value</code> and <code>Current Value</code> fields for WebhookSite_Unique_Url</li> <li>Select Save (or one of the keyboard shortcuts for your computer)<ul> <li>Ctrl+S for Windows</li> <li>Cmd+S for Mac</li> </ul> </li> </ul> </li> </ul> <p></p> <p></p> <p>Info</p> <p>For all Webhook Examples below, we'll need to register HTTPFeedback slot by first running</p> <p><code>xCommand HTTPFeedback Register</code></p> <p>These have been preformatted for you in the Postman collection</p> View Example WebHook.site output <p></p> <p></p> Lesson: Subscribe to the full xConfiguration Branch <sub>(rxp-3.6.1)</sub> <ul> <li>Task:<ul> <li>In your Postman Collection under HTTP &gt; Section: (rxp-3.6)</li> <li>Select the Subscribe to the full xConfiguration Branch request</li> <li>View how the body is Structured in the XML body</li> <li>Select Send</li> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xConfigurations Page, press any of the buttons on this page</li> <li>Observe your Webhook.Site Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Webhook.Site Terminal<ul> <li>Optional: Press those buttons and switches a few times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to the full xStatus Branch <sub>(rxp-3.6.2)</sub> <ul> <li>Task:<ul> <li>In your Postman Collection under HTTP &gt; Section: rxp-3.6</li> <li>Select the Subscribe to the full xStatus Branch request</li> <li>View how the body is Structured in the XML body</li> <li>Then select Send and Monitor the output on the Webhook.Site terminal<ul> <li>Your device will forward an event in the status branch soon</li> </ul> </li> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xStatuses Page, press any of the buttons on this page</li> <li>Observe your Webhook.Site Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Webhook.Site Terminal</li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to the full xEvent Branch <sub>(rxp-3.6.3)</sub> <ul> <li>Task:<ul> <li>In your Postman Collection under HTTP &gt; Section: (rxp-3.6)</li> <li>Select the Subscribe to the full xEvent Branch request</li> <li>View how the body is Structured in the XML body</li> <li>Then select Send and Monitor the output on the Webhook.Site terminal<ul> <li>Your device will forward an event in the event branch soon</li> </ul> </li> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Under the xEvents Page, press any of the buttons on this page</li> <li>Observe your Webhook.Site Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Webhook.Site Terminal</li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to Specific Expressions on any Branch <sub>(rxp-3.6.4)</sub> <ul> <li>Task:<ul> <li>In your Postman Collection under HTTP &gt; Section: (rxp-3.6)</li> <li>Select the Subscribe to Specific Expressions on any Branch request</li> <li>View how the body is Structured in the XML body<ul> <li>Take Note, we've changed our Expression Parameter</li> <li>Rather than subscribing to All States, we instead narrow down what we're interested in</li> <li>For each expression we want to listen too, we will declare a new Expression Parameter</li> <li>We can have up to 15 Expressions defined in a single feedback slot</li> </ul> </li> <li>Then select Send and Monitor the output on the Webhook.Site terminal<ul> <li>You will need to interact with the system Volume and press the MultiLine Command [Section rxp-3.3] Panel to see events pour into the WebHook.site terminal</li> </ul> </li> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface<ul> <li>Clicking on the <code>Subscription Assistant Button</code> will fire a Panel Event</li> <li>Under the xStatuses, move the Adjust Volume slider to generate events<ul> <li>Other buttons under xStatus won't take any effect</li> </ul> </li> <li>Under the xEvents Page, press any of the buttons on this page</li> <li>Observe your Webhook.Site Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Webhook.Site Terminal</li> </ul> </li> </ul> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_http/#section-rxp-3-cleanup-rxp-37","title":"Section rxp-3 Cleanup <sub>(rxp-3).7</sub>","text":"<p>Important</p> <ul> <li>Press the Subscription Assistant Button on your Touch Interface</li> <li>Under the Section Cleanup Page, select the Run Section Cleanup? button</li> <li>Select Yes, Run the Cleanup Script</li> </ul> <p></p> Section Cleanup Confirmation <p></p> <p>This will reverse the changes we've made to the endpoint, and leave us ready for the next section</p> You can run the cleanup via the terminal as well <p>Copy the contents below into your terminal window and run them all at once</p> Type into terminal and press Enter<pre><code>xFeedback DeregisterAll\nxConfiguration Audio DefaultVolume: 50\nxCommand UserInterface Extensions Panel Remove PanelId: wx1_lab_multilineCommand\nxCommand Video SelfView Set Mode: Off FullscreenMode: Off\nxCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Audio Volume SetToDefault Device: Internal\n</code></pre> <p>Feel free to close your Terminal Window</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_intro/","title":"What are RoomOS xAPI","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_intro/#why-implement-an-api-on-devices","title":"Why implement an API on Devices?","text":"<p>APIs are fundamental to many services we know an love today</p> <p>They enable access to your device or application in ways that enable you to build new solutions and integrate with a greater world of solutions.</p> Solution Examples"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_intro/#the-four-branches-of-the-roomos-xapi","title":"The Four Branches of the RoomOS xAPI","text":"<p>RoomOS separates the xAPI into 4 major branches</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_intro/#points-of-integration","title":"Points of Integration","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_macros/","title":"Macros <sup><sup>rxp-6</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_macros/#accessing-the-xapi-via-the-macro-editor-section-rxp-6","title":"Accessing the xAPI via the Macro Editor** <sub>(section rxp-6)</sub>","text":"<p>Abstract</p> <p>The Macro Editor is a <code>Web Based IDE</code> that's built into each Cisco Codec running ce9.2.X or higher (excluding the Sx10) that allows for the development of solutions using the Device xAPI and ES6 Javascript. In a sense, the Macro Editor is like a virtual room control processor built right into the product.</p> <p>It's capable of running 10 active macros at any given time and allows for storage of up to 2mb of text across all files (Sounds small, but it's more than you think ).</p> <p>You may have as many inactive macros as you can contain with the 2mb limit, which can be useful for storing information, organizing and modularizing work.</p> <ul> <li>For example, some developers in the community have implemented function libraries formatted as a macro, such as <ul> <li>Gui-Do: A suite of functions that enables dynamic UI generation with the use of JSON Object</li> <li>Audio Zone Manager: Or AZM is a suite of function that enables the mapping of audio microphones inputs to other resources for audio based automation in space.</li> </ul> </li> </ul> <p>Important</p> <p>Note</p> <p>This section is meant to teach your the structure of the xAPI when working the Macro Editor. </p> <p>Though written in Javascript, this is not a javascript tutorial. There are links to relevant topics throughout the section in case you're stuck on any particular topic</p> <p>Part 3: Building a Customization using Macros will leverage the Macro Editor and the UI Extensions of your codec to develop a solution using the xAPI</p> <p>Syntax covered here is not only relevant for the Macro Editor but also the <code>jsxapi</code> Node.Js module which is not covered in this Lab</p> <p>Section Requirements</p> <p>Download the MacroPak below, these Macros will be used throughout this section</p> <ul> <li> <p> Click the icon below to Download the MacroPak </p> <p></p> MacroPak <p></p> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_macros/#enabling-macros-rxp-61","title":"Enabling Macros <sub>(rxp-6.1)</sub>","text":"<ul> <li>Login to your Codec's Web UI</li> <li>Navigate to Settings&gt;Macro Editor<ul> <li>The Macro Editor is disabled by Default, press enable</li> </ul> </li> </ul> Tip <p>Enabling through the WebUI as we had above can be don via the xAPI as well.</p> <p>Running xConfiguration Macros Mode: On does the same thing.</p> <p>You can even run xConfigurations in bulk across your portfolio using Webex Control Hub or Ce-Deploy, both are covered in, regards to Macro Customization, part 4 of this lab.</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_macros/#navigating-the-macro-editor-and-installing-the-macropak-rxp-62","title":"Navigating the Macro Editor and installing the MacroPak <sub>(rxp-6.2)</sub>","text":"Vidcast: Macro Editor IDE Review Vidcast: Installing the MacroPack"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_macros/#executing-xcommands-rxp-63","title":"Executing xCommands <sub>(rxp-6.3)</sub>","text":"Lesson: Execute an xCommand <sub>(rxp-6.3.1)</sub> <p>All device xAPIs are referenced by the imported <code>xapi</code> object. By default, a new Macro will contain</p> xAPI Import<pre><code>import xapi from 'xapi';\n</code></pre> <p>       Learn more about Imports </p> <p>Unlike other ES6 Javascript environments, you only have access to base Javascript functions and techniques as well as the device's xAPI</p> <ul> <li>You're NOT able to import external libraries into this environment.</li> </ul> <p>All xAPI can be accessed by first referencing the <code>xapi</code> object following by the same command path using dot notation</p> <p>Click on the tabs to see how Terminal Syntax relates to Macro Syntax</p> Terminal SyntaxMacro Syntax <pre><code>xCommand Time DateTime Get\n\nOK\n*r DateTimeGetResult (status=OK): \n*r DateTimeGetResult Day: 24\n*r DateTimeGetResult Hour: 0\n*r DateTimeGetResult Minute: 47\n*r DateTimeGetResult Month: 9\n*r DateTimeGetResult Second: 1\n*r DateTimeGetResult Year: 2024\n** end\n</code></pre> <pre><code>import xapi from 'xapi';\n\nxapi.Command.Time.DateTime.Get().then(time =&gt; console.log(time))\n\n/* Log Output\n{\n  \"Day\": \"24\",\n  \"Hour\": \"0\",\n  \"Minute\": \"47\",\n  \"Month\": \"9\",\n  \"Second\": \"44\",\n  \"Year\": \"2024\",\n  \"status\": \"OK\"\n}\n*/\n</code></pre>  Why is <code>.then(time =&gt; console.log(time))</code> trailing the command? <p>Well that's the nature of this environment. In a terminal session, the command is immediately followed by a response</p> <p>But in working with the xAPI in a Macro or <code>jsxapi</code> NodeJs environment, the response is certainly there, but we need to capture in an object and then log it to the console.</p> <p>Most, if not all, functions from the <code>xapi</code> object are Javascript Promises. When executed, they'll either resolve or reject (OK or Error) and you can handle them as you see fit in your automation.</p> <p>       Learn more about Promises </p> To get a bit more technical <p>In the Example above, we first call the <code>xCommand Time DateTime Get</code> command. JS Promises can leverage the <code>.then()</code> method, which allows us to take that value of a successful outcome and store it into another object, in this case <code>time</code>, and when <code>time</code> is populated with a value, we can immediately run a function <code>=&gt;</code> of this value to run additional processes. Here, we pass it into the in-built JS function; <code>console.log</code>, to log it into the Macro's log output.</p> <p>If your function is rejected, then the <code>.catch()</code> method  can handle those outcomes in the same way <code>.then()</code> works on resolutions.</p> <p>Tip</p> <p>Parameters for Macro Syntax are setup as a JSON Object and must be passed into a function as a parameter</p> <p>   Learn more about JSON </p> <p>At a high level, functions defined in the <code>xapi</code> can have 1 or 2 function parameters pass. One being the parameters for the xAPI call writing in a JSON Object [Represented by <code>myChildParams</code> below], the other for multiline content (if available) [Represented by <code>myMultiLineContent</code> below]</p> <p>It's important to note that not all <code>xapi</code> functions have multiline input, but it's good to know where it's placed should there be any</p> Parameter Example <pre><code>import xapi from 'xapi';\n\nconst myChildParams = { Parameter: 'One', Parameter: 2, Parameter: '...' };\nconst myMultiLineContent= `...`;\n\nxapi.Parent.Child(myChildParams, myMultiLineContent);\n</code></pre> <p>       Learn more about Functions </p> <ul> <li> <p>xAPI: xCommand Video Selfview Set</p> </li> <li> <p>Task: </p> <ul> <li>Activate the xCommands_Lesson-1_MacroPak_2-6-3 macro</li> <li>Structure the xAPI Path above using Macro Syntax and apply the following parameters<ul> <li>Mode: On</li> <li>FullScreenMode: On</li> <li>OnMonitorRole: First</li> </ul> </li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xCommands_Lesson-1_MacroPak_2-6-3 macro</p> </li> </ul> View Successful Macro Syntax Simple ExecutionPromises &gt; <code>.then()</code> MethodPromises &gt; Async Await <pre><code>import xapi from 'xapi';\n\nxapi.Config.Video.Selfview.Set({ Mode: \"On\", FullScreenMode: \"On\", OnMonitorRole: \"Off\" });\n</code></pre> <pre><code>import xapi from 'xapi';\n\nxapi.Config.Video.Selfview.Set({ Mode: \"On\", FullScreenMode: \"On\", OnMonitorRole: \"Off\" }).then(resolution =&gt; {\n\n  // Log the xAPI resolution\n  console.log('Config.Video.Selfview.Set Resolution', resolution);\n\n  /* Run Additional Function Here*/\n\n}).catch(error =&gt; {\n\n  // Log the xAPI rejection\n  console.error('Config.Video.Selfview.Set Error', error);\n\n  /* Run Additional Function Here*/\n\n});\n</code></pre> <p>       Learn more about Promises </p> <pre><code>import xapi from 'xapi';\n\nconst setSelfview = async function(parameters =&gt; {\n  try {\n    const runxAPI = await xapi.Config.Video.Selfview.Set(parameters);\n\n    // Log the Resolution captured in a runxAPI object\n    console.log(runxAPI);\n\n    /* Run Additional Function Here*/\n\n  } catch (error) (\n\n    // Log the Rejection captured in a error object\n    console.error(error);\n\n    /* Run Additional Function Here*/\n\n  );\n});\n\n// Run the setSelfview Function and pass in the Parameters for xCommand Video Selfview Set\nsetSelfview({ Mode: \"On\", FullScreenMode: \"On\", OnMonitorRole: \"Off\" });\n</code></pre> <p>       Learn more about Async Functions </p> Lesson: Execute an xCommand with multiple arguments with the same name <sub>(rxp-6.3.2)</sub> <p>In cases where we need to declare multiple arguments of the same name, rather than duplicating and re-running the parameters, we instead leverage Javascript's Array capabilities</p> <p>   Learn more about Arrays </p> <p>Click on the tabs to see how Terminal Syntax relates to Macro Syntax</p> Terminal SyntaxMacro Syntax <p></p><pre><code>xParent Child ChildParam_X: 1, ChildParam_X: 2\n</code></pre> <p></p> <pre><code>import xapi from 'xapi';\n\nxapi.Parent.Child({\n  ChildChildParam_X: [1, 2] // Rather than calling ChildParam_X twice, we'll simply place both values we need into an Array\n})\n</code></pre> <ul> <li> <p>xAPI(s): </p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> </ul> </li> <li> <p>Task: </p> <ul> <li>Activate the xCommands_Lesson-2_MacroPak_2-6-3 macro</li> <li>Structure xCommand Video Input SetMainVideoSource using Macro Syntax and apply the following parameters, but assign the value <code>1</code> to ConnectorId twice</li> <li>ConnectorId: 1</li> <li>Layout: Equal</li> <li>Add this xCommand to the showAndCompose() function</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xCommands_Lesson-2_MacroPak_2-6-3 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n * \n * Lesson 2: Execute an xCommand with multiple arguments with the same name\n */\n\nconst showAndComposeCamera = function () {\n  xapi.Command.Video.Selfview.Set({ Mode: 'On', FullscreenMode: 'On', OnMonitorRole: 'First' });\n\n  // Enter your solution below this line\n  xapi.Command.Video.Input.SetMainVideoSource({\n    ConnectorId: [1, 1],\n    Layout: 'Equal'\n  })\n  // Don't go past this line\n}\n\nshowAndComposeCamera();\n</code></pre> <p>&lt;!-- ??? challenge \"Challenge: Log and Handle Errors\"</p> <pre><code>- Convert the `showAndComposeCamera()` function into an Async Function\n- Wrap all xAPI references in a Try Catch block\n- Add a console log for a Successful outcome\n- Add a console log for an Error\n\n- Save the Macro and observe the log\n\n&lt;a class=\"md-button md-button--primary\" href=\"../challengeAnswers/\" target=\"_blank\" &gt;\n  Giving Up? Check out the Challenge Answers Page &lt;i class=\"fa-solid fa-square-up-right\"&gt;&lt;/i&gt;\n&lt;/a&gt; --&gt;\n</code></pre> Lesson: Execute an xCommand with a multiline argument <sub>(rxp-6.3.3)</sub> <p>Click on the tabs to see how Terminal Syntax relates to Macro Syntax</p> Terminal SyntaxMacro Syntax <p></p><pre><code>[Command Path]\n[Multi Line Content]\n.\n</code></pre> <p></p> <pre><code>import xapi from 'xapi';\n\nconst myChildParams = { Parameter: 'One', Parameter: 2, Parameter: '...' };\nconst myMultiLineContent= `...`;\n\nxapi.Parent.Child(myChildParams, myMultiLineContent);\n</code></pre> <ul> <li> <p>xAPI(s): </p> <ul> <li>xCommand Video Selfview Set</li> <li>xCommand Video Input SetMainVideoSource</li> <li>xCommand UserInterface Extensions Panel Save</li> </ul> </li> <li> <p>Task: </p> <ul> <li>Activate the xCommands_Lesson-3_MacroPak_2-6-3 macro</li> <li>Assign the value <code>wx1_lab_multilineCommand</code> to the myPanelId object</li> <li>Assign the following XML payload to the myUserinterface object     <pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#00FFFF&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [2.6.3]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre></li> <li>Structure xCommand UserInterface Extensions Panel Save using Macro Syntax and apply the following parameters<ul> <li>PanelId [Use the myPanelId object for this field]</li> <li>body [Use the myUserinterfaceXML object for this field] (This is a MultiLine Argument)</li> </ul> </li> <li>Add this xCommand to the buildUserInterface() function</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xCommands_Lesson-3_MacroPak_2-6-3 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n * \n * Lesson 3: Execute an xCommand with a multiline argument\n */\n\n// Assign values to these Objects\nconst myPanelId = 'wx1_lab_multilineCommand';\n\nconst myUserinterfaceXML = `&lt;Extensions&gt;\n      &lt;Panel&gt;\n        &lt;Order&gt;1&lt;/Order&gt;\n        &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n        &lt;Location&gt;HomeScreen&lt;/Location&gt;\n        &lt;Icon&gt;Info&lt;/Icon&gt;\n        &lt;Color&gt;#00FFFF&lt;/Color&gt;\n        &lt;Name&gt;MultiLine Command [2.6.3]&lt;/Name&gt;\n        &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n      &lt;/Panel&gt;\n    &lt;/Extensions&gt;`\n\n\nconst buildUserInterface = async function (){\n  try {\n    // Enter your solution below this line\n\n    const saveUI = await xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: myPanelId }, myUserinterfaceXML)\n\n    // Don't go past this line\n    console.log(`Panel [${myPanelId}] saved to the codec`)\n  } catch (e){\n    console.error(e)\n  }\n}\n\n\nasync function cleanupLesson2(){\n  await xapi.Command.Video.Selfview.Set({Mode: 'Off'});\n  await xapi.Command.Video.Input.SetMainVideoSource({ConnectorId: 1, Layout: 'Equal'});\n}\n\nasync function init(){\n  await cleanupLesson2()\n\n  await buildUserInterface();\n}\n\ninit();\n</code></pre>  Having issues with saving Strings to Objects in your macro? <p>There are 3 ways to define string literals</p> <p></p> Key Name Example Extra Properties <code>'</code> Single Quote <code>const myString = \"It's a sunny day.\"</code> Can encapsulate a string with single quotes <code>'</code> inside <code>\"</code> Double Quote <code>const myOtherString = 'They said, \"Hello!\"';</code> Can encapsulate a string with double quotes <code>\"</code> inside <code>`</code> Backtick Quote <code>const myFinalString = <code>They didn't say \"World\"</code></code> Can encapsulate double and single quotes, allows for multiline strings, allows for string interpolation <p></p> <p>   Learn more about Strings </p> Lesson: Execute an xCommand which generates data and responds <sub>(rxp-6.3.4)</sub> <p>When collecting data from an xCommand in the Macro Editor, you either need to use the <code>.then()</code> method and log that value to the console or use an Async function to capture the value of that xCommand into a object, then log that object</p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions List</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xCommands_Lesson-4_MacroPak_2-6-3 macro</li> <li> <p>Structure xCommand UserInterface Extensions List using Macro Syntax and do 1 of the following</p> <ul> <li> <p>Use <code>.then()</code> to capture the value of xCommand UserInterface Extensions List then log that value to the console</p> <p>Or</p> </li> <li> <p>declare an async function called <code>checkExtensions</code>, place xCommand UserInterface Extensions List written in Macro Syntax</p> <ul> <li>Wrap that in a Try Catch statement</li> <li>Assign the value of the xAPI to an object</li> <li>Then log the value of that object to the console</li> </ul> </li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xCommands_Lesson-4_MacroPak_2-6-3 macro</p> </li> </ul> </li> </ul> <p></p>          Learn more about Promises          Learn more about Async Functions <p></p> View Successful Macro Syntax and Log output Using <code>.then()</code>Using <code>Async Await</code> <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n * \n * Lesson 4: Execute an xCommand which generates data and responds\n */\n\nxapi.Command.UserInterface.Extensions.List().then(ext =&gt; {\n  console.log(ext);\n}).catch(error =&gt; {\n  console.error(error);\n});\n</code></pre> <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#263-executing-xcommands\n * \n * Lesson 4: Execute an xCommand which generates data and responds\n */\n\nconst checkExtensions = async function () {\n\n  try {\n    const getExtensions = await xapi.Command.UserInterface.Extensions.List();\n    console.log(getExtensions);\n  } catch (error) {\n    console.error(error);\n  };\n};\n\ncheckExtensions();\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_macros/#setting-getting-and-subscribing-to-xconfigurations-rxp-64","title":"Setting, Getting and Subscribing to xConfigurations <sub>(rxp-6.4)</sub>","text":"<p>Abstract</p> <p>Getting xConfiguration values, and later on xStatus Values, use the nearly same techniques for xCommands that generate data and respond.</p> <p>However, when Getting an xConfiguration or an xStatus, you'll need to add the <code>.get()</code> method at the end of the xAPI call.</p> <p>Subsequently, when Setting an xConfiguration, you'll need to add the <code>.set()</code> method at the end of the xAPI call.</p> <p>Compare Macro Command vs Config syntax</p> xCommandsxConfigurations GetxConfigurations Set <p>xapi.Command.ChildPath (childParameter, childMultiLine)</p> <p>xapi.Config.ChildPath .get()</p> <p>xapi.Config.ChildPath .get('ChildValue')</p> <p>We'll continue the remainder of the examples with only Async Await syntax, as a best practice, but if you're familiar with <code>.then()</code>, <code>.catch()</code> and <code>.finally()</code> syntax and prefer writing like that, feel free to do so</p> Lesson: Get an xConfiguration Value <sub>(rxp-6.4.1)</sub> <ul> <li> <p>xAPI: xConfig Audio DefaultVolume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-1_MacroPak_2-6-4 macro</li> <li>Modify the <code>getConfigValue()</code> function by replacing the existing value of <code>targetConfig</code> with xConfig Audio DefaultVolume written in Macro Syntax</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-1_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 1: Getting an xConfiguration Value\n */\n\n// Enter your solution below this line\n\n\nconst getConfigValue = async function () {\n  try {\n    // Modify targetConfig below\n\n    const targetConfig = await xapi.Config.Audio.DefaultVolume.get();\n\n    // Don't go past this line\n    console.log('DefaultVolume:', targetConfig)\n  } catch (e) {\n    console.error(e);\n  };\n};\n\ngetConfigValue();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-1_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-1_MacroPak_2-6-4 DefaultVolume: 75 Lesson: Set a new xConfiguration Value <sub>(rxp-6.4.2)</sub> <ul> <li> <p>xAPI: xConfig Audio DefaultVolume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-2_MacroPak_2-6-4 macro</li> <li>Modify the <code>setConfigValue()</code> function by replacing the existing value of <code>targetConfig</code> with xConfig Audio DefaultVolume written in Macro Syntax</li> <li>Instead of hardcoding the value we want to set, place the <code>value</code> parameter into the <code>.set(value)</code> method instead<ul> <li>This will allow us to change this value easier as we call the function in different parts of our script</li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-2_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 2: Set a new xConfiguration Value\n */\n\n// Enter your solution below this line\n\n\nconst setConfigValue = async function (value = 50) {\n  try {\n    // Modify targetConfig below\n\n    const targetConfig = await xapi.Config.Audio.DefaultVolume.set(value);\n\n    // Don't go past this line\n    console.debug('DefaultVolume Set');\n  } catch (e) {\n    console.error(e);\n  };\n};\n\n\nconst getConfigValue = async function () {\n  try {\n    const targetConfig = await xapi.Config.Audio.DefaultVolume.get();\n    console.log('DefaultVolume:', targetConfig);\n  } catch (e) {\n    console.error(e);\n  };\n};\n\nasync function init(){\n\n  await setConfigValue(100); // &lt;-- Change this Value [0-100] and Resave\n\n  await getConfigValue();\n}\n\ninit();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-2_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-2_MacroPak_2-6-4 DefaultVolume: [Some Value] Lesson: Get multiple xConfigurations under a Common Node <sub>(rxp-6.4.3)</sub> <ul> <li> <p>xAPI: xConfig Audio</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-3_MacroPak_2-6-4 macro</li> <li>Modify the <code>getConfigValue()</code> function by replacing the existing value of <code>targetConfig</code> with xConfig Audio written in Macro Syntax</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-3_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 1: Getting an xConfiguration Value\n */\n\n// Enter your solution below this line\n\nconst getConfigValue = async function () {\n  try {\n    // Modify targetConfig below\n\n    const targetConfig = await xapi.Config.Audio.get();\n\n    // Don't go past this line\n    console.log('DefaultVolume:', targetConfig)\n  } catch (e) {\n    console.error(e);\n  };\n};\n\ngetConfigValue();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-3_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-3_MacroPak_2-6-4 <code>{\"DefaultVolume\":\"100\",\"Ethernet\":{\"Encryption\":\"Required\",\"SAPDiscovery\":{\"Address\":\"239.255.255.255\",\"Mode\":\"Off\"}},\"Input\":{\"Ethernet\":[{\"Channel\":[{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"1\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"2\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"3\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"4\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"5\"},{\"Gain\":\"45\",\"Mode\":\"On\",\"Pan\":\"Mono\",\"Zone\":\"1\",\"id\":\"6\"},{\"... And the list goes on\"}],\"EchoControl\":{\"Mode\":\"On\",\"NoiseReduction\":\"On\"},\"Equalizer\":{\"ID\":\"1\",\"Mode\":\"Off\"},\"Mode\":\"On\",\"id\":\"1\"}]}}{...\"And the List Goes On\"}</code> Lesson: Subscribe and Unsubscribe to an xConfiguration <sub>(rxp-6.4.4)</sub> <p>Info</p> <p>Subscriptions in the Macro Editor introduce another method we can append to the end of the path called <code>.on()</code></p> <p><code>.on()</code> allows us to subscribe to any changes in xConfigurations, xStatuses and xEvents until the script has either stopped or until the xAPI path is unsubscribed too</p> <p><code>.on()</code> expect an object, similar to using <code>.then()</code> for you to place the incoming data and run function off of it</p> <p>Click on the tabs to see how Terminal Syntax relates to Macro Syntax</p> Terminal SyntaxMacro Syntax <pre><code>xFeedback Register Configuration/Child/Child\n** end\n\nOK\n*c xConfiguration Child Child Value: 85\n** end\n*c xConfiguration Child Child Value: 44\n** end\n*c xConfiguration Child Child Value: 36\n** end\n</code></pre> <pre><code>import xapi from 'xapi';\n\nxapi.Configuration.Child.Child.on(ChildValue =&gt; {\n  console.log('New ChildValue:', ChildValue);\n});\n\n/* Log Output\nNew ChildValue: 85\nNew ChildValue: 44\nNew ChildValue: 36\n*/\n</code></pre> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-4_MacroPak_2-6-4 macro</li> <li>Modify the <code>subscribeToDefaultVolume</code> object by replacing it's value with xConfig Audio written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToDefaultVolume properly, running subscribeToDefaultVolume() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-4_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 4: Subscribe and Unsubscribe to an xConfiguration\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xConfiguration Subscription\nconst subscribeToDefaultVolume = xapi.Config.Audio.DefaultVolume.on(event =&gt; {\n  console.log('DefaultVolume Set to:', event)\n})\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToDefaultVolume(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"DefaultVolume Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// Here, we're randomly assigning a value between 1 and 100 to the Default Volume, so we can see that configuration on our Subscription\nfunction setRandomDefaultVolume() {\n  const randomValue = Math.floor(Math.random() * 100) + 1;\n\n  xapi.Config.Audio.DefaultVolume.set(randomValue);\n}\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`DefaultVolume Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`DefaultVolume Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nfunction init() {\n  setInterval(() =&gt; {\n    setRandomDefaultVolume();\n  }, 500)\n\n  countdown(delay_in_seconds);\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [5] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 70 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [4] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 48 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 13 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [3] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 92 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 52 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [2] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 46 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 69 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopping in [1] seconds HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 21 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Set to: 57 HH:MM:SS xConfigs_Lesson-4_MacroPak_2-6-4 DefaultVolume Subscription stopped! Lesson: Subscribe and Unsubscribe to Multiple xConfigurations under a Common Node <sub>(rxp-6.4.5)</sub> <p>Info</p> <p>Just like we can subscribe to 1 point of interest in an xConfig branch, we can subscribe to a Higher Common Node as well</p> <p>We'll do so for the Airplay Config section of you codec</p> <ul> <li> <p>xAPI: xConfiguration Video Input Airplay</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xConfigs_Lesson-5_MacroPak_2-6-4 macro</li> <li>Modify the <code>subscribeToAirplay</code> object by replacing it's value with xConfiguration Video Input Airplay written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToAirplay properly, running subscribeToAirplay() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xConfigs_Lesson-5_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#264-setting-getting-and-subscribing-to-xconfigurations\n * \n * Lesson 5: Subscribe and Unsubscribe to Multiple xConfigurations under a Common Node\n */\n\nconst delay_in_seconds = 5;\n\n// Edit this Object to include your xConfiguration Subscription\nconst subscribeToAirplay = xapi.Config.Video.Input.Airplay.on(event =&gt; {\n  console.log('Airplay Changes:', event)\n})\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToAirplay(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"Airplay Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// Here, we're randomly assigning a values to the Airplay config, so we can see that configuration on our Subscription\nfunction setRandomAirplayConfigs() {\n\n  function randomNumber() {\n    return Math.floor(Math.random() * 10);\n  }\n\n  const randomPass = `${randomNumber()}${randomNumber()}${randomNumber()}${randomNumber()}`\n\n  xapi.Config.Video.Input.AirPlay.Mode.set(Math.random() &lt; 0.5 ? \"On\" : \"Off\");\n\n  xapi.Config.Video.Input.AirPlay.Beacon.set(Math.random() &lt; 0.5 ? \"Auto\" : \"Off\");\n\n  xapi.Config.Video.Input.AirPlay.Password.set(randomPass);\n}\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`Airplay Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`Airplay Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nfunction init() {\n  setInterval(() =&gt; {\n    setRandomAirplayConfigs();\n  }, 500)\n\n  countdown(delay_in_seconds);\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [5] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 QJS Ready HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"On\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Beacon\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [4] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"On\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [3] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Beacon\":\"Auto\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [2] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Beacon\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Beacon\":\"Auto\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopping in [1] seconds HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"On\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Mode\":\"Off\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Changes: {\"Password\":\"***\"} HH:MM:SS xConfigs_Lesson-5_MacroPak_2-6-4 Airplay Subscription stopped!"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_macros/#getting-and-subscribing-to-xstatuses-rxp-65","title":"Getting and Subscribing to xStatuses <sub>(rxp-6.5)</sub>","text":"Lesson: Get an xStatus Value <sub>(rxp-6.5.1)</sub> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xStatuses_Lesson-1_MacroPak_2-6-4 macro</li> <li>Modify the <code>getStatusValue()</code> function by replacing the existing value of <code>targetStatus</code> with xStatus Audio Volume written in Macro Syntax</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xStatuses_Lesson-1_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses\n * \n * Lesson 1: Getting an xStatus Value\n */\n\n// Enter your solution below this line\n\nconst getStatusValue = async function () {\n  try {\n    // Modify targetStatus below\n\n    const targetStatus = await xapi.Status.Audio.Volume.get();\n\n    // Don't go past this line\n    console.log('Volume:', targetStatus)\n  } catch (e) {\n    console.error(e);\n  };\n};\n\ngetStatusValue();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xStatuses_Lesson-1_MacroPak_2-6-4 QJS Ready HH:MM:SS xStatuses_Lesson-1_MacroPak_2-6-4 Volume: 50 Lesson: Get multiple xStatuses under a Common Node <sub>(rxp-6.5.2)</sub> <ul> <li> <p>xAPI: xStatus Audio</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xStatuses_Lesson-2_MacroPak_2-6-4 macro</li> <li>Modify the <code>getStatusValue()</code> function by replacing the existing value of <code>targetStatus</code> with xStatus Audio written in Macro Syntax</li> <li> <p>Save your Macro and monitor the Macro Console as well as the Device to see if you had a successful response</p> </li> <li> <p>When Complete, deactivate the xStatuses_Lesson-2_MacroPak_2-6-4 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses\n * \n * Lesson 2: Getting an xStatus Value\n */\n\n// Enter your solution below this line\n\nconst getStatusValue = async function () {\n  try {\n    // Modify targetStatus below\n\n    const targetStatus = await xapi.Status.Audio.get();\n\n    // Don't go past this line\n    console.log(targetStatus)\n  } catch (e) {\n    console.error(e);\n  };\n};\n\ngetStatusValue();\n</code></pre> Timestamp Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xStatuses_Lesson-2_MacroPak_2-6-4 QJS Ready HH:MM:SS xStatuses_Lesson-2_MacroPak_2-6-4 <code>{ \"Devices\": { \"Bluetooth\": { \"ActiveProfile\": \"None\" }, \"HandsetUSB\": { \"ConnectionStatus\": \"NotConnected\", \"Cradle\": \"OnHook\" }, \"HeadsetUSB\": { \"ConnectionStatus\": \"NotConnected\", \"Description\": \"\", \"Manufacturer\": \"\" } }, \"Input\": { \"Connectors\": { \"HDMI\": [ { \"Mute\": \"On\", \"id\": \"1\" } ], \"Microphone\": [ { \"ConnectionStatus\": \"Connected\", \"id\": \"1\" }, { \"ConnectionStatus\": \"NotConnected\", \"id\": \"2\" }, { \"ConnectionStatus\": \"NotConnected\", \"id\": \"3\" } ], \"USBC\": [ { \"Mute\": \"On\", \"id\": \"1\" } ] } } }{...\"And the List Goes On\"}</code> Lesson: Subscribe and Unsubscribe to an xStatus <sub>(rxp-6.5.3)</sub> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xStatuses_Lesson-3_MacroPak_2-6-5 macro</li> <li>Modify the <code>subscribeToVolume</code> object by replacing it's value with xStatus Audio Volume written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToVolume properly, running subscribeToVolume() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro, raise and lower the volume on your Codec and monitor the Macro Console to see if you had a successful response</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xStatuses_Lesson-3_MacroPak_2-6-5 macro</p> </li> </ul> </li> </ul> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses\n * \n * Lesson 3: Subscribe and Unsubscribe to an xStatus\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xStatus Subscription\nconst subscribeToVolume = xapi.Status.Audio.Volume.on(vol =&gt; {\n  console.log('Volume:', vol)\n});\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToVolume(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"Volume Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`Volume Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`Volume Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nfunction init() {\n  countdown(delay_in_seconds);\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [10] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 QJS Ready HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [9] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [8] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [7] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 80 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 85 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [6] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 90 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [5] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 85 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [4] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 80 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [3] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 75 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 70 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [2] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 65 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopping in [1] seconds HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume: 60 HH:MM:SS xStatuses_Lesson-3_MacroPak_2-6-5 Volume Subscription stopped! Lesson: Subscribe and Unsubscribe to Multiple xStatuses under a Common Node <sub>(rxp-6.5.4)</sub> <ul> <li> <p>xAPI: xStatus Cameras Camera[N] Position</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xStatuses_Lesson-4_MacroPak_2-6-5 macro</li> <li>Modify the <code>subscribeToCameraPositions</code> object by replacing it's value with xStatus Cameras Camera[N] Position written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToCameraPositions properly, running subscribeToCameraPositions() will stop your active subscription</li> </ul> </li> <li> <ul> <li>Access the Codec's Control Panel on it's touch interface</li> <li>Select Cameras</li> <li>Select Manual</li> <li>Then use the Control Wheel, Zoom In (+) and and Zoom out (-) buttons and observe your Macro Log output</li> </ul> <p>Save your Macro, and perform the following steps</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xStatuses_Lesson-4_MacroPak_2-6-5 macro</p> </li> </ul> </li> </ul> Accessing the Camera Menu <p></p> <p></p> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#265-getting-and-subscribing-to-xstatuses\n * \n * Lesson 4: Subscribe and Unsubscribe to Multiple xStatuses under a Common Node\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xStatus Subscription\nconst subscribeToCameraPositions = xapi.Status.Cameras.Camera.Position.on(event =&gt; {\n  console.log(event)\n});\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToCameraPositions(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"CameraPositions Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`CameraPositions Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`CameraPositions Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nfunction init() {\n  countdown(delay_in_seconds);\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [10] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 QJS Ready HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Zoom\":\"4295\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [9] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Zoom\":\"5662\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [8] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"-65\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [7] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"-64\",\"Tilt\":\"123\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [6] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"-61\",\"Tilt\":\"-20\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"-24\",\"Tilt\":\"-19\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [5] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Tilt\":\"47\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [4] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Zoom\":\"4384\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [3] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Tilt\":\"-14\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [2] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 {\"Pan\":\"14\"} HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopping in [1] seconds HH:MM:SS xStatuses_Lesson-4_MacroPak_2-6-5 CameraPositions Subscription stopped!"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_macros/#subscribing-to-xevents-rxp-66","title":"Subscribing to xEvents <sub>(rxp-6.6)</sub>","text":"Lesson: Subscribe and Unsubscribe to an xEvent <sub>(rxp-6.6.1)</sub> <ul> <li> <p>xAPI: xEvent UserInterface Extensions Widget Action</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xEvents_Lesson-1_MacroPak_2-6-6 macro</li> <li>Modify the <code>subscribeToWidgetActions</code> object by replacing it's value with xEvent UserInterface Widget Action written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToWidgetActions properly, running subscribeToWidgetActions() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro, open the MultiLine Command [2.6.6] Panel on your Codec's touch interface, press one or more of the buttons and observe the Macro Log Output</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xEvents_Lesson-1_MacroPak_2-6-6 macro</p> </li> </ul> </li> </ul> Open the MultiLine Command [2.6.6] Panel <p></p> <p></p> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#266-subscribing-to-xevents\n * \n * Lesson 1: Subscribe and Unsubscribe to an xEvent\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xEvent Subscription\nconst subscribeToWidgetActions = xapi.Event.UserInterface.Extensions.Widget.Action.on(event =&gt; {\n  console.log(event)\n});\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToWidgetActions(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"WidgetActions Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`WidgetActions Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`WidgetActions Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nconst myPanelId = 'wx1_lab_multilineCommand';\n\nconst myUserinterfaceXML = `&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FC5143&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [2.6.6]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n    &lt;Page&gt;\n      &lt;Name&gt;Page&lt;/Name&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Buttons&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_GroupButton&lt;/WidgetId&gt;\n          &lt;Type&gt;GroupButton&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n          &lt;ValueSpace&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_A&lt;/Key&gt;\n              &lt;Name&gt;A&lt;/Name&gt;\n            &lt;/Value&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_B&lt;/Key&gt;\n              &lt;Name&gt;B&lt;/Name&gt;\n            &lt;/Value&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_C&lt;/Key&gt;\n              &lt;Name&gt;C&lt;/Name&gt;\n            &lt;/Value&gt;\n          &lt;/ValueSpace&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_TextButton&lt;/WidgetId&gt;\n          &lt;Name&gt;Text&lt;/Name&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=1&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_IconButton&lt;/WidgetId&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=1;icon=green&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_SpinnerButton&lt;/WidgetId&gt;\n          &lt;Type&gt;Spinner&lt;/Type&gt;\n          &lt;Options&gt;size=2&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Control Wheel&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_ControlWheel&lt;/WidgetId&gt;\n          &lt;Type&gt;DirectionalPad&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Toggle and Slider&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_Toggle&lt;/WidgetId&gt;\n          &lt;Type&gt;ToggleButton&lt;/Type&gt;\n          &lt;Options&gt;size=1&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_Slider&lt;/WidgetId&gt;\n          &lt;Type&gt;Slider&lt;/Type&gt;\n          &lt;Options&gt;size=3&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Options/&gt;\n    &lt;/Page&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;`\n\n\nconst buildUserInterface = async function () {\n  try {\n    const saveUI = await xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: myPanelId }, myUserinterfaceXML)\n    console.log(`Panel [${myPanelId}] saved to the codec`)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nfunction init() {\n  countdown(delay_in_seconds);\n\n  buildUserInterface()\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 QJS Ready HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [10] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"GroupButton_A\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"GroupButton_A\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"GroupButton_B\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [9] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 Panel [wx1_lab_multilineCommand] saved to the codec HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"GroupButton_B\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"GroupButton_C\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"GroupButton_C\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [8] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"\",\"WidgetId\":\"wx1_TextButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"\",\"WidgetId\":\"wx1_TextButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"\",\"WidgetId\":\"wx1_TextButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [7] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [6] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [5] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"increment\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"increment\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"increment\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [4] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"up\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"up\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"up\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"left\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [3] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"left\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"left\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [2] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"pressed\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"released\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"clicked\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopping in [1] seconds HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 {\"Type\":\"changed\",\"Value\":\"off\",\"WidgetId\":\"wx1_Toggle\",\"id\":\"1\"} HH:MM:SS xEvents_Lesson-1_MacroPak_2-6-6 WidgetActions Subscription stopped! Lesson: Subscribe and Unsubscribe to Multiple xEvents under a Common Node <sub>(rxp-6.6.2)</sub> <ul> <li> <p>xAPI: xEvent UserInterface Extensions</p> </li> <li> <p>Task:</p> <ul> <li>Activate the xEvents_Lesson-1_MacroPak_2-6-6 macro</li> <li>Modify the <code>subscribeToAllExtensions</code> object by replacing it's value with xEvent UserInterface written in Macro Syntax using the <code>.on()</code> method<ul> <li>In order to unsubscribe, we need to assign our xAPI subscription to an object, so we can later call it, which will end it's subscription</li> <li>For example, after you assign the subscribeToAllExtensions properly, running subscribeToAllExtensions() will stop your active subscription</li> </ul> </li> <li> <p>Save your Macro, open the MultiLine Command [2.6.6] Panel on your Codec's touch interface, press one or more of the buttons and observe the Macro Log Output</p> <ul> <li>NOTE: This macro will automatically unsubscribe for you. Review those steps, to get a better understand as to how we unsubscribe.</li> </ul> </li> <li> <p>When Complete, deactivate the xEvents_Lesson-1_MacroPak_2-6-6 macro</p> </li> </ul> </li> </ul> Open the MultiLine Command [2.6.6] Panel <p></p> <p></p> View Successful Macro Syntax and Log output MacroLog Output <pre><code>import xapi from 'xapi';\n\n/**\n * Lab Guide: https://webexcc-sa.github.io/LAB-1451/wx1_1451_part_2/#266-subscribing-to-xevents\n * \n * Lesson 2: Subscribe and Unsubscribe to Multiple xEvents under a Common Node\n*/\n\nconst delay_in_seconds = 10;\n\n// Edit this Object to include your xEvent Subscription\nconst subscribeToAllExtensions = xapi.Event.UserInterface.Extensions.on(event =&gt; {\n  console.log(event)\n});\n\n// Do not edit past this line, but feel free to review what's going on :)\n\n// Here, we use JS Timeouts to set an action to run after X seconds. Timeouts use milliseconds, hence why we multiply by 1000\nsetTimeout(() =&gt; {\n\n  subscribeToAllExtensions(); //&lt;-- By calling the Object we assigned our Subscription too as a function(), we will unsubscribe from it\n\n  console.warn(\"AllExtensions Subscription stopped!\");\n\n}, delay_in_seconds * 1000)\n\n\n// This countdown is used to help you visualize when the process will complete it's course\n// We use console.warn to have this countdown print in another color in the Macro Console\nfunction countdown(startNumber) {\n  let currentNumber = startNumber;\n\n  console.warn(`AllExtensions Subscription stopping in [${currentNumber}] seconds`);\n\n  const interval = setInterval(() =&gt; {\n    currentNumber--;\n    if (currentNumber &gt; 0) {\n      console.warn(`AllExtensions Subscription stopping in [${currentNumber}] seconds`);\n    }\n\n    if (currentNumber &lt; 1) {\n      clearInterval(interval);\n    }\n  }, 1000);\n}\n\nconst myPanelId = 'wx1_lab_multilineCommand';\n\nconst myUserinterfaceXML = `&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FF6F20&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [2.6.6]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n    &lt;Page&gt;\n      &lt;Name&gt;Page&lt;/Name&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Buttons&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_GroupButton&lt;/WidgetId&gt;\n          &lt;Type&gt;GroupButton&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n          &lt;ValueSpace&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_A&lt;/Key&gt;\n              &lt;Name&gt;A&lt;/Name&gt;\n            &lt;/Value&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_B&lt;/Key&gt;\n              &lt;Name&gt;B&lt;/Name&gt;\n            &lt;/Value&gt;\n            &lt;Value&gt;\n              &lt;Key&gt;GroupButton_C&lt;/Key&gt;\n              &lt;Name&gt;C&lt;/Name&gt;\n            &lt;/Value&gt;\n          &lt;/ValueSpace&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_TextButton&lt;/WidgetId&gt;\n          &lt;Name&gt;Text&lt;/Name&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=1&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_IconButton&lt;/WidgetId&gt;\n          &lt;Type&gt;Button&lt;/Type&gt;\n          &lt;Options&gt;size=1;icon=green&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_SpinnerButton&lt;/WidgetId&gt;\n          &lt;Type&gt;Spinner&lt;/Type&gt;\n          &lt;Options&gt;size=2&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Control Wheel&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_ControlWheel&lt;/WidgetId&gt;\n          &lt;Type&gt;DirectionalPad&lt;/Type&gt;\n          &lt;Options&gt;size=4&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Row&gt;\n        &lt;Name&gt;Toggle and Slider&lt;/Name&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_Toggle&lt;/WidgetId&gt;\n          &lt;Type&gt;ToggleButton&lt;/Type&gt;\n          &lt;Options&gt;size=1&lt;/Options&gt;\n        &lt;/Widget&gt;\n        &lt;Widget&gt;\n          &lt;WidgetId&gt;wx1_Slider&lt;/WidgetId&gt;\n          &lt;Type&gt;Slider&lt;/Type&gt;\n          &lt;Options&gt;size=3&lt;/Options&gt;\n        &lt;/Widget&gt;\n      &lt;/Row&gt;\n      &lt;Options/&gt;\n    &lt;/Page&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;`\n\n\nconst buildUserInterface = async function () {\n  try {\n    const saveUI = await xapi.Command.UserInterface.Extensions.Panel.Save({ PanelId: myPanelId }, myUserinterfaceXML)\n    console.log(`Panel [${myPanelId}] saved to the codec`)\n  } catch (e) {\n    console.error(e)\n  }\n}\n\nfunction init() {\n  countdown(delay_in_seconds);\n\n  buildUserInterface()\n}\n\ninit();\n</code></pre> Time Source Message HH:MM:SS [system] Runtime stopped! HH:MM:SS [system] Using XAPI transport: WebSocket HH:MM:SS [system] Starting macros... HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [10] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 QJS Ready HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 Panel [wx1_lab_multilineCommand] saved to the codec HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"LayoutUpdated\":{\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Panel\":{\"Clicked\":{\"PanelId\":\"wx1_lab_multilineCommand\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [9] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [8] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_GroupButton:GroupButton_A\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"GroupButton_A\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_GroupButton:GroupButton_A\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"GroupButton_A\",\"WidgetId\":\"wx1_GroupButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [7] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Clicked\":{\"Signal\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"clicked\",\"Value\":\"\",\"WidgetId\":\"wx1_IconButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [6] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_ControlWheel:center\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_ControlWheel:center\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Clicked\":{\"Signal\":\"wx1_ControlWheel:center\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"clicked\",\"Value\":\"center\",\"WidgetId\":\"wx1_ControlWheel\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [5] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [4] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_Slider:188\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"188\",\"WidgetId\":\"wx1_Slider\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Changed\":{\"Signal\":\"wx1_Slider:98\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"changed\",\"Value\":\"98\",\"WidgetId\":\"wx1_Slider\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Changed\":{\"Signal\":\"wx1_Slider:98\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"changed\",\"Value\":\"98\",\"WidgetId\":\"wx1_Slider\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_Slider:98\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"98\",\"WidgetId\":\"wx1_Slider\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [3] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Changed\":{\"Signal\":\"wx1_Toggle:on\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"changed\",\"Value\":\"on\",\"WidgetId\":\"wx1_Toggle\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [2] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Pressed\":{\"Signal\":\"wx1_SpinnerButton:decrement\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"pressed\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopping in [1] seconds HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Released\":{\"Signal\":\"wx1_SpinnerButton:decrement\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"released\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Event\":{\"Clicked\":{\"Signal\":\"wx1_SpinnerButton:decrement\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 {\"Widget\":{\"Action\":{\"Type\":\"clicked\",\"Value\":\"decrement\",\"WidgetId\":\"wx1_SpinnerButton\",\"id\":\"1\"},\"id\":\"1\"},\"id\":\"1\"} HH:MM:SS xEvents_Lesson-2_MacroPak_2-6-6 AllExtensions Subscription stopped!"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_serial/","title":"Rxp xapi serial","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/","title":"SSH <sup><sup>rxp-1</sup></sup>","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#access-roomos-xapi-via-ssh-section-rxp-1","title":"Access RoomOS xAPI via SSH <sub>(section rxp-1)</sub>","text":"<p>Abstract</p> <p>In this section, we'll dive into the various pieces of the RoomOS Device xAPI stack and how to make use of them in various ways over a Secure Shell (SSH) Session to a Cisco RoomOS Device.</p> <p>Understanding how to navigate a terminal session with the a Cisco RoomOS Device will be instrumental in your device management and customization journey, but it's also a key integration pillar for many services on the market, such as a room control processors (Crestron, Extron, Etc) and</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#section-rxp-1-requirements","title":"Section rxp-1 Requirements","text":"<p>Note</p> <p>This lab assumes you have access to a Cisco RoomOS Device that is already setup and ready for use. If your device is not registered and online, please do so before beginning</p> <p>Hardware</p> <ul> <li>A Laptop</li> <li>A Cisco Desk, Board or Room Series Device running the most recent On Premise or Cloud Stable software<ul> <li>A Touch Controller is required when working on a Room Series Device. Either Room navigator or 3rd part touch display</li> <li>Preferred Device: Cisco Desk Pro</li> </ul> </li> <li>A minimum of 1 camera (Either Integrated or External)</li> </ul> <p>Software</p> <ul> <li>Laptop<ul> <li>Recommended Browser: Chrome or Firefox</li> <li>Recommended Terminal Software:<ul> <li>Command Prompt (Windows)</li> <li>Terminal (MAC)</li> <li>Putty (Windows)</li> <li>Termius (Windows, MAC, Linux)</li> </ul> </li> </ul> </li> <li>RoomOS Device<ul> <li>Either the current On Premise or Cloud Stable release</li> </ul> </li> </ul> <p>Network</p> <ul> <li>Local Access to the RoomOS Device over port 22</li> <li>General access to the Internet</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#establish-ssh-connection-to-device-rxp-11","title":"Establish SSH Connection to Device <sub>(rxp-1.1)</sub>","text":"<ul> <li>Open the Terminal application on your device</li> <li>Connect to the Device via SSH using the built in OpenSSH platform in your terminal window</li> </ul> <p>Note</p> <p>Replace <code>[USERNAME]</code> with your Codec's Username and <code>[IP_ADDRESS]</code> with your Codec's IPv4 address that you set in section[X.X.X]</p> <p>Type into terminal and press Enter</p> <p></p><pre><code>ssh [ROOMOS_USERNAME]@[ROOMOS_IP_ADDRESS]</code></pre> <p></p> If you encountered an warning running the command above, click here <p>If you encounter the following warning</p> <pre><code>ssh [USERNAME]@[IP_ADDRESS]   \n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the RSA key sent by the remote host is\nSHA256:############################################\nPlease contact your system administrator.\nAdd correct host key in [PATH]/.ssh/known_hosts to get rid of this message.\nOffending RSA key in [PATH]/.ssh/known_hosts:##\nHost key for [IP_ADDRESS] has changed and you have requested strict checking.\nHost key verification failed.\n</code></pre> <p>Double Check your device information and try again, if the information you entered is correct, try the following</p> <p>Then run the following command to clear an old SSH Sha Key Be sure to replace <code>[IP_ADDRESS]</code> with your Codec's IPv4</p> Type into terminal and press Enter<pre><code>ssh-keygen -R [IP_Address]\n</code></pre> <p></p> <ul> <li>The OpenSSH platform will ask for you to confirm the device before connecting<ul> <li>Type <code>yes</code> when prompted into the terminal, then hit enter</li> <li>Type the <code>[USERNAME]</code> account password into the terminal when prompted, then hit enter</li> </ul> </li> </ul> <p>Successfully connecting to the Codec should prompt the following information and is now awaiting your input</p> <pre><code>Welcome to  \nCisco Codec Release RoomOS [Codec_Software_Version]\nSW Release Date: [Codec_Software_ReleaseDate]\n*r Login successful\nOK\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#navigating-the-terminal-rxp-12","title":"Navigating the Terminal <sub>(rxp-1.2)</sub>","text":"<p>Abstract</p> <p>In a terminal session with a Cisco Codec, you can execute commands, get, set or subscribe to configs, get or subscribe to status information as well as subscribe to events.</p> <p>These are especially useful when developing a customization or troubleshooting a system.</p> <p>Click to expand each lesson below, execute the contents as directed in your terminal session and observe the responses in the terminal window.</p> Lesson: Lists All User Command Nodes <sub>(rxp-1.2.1)</sub> Type into terminal and press Enter<pre><code>?\n</code></pre> Compare your Terminal Output <p></p><pre><code>- User Commands -\nhelp            xcommand        xconfiguration  xdocument       xevent\nxfeedback       xgetxml         xpreferences    xstatus         xtransaction\nbye             echo            log             systemtools\nOK\n</code></pre><p></p> <p>We won't cover every shell command above, we'll only focus on xConfigurations, xCommands, xStatuses, xEvents and xFeedback as those contain all the Device xAPI references we need to develop a custom solution. But we'll also take a brief stop at xPreferences as it's important for SSH and Serial based integrations.</p> <p>For more information on the rest of those paths, check out the Offical xAPI Guide.Page 33 defines all nodes</p> Lesson: Lists Terminal Preference Option <sub>(rxp-1.2.2)</sub> <ul> <li>Lists Terminal Preference Options</li> <li>The xPreferences command is used to set preferences for the RS-232 and SSH sessions. </li> </ul> Type into terminal and press Enter<pre><code>xpref ?\n</code></pre> Compare your Terminal Output <pre><code>xpreferences usage:\n  xpreferences outputmode &lt;terminal/xml/json&gt;\nOK\n</code></pre> <p>Setting <code>xpreferences outputmode</code> to JSON will change the terminal response output into a JSON format and likewise with XML</p> <p>Why might you consider JSON or XML? </p> <ul> <li>Your customization environment may be able to handle responses from the xAPI more efficiently if it's in an output format that easier for your environment to ingest</li> <li>For testing, we'd recommend the terminal format, but when interfacing via a Room Control Processor or another service, you may have tools available to you to parse either JSON or XML to optimize you solution</li> </ul> Click Here to review different Output Mode responses TerminalXMLJSON <pre><code>xpref outputmode terminal\n\nOK\nxStatus Audio Volume            \n*s Audio Volume: 50\n** end\n\nOK\n</code></pre> <pre><code>xpref outputmode xml \nxStatus Audio Volume\n&lt;XmlDoc resultId=\"\"&gt;\n&lt;Status&gt;\n  &lt;Audio&gt;\n    &lt;Volume&gt;50&lt;/Volume&gt;\n  &lt;/Audio&gt;\n&lt;/Status&gt;\n&lt;/XmlDoc&gt;\n</code></pre> <pre><code>xpref outputmode json    \nxStatus Audio Volume\n{\n  \"Status\": {\n    \"Audio\": {\n      \"Volume\": {\n        \"Value\": \"50\"\n      }\n    }\n  }\n}\n</code></pre> Lesson: List Device Command Node References <sub>(rxp-1.2.3)</sub> Type into terminal and press Enter<pre><code>xCommand ?\n</code></pre> Click to Compare your Terminal Output <pre><code>- User Commands -\n\nAirPlay          HttpClient       Provisioning     UserInterface    \nAudio            HttpFeedback     Proximity        UserManagement   \nBookings         Logging          RemoteAccess     UserPresence     \nCall             Macros           RoomCleanup      Video            \nCallHistory      Message          RoomPreset       WebEngine        \nCamera           MicrosoftTeams   Security         Webex            \nCameras          Network          SerialPort       WebRTC           \nConference       Peripherals      Standby          Whiteboard       \nDiagnostics      Phonebook        SystemUnit       Zoom             \nDial             Presentation     Time             \n\nOK\n</code></pre> Lesson: List Device Status Node References <sub>(rxp-1.2.4)</sub> Type into terminal and press Enter<pre><code>xStatus ?\n</code></pre> Click to Compare your Terminal Output <pre><code>- Status -\n\nAudio             ICE               Proximity         Time              \nBookings          Logging           RemoteAccess      UserInterface     \nCall              MediaChannels     RoomAnalytics     Video             \nCameras           MicrosoftTeams    RoomPreset        WebEngine         \nCapabilities      Network           SIP               Webex             \nConference        NetworkServices   Standby           WebRTC            \nDiagnostics       Peripherals       SystemUnit        \nHttpFeedback      Provisioning      ThousandEyes      \n\nOK\n</code></pre> Lesson: List Device Config Node References <sub>(rxp-1.2.5)</sub> Type into terminal and press Enter<pre><code>xConfiguration ?\n</code></pre> Info <pre><code>- User Configurations -\n\nApps              Logging           RoomAnalytics     ThousandEyes      \nAudio             Macros            RoomCleanup       Time              \nBookings          MicrosoftTeams    RoomScheduler     UserInterface     \nCallHistory       Network           RTP               UserManagement    \nCameras           NetworkServices   Security          Video             \nConference        Peripherals       Sensors           VoiceControl      \nFacilityService   Phonebook         SerialPort        WebEngine         \nFiles             Provisioning      SIP               Webex             \nHttpClient        Proximity         Standby           WebRTC            \nHttpFeedback      RemoteAccess      SystemUnit        Zoom              \n\nOK\n</code></pre> Lesson: List Device Event Node References <sub>(rxp-1.2.6)</sub> Type into terminal and press Enter<pre><code>xEvent ?\n</code></pre> Click to Compare your Terminal Output <pre><code>xEvent ?\n** end\n\nOK\n</code></pre>  The output of <code>xEvent ?</code> was not what you expected? <p>Try Removing the <code>?</code> from <code>xEvent</code> and re-run the command</p> Type into terminal and press Enter<pre><code>xEvent\n</code></pre> Compare your Terminal Output <pre><code>xEvent  \n*es Event Audio Input Connectors Ethernet SubId LoudspeakerActivity\n*es Event Audio Input Connectors Ethernet SubId NoiseLevel\n*es Event Audio Input Connectors Ethernet SubId PPMeter\n*es Event Audio Input Connectors Ethernet SubId VuMeter\n*es Event Audio Input Connectors HDMI Left PPMeter\n*es Event Audio Input Connectors HDMI Left VuMeter\n*es Event Audio Input Connectors HDMI Right PPMeter\n*es Event Audio Input Connectors HDMI Right VuMeter\n*es Event Audio Input Connectors Line PPMeter\n*es Event Audio Input Connectors Line VuMeter\n[... And the list goes on]\nOK\n</code></pre> <p>All parent branches of the xAPI (TC, CE, and now RoomOS) have been in production for many years. The xEvent branch serves as a reminder that, as developers, we sometimes make decisions early on that have lasting effects. While there are differences in this branch that were introduced during earlier development, we have chosen to preserve them to ensure backwards compatibility with existing integrations. This approach helps avoid major disruptive changes for our community and supports solutions that are still in use today </p> Lesson: Search for an xAPI using a Wildcard <code>//</code> <sub>(rxp-1.2.7)</sub> Type into terminal and press Enter<pre><code>xConfiguration // Name ?\n</code></pre> Click to Compare your Terminal Output <p>Note</p> <p>You can also place a wildcard in multiple places within a path</p> <pre><code>xConfiguration // Video // Name ?\n</code></pre> <pre><code>xConfiguration // Name ?\n*? xConfiguration FacilityService Service[1] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration FacilityService Service[2] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration FacilityService Service[3] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration FacilityService Service[4] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration FacilityService Service[5] Name: &lt;S: 0, 1024&gt;\n*? xConfiguration Network[1] DNS Domain Name: &lt;S: 0, 64&gt;\n*? xConfiguration SystemUnit Name: &lt;S: 0, 50&gt;\n*? xConfiguration UserInterface NameAndSiteLabels Mode: &lt;Auto, Hidden&gt;\n*? xConfiguration UserInterface Theme Name: &lt;Auto, Light, Night&gt;\n*? xConfiguration Video Input Connector[1] Name: &lt;S: 0, 50&gt;\n*? xConfiguration Video Input Connector[2] Name: &lt;S: 0, 50&gt;\n*? xConfiguration Video Input Connector[3] Name: &lt;S: 0, 50&gt;\n*? xConfiguration Video Input Connector[4] Name: &lt;S: 0, 50&gt;\n\nOK\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#executing-commands-rxp-13","title":"Executing Commands <sub>(rxp-1.3)</sub>","text":"<p>xCommands</p> <p>Commands instruct the device to execute actions, such as to dial a number or to search the phone book. All commands start with the prefix xCommand followed by a command path</p> <p>Click to expand each xCommand Lesson below, execute each Task in your terminal session as instructed and observe the responses in your terminal window as well as observe what happens to your Cisco RoomOS Device after each command is run</p> Lesson: Execute an xCommand <sub>(rxp-1.3.1)</sub> <ul> <li> <p>xAPI: xCommand Video SelfView Set</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xCommand Video SelfView Set Mode: On FullscreenMode: On OnMonitorRole: First\n</code></pre> <ul> <li> <p>Observe the change to your Codec's Display, you should see your camera's SelfView Video in Full Screen on the OSD of your device.</p> <ul> <li>If your video is blank, make sure your device's camera cover(if available) is not closed</li> </ul> </li> </ul> Type into terminal and press Enter<pre><code>xCommand Video SelfView Set Mode: On FullscreenMode: Off\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see your camera feed in a Picture in Picture(PIP) Window</li> </ul> Type into terminal and press Enter<pre><code>xCommand Video SelfView Set Mode: Off\n</code></pre> <ul> <li>Now your camera video should be closed</li> </ul> </li> </ul> Additional Info <p>Notice when we set the Mode parameter to On we included the FullScreenMode and OnMonitorRole parameters, but when we decided to set FullScreenMode Off, we left out OnMonitorRole.</p> <p>These are what's known as Optional Parameters, which are parameter's that are not required to be added in order to execute a command. These optional parameters have a default value that may or may not be applied and this is largely determined by the independent xAPI itself. You may also have Required Parameters. Required parameters must be run or else the xCommand will error out in the console and these required parameters are specifically called out in the documentation for the API.</p> <p>As you explore the API, feel free to click on the xAPI link at the bottom of each lesson to Learn more about the xAPI you're working with.</p> <p>xCommand Video SelfView Set</p> Lesson: Execute an xCommand with multiple arguments with the same name <sub>(rxp-1.3.2)</sub> <ul> <li> <p>xAPI(s):</p> <ul> <li>xCommand Video SelfView Set</li> <li>xCommand Video Input SetMainVideoSource</li> </ul> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xCommand Video SelfView Set Mode: On FullscreenMode: On\n</code></pre> Type into terminal and press Enter<pre><code>xCommand Video Input SetMainVideoSource ConnectorId: 1 ConnectorId: 1\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see 2 instances of your camera feed spread equally in FullScreen</li> </ul> Additional Info <ul> <li> <p>xCommand Video Input SetMainVideoSource, and other xAPIs like it offer some parameters that allow you to enter them in multiple times. Notice how we used ConnectorId: 1 twice. This will create a 2x1 composition of your first video input connector and set this as your MainSource by default. This will effect SelfView and what you output on the far end of the Video Call.</p> </li> <li> <p>Even though it's NOT practical to send a duplicate camera source into a call as we are now, it allows us a chance to interact with this xAPI and understand how it operates. This xAPI in particular was built to handle multiple video source inputs. For instance, if you had a Room Kit EQ with 4 cameras connected, you can compose all 4 cameras as apart of your MainSource, giving you an opportunity to visually communicate to the Far End in new ways</p> </li> </ul> View Successful OSD Output <p></p> <p></p> Type into terminal and press Enter<pre><code>xCommand Video Input SetMainVideoSource ConnectorId: 1 ConnectorId: 1 Layout: PIP\n</code></pre> <ul> <li>Observe the change to your Codec's Display, you should see 2 instances of your camera feed, 1 FullScreen and another in a PIP window</li> </ul> Additional Info <p>xCommand Video Input SetMainVideoSource has more than one parameter we can use to alter the composition in our MainSource. By default, the Layout parameter is set to a value of Equal, but we could opt for PIP or Prominent as Layout values as well.</p> View Successful OSD Output <p>Successful execution of this command, with PIP set as the Layout, will look similar to image below</p> <p></p> <p></p> <ul> <li>Lets wrap this lesson up by setting your MainSource back to a single connector and disabling SelfView</li> </ul> Type into terminal and press Enter<pre><code>xCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Video SelfView Set Mode: Off\n</code></pre> <ul> <li>Observe the change to your Codec's Display, your SelfView should be gone now</li> </ul> </li> </ul> <p>xCommand Video SelfView Set xCommand Video Input SetMainVideoSource</p> Lesson: Execute an xCommand with a multiline argument  <sub>(rxp-1.3.3)</sub> <p>Info</p> <p>Some commands require a larger body of data. This data is written as a large string; some written in a variety of formats and this format is outlined by the individual xAPI's documentation</p> <p>When working in a terminal window, multiline commands are formatted as follows:</p> Base StructureFull xAPI Example <pre><code>[Command Path]          # Your xCommand Path to run\n[Multi Line Content]    # Your Multi Line content (Body)\n.                       # Terminate your Multi Line content with a dot .\n</code></pre> <pre><code>xCommand Macros Macro Save Name: Test   # Your xCommand Path to run\nimport xapi from 'xapi';                # Your Multi Line content (Body)\n\nconsole.log('Hello World');\n.                                       # Terminate your Multi Line content with a dot .\n</code></pre> <p>Note</p> <p>The command should be terminated with a dot . on the third line to indicate the command is complete</p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions Panel Save</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xCommand UserInterface Extensions Panel Save PanelId: wx1_lab_multilineCommand\n&lt;Extensions&gt;&lt;Panel&gt;&lt;Order&gt;1&lt;/Order&gt;&lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;&lt;Location&gt;HomeScreen&lt;/Location&gt;&lt;Icon&gt;Info&lt;/Icon&gt;&lt;Color&gt;#1170CF&lt;/Color&gt;&lt;Name&gt;MultiLine Command [Section (rxp-1.3)]&lt;/Name&gt;&lt;ActivityType&gt;Custom&lt;/ActivityType&gt;&lt;/Panel&gt;&lt;/Extensions&gt;\n.\n</code></pre> </li> <li> <p>Observe the change to your Codec's Display, you should see a new Panel Button labeled <code>MultiLine Command [Section (rxp-1.3)]</code> on your Touch Control interface</p> </li> </ul> View Successful OSD output <p></p> <p></p> <p>xCommand UserInterface Extensions Panel Save</p> Lesson: Execute an xCommand which generates data and responds  <sub>(rxp-1.3.4)</sub> <p>Info</p> <p>Some commands will generate data and output a response of that data. All commands will respond with either \"OK\" or \"Error\" but other commands can provide additional information.</p> <ul> <li> <p>xAPI: xCommand Extensions List</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xCommand UserInterface Extensions List ActivityType: Custom\n</code></pre> </li> <li> <p>Observe your Terminal Window's output, you should see details of both the <code>MultiLine Command [Section (rxp-1.3)]</code> panel you loaded in previously as well as the <code>Subscription Assistant</code> panel details</p> </li> </ul> Click to Compare your Terminal Output <pre><code>OK\n*r ExtensionsListResult (status=OK): \n*r ExtensionsListResult Extensions Version: \"1.11\"\n*r ExtensionsListResult Extensions Panel 1 Icon: Custom\n*r ExtensionsListResult Extensions Panel 1 Location: HomeScreenAndCallControls\n*r ExtensionsListResult Extensions Panel 1 ActivityType: Custom\n*r ExtensionsListResult Extensions Panel 1 Name: \"Subscription Assistant [Lab 1451]\"\n*r ExtensionsListResult Extensions Panel 1 PanelId: \"wx1_1451_pt2_labBuddy\"\n*r ExtensionsListResult Extensions Panel 1 Origin: local\n*r ExtensionsListResult Extensions Panel 1 Order: 99\n[...]\n*r ExtensionsListResult Extensions Panel 2 Icon: Info\n*r ExtensionsListResult Extensions Panel 2 Location: HomeScreen\n*r ExtensionsListResult Extensions Panel 2 ActivityType: Custom\n*r ExtensionsListResult Extensions Panel 2 Name: \"MultiLine Command [Section (rxp-1.3)]\"\n*r ExtensionsListResult Extensions Panel 2 PanelId: \"wx1_lab_multilineCommand\"\n*r ExtensionsListResult Extensions Panel 2 Origin: local\n*r ExtensionsListResult Extensions Panel 2 Order: 1\n*r ExtensionsListResult Extensions Panel 2 Color: \"#1170CF\"\n*r ExtensionsListResult Extensions Panel 2 Visibility: Auto\n</code></pre> <p>xCommand UserInterface Extensions List</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#getting-setting-and-subscribing-to-xconfigurations-rxp-14","title":"Getting, Setting and Subscribing to xConfigurations <sub>(rxp-1.4)</sub>","text":"<p>xConfigurations</p> <p>Configurations are device settings that are persistent across device boots. Like commands, configurations are also structured in a hierarchy</p> <p>Click to expand each xConfiguration Lesson below, execute them in your terminal session and observe the responses in the terminal window</p> Lesson: Getting an xConfiguration Value <sub>(rxp-1.4.1)</sub> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xConfiguration Audio DefaultVolume\n</code></pre> <ul> <li>Observe your Terminal Window's output, you should see the value for your Audio DefaultVolume</li> </ul> Compare your Terminal Output <pre><code>*c xConfiguration Audio DefaultVolume: 50\n** end\n\nOK\n</code></pre> </li> </ul> <p>xConfiguration Audio DefaultVolume</p> Lesson: Set a new xConfiguration Value <sub>(rxp-1.4.2)</sub> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xConfiguration Audio DefaultVolume: 75\n</code></pre> <ul> <li>Observe your terminal output and review the response</li> </ul> Click to Compare your Terminal Output <pre><code>** end\n\nOK\n</code></pre> <ul> <li>Now that we've set the default volume to 75, let's double check our work by getting that value one more time</li> </ul> Type into terminal and press Enter<pre><code>xConfiguration Audio DefaultVolume\n</code></pre> Click to Compare your Terminal Output <pre><code>*c xConfiguration Audio DefaultVolume: 75\n** end\n\nOK\n</code></pre> </li> </ul> <p>Note</p> <p>The getting and setting of an xConfiguration only differs slightly when accessing via a terminal.</p> <p>Click on the tabs below to see the differences side by side</p> Get xConfigurationSet xConfiguration <p>xConfiguration Audio DefaultVolume</p> <p>xConfiguration Audio DefaultVolume: 75</p>  Do xConfigurations offer Multiple Parameters or have Multiline execution? <p>No, that's solely related to commands. When setting an xConfiguration, they only ever contain 1 value and though some of those values can be quite long as a string, the syntax to enter them into the console is all written in the same line of the terminal shell</p> <p>xConfiguration Audio DefaultVolume</p> Lesson: Get multiple xConfiguration Values under a Common Node <sub>(rxp-1.4.3)</sub> <p>Info</p> <p>In many cases, you may want to pull information in bulk. We can do this easily by moving running an xConfiguration get request on Higher Common Node in the xAPI path</p> <p>What do we mean by <code>Higher Common Node</code></p> <p>Click on the tabs below, to see how we'll change our requests by accessing a <code>Higher Common Node</code> on each level of an xAPI Path</p> Full xAPI PathNext Higher Common NodeHighest Common NodeView Visual Diagram <p>xConfiguration Bluetooth Allowed</p> <p>xConfiguration Bluetooth Allowed</p> <p>xConfiguration Bluetooth Allowed</p> <p>Note</p> <p>This Diagram only show a very small subset of our xAPI. We have hundreds of xAPI to explore </p> <pre><code>flowchart TD\n  xAPI --&gt; |Highest Common Node| A\n  A[xConfiguration] --&gt;|Next Node| B(Audio)\n  B --&gt; bb(Default Volume)\n  B --&gt; bc(Input)\n  B --&gt; ba(...)\n  bc --&gt; bd(...)\n  A --&gt; |Next Node| C(Network)\n  C --&gt; CC(IPv4)\n  CC --&gt; CCC(Address)\n  CC --&gt; CCD(Gateway)\n  CC --&gt; CCE(...)\n  A --&gt; |Next Node| D(UserInterface)\n  D --&gt; DD(Message)\n  D --&gt; DF(Extensions)\n  D --&gt; DG(...)\n  DD --&gt; DDE(...)\n  DF --&gt; DDF(...)\n  C --&gt; CD(...) \n  A --&gt; |Next Node| E(Video)\n  E --&gt; EE(Input)\n  EE --&gt; EEE(...)\n  E --&gt; EF(Output)\n  EF --&gt; EEF(...)\n  E --&gt; EG(...)\n  A --&gt; |Nodes Continued| F(...)</code></pre> <ul> <li> <p>xAPI: xConfiguration Audio</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xConfiguration Audio\n</code></pre> <ul> <li>Observe your terminal output and review the response</li> </ul> </li> </ul> Click to Compare your Terminal Output <pre><code>*c xConfiguration Audio Input Value: 75\n*c xConfiguration Audio Input HDMI 1 Level: -5\n*c xConfiguration Audio Input HDMI 1 Mode: On\n*c xConfiguration Audio Input HDMI 1 VideoAssociation MuteOnInactiveVideo: On\n*c xConfiguration Audio Input Microphone 1 Mode: On\n*c xConfiguration Audio Input MicrophoneMode: Focused\n*c xConfiguration Audio Input USBC 1 Level: -5\n*c xConfiguration Audio Input USBC 1 Mode: On\n*c xConfiguration Audio Input USBC 1 VideoAssociation MuteOnInactiveVideo: On\n*c xConfiguration Audio Input USBMicrophone 1 EchoControl Mode: On\n*c xConfiguration Audio Input USBMicrophone 1 Level: 5\n*c xConfiguration Audio Input USBMicrophone 1 Zone: 1\n*c xConfiguration Audio Microphones Mute Enabled: True\n*c xConfiguration Audio Microphones NoiseRemoval Mode: Enabled\n*c xConfiguration Audio Microphones UsbPassthrough MuteButton: Inactive\n*c xConfiguration Audio Microphones VoiceActivityDetector Mode: Off\n*c xConfiguration Audio Output InternalSpeaker Mode: On\n*c xConfiguration Audio Panning HeadsetAnalog BinauralProcessing: True\n*c xConfiguration Audio Panning HeadsetAnalog Mode: Auto\n*c xConfiguration Audio Panning HeadsetUSB BinauralProcessing: False\n*c xConfiguration Audio Panning HeadsetUSB Mode: Auto\n*c xConfiguration Audio Panning Mode: Auto\n*c xConfiguration Audio SoundsAndAlerts RingTone: \"Sunrise\"\n*c xConfiguration Audio SoundsAndAlerts RingVolume: 0\n*c xConfiguration Audio USB Mode: SpeakerAndMicrophone\n*c xConfiguration Audio USB VolumeControl Capture Mode: Bypass\n*c xConfiguration Audio USB VolumeControl Capture Value: 0\n*c xConfiguration Audio USB VolumeControl Playback Mode: Bypass\n*c xConfiguration Audio USB VolumeControl Playback Value: 0\n*c xConfiguration Audio Ultrasound MaxVolume: 70\n** end\n</code></pre> <p>By simply removing <code>DefaultVolume</code> from xConfiguration Audio, we get all of the Configurations listed under the Audio Node of the Codec</p> <p>xConfiguration Audio</p> Lesson: Subscribing to an xConfiguration  <sub>(rxp-1.4.4)</sub>  What do we mean by Subscribe? <p>A subscription, also called a feedback registration in an SSH terminal session, is a way to monitor changes to any xConfigurations, xStatuses, or xEvents using xAPI.</p> <ul> <li> <p>This lets you automatically watch for changes as they happen, and react to them\u2014for example, to automate a process\u2014without needing to keep checking the value yourself.</p> </li> <li> <p>When you start a subscription, you won\u2019t see any results right away. You\u2019ll only see something printed to the console after a change happens in that xAPI branch.</p> </li> <li> <p>If you need to know the current value as soon as your script starts, you should perform a Get request against the same branch to retrieve it, then subscribe to monitor for any future changes.</p> </li> </ul> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>    xFeedback Register Configuration/Audio/DefaultVolume\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xConfigurations Page, move the Slider labeled Audio DefaultVolume to a new position and release</li> <li>Observe your Terminal Window's output, you should see events for your Subscription fill the Terminal Window as that value changes<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p></p> <p></p> View Subscription Assistant Operation <p></p> <p></p> </li> </ul> <p>xConfiguration Audio DefaultVolume</p> Lesson: Unsubscribing from an xConfiguration  <sub>(rxp-1.4.5)</sub> <p>Just as we can subscribe to information, we can unsubscribe from that same information</p>  Why bother with Unsubscribing? <p>Today, we have a limit of 50 unique subscriptions (or feedback registrations) that can be enabled on a device at any given time.</p> <p>Documented on page 40 of the Official xAPI Guide</p> <p>So as your solutions grow, managing your subscriptions can become increasingly more important.</p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Deregister Configuration/Audio/DefaultVolume\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xConfigurations Page, move the Slider labeled Audio DefaultVolume to a new position and release</li> <li>Observe your Terminal Window's output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Move the slider a few more times to verify</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>xConfiguration Audio DefaultVolume</p> Lesson: Subscribe to Multiple xConfigurations under a Common Node  <sub>(rxp-1.4.6)</sub> <p>Info</p> <p>Just as we can Get multiple xConfiguration values, we can also subscribe to multiple xConfiguration values under a Higher Common Node</p> <p>Subscribing to a Higher Common Node doesn't consume multiple subscriptions, in fact it only consumes 1 of the 50 alloted to you. This can allow you to subscribe to a larger dataset while consuming less subscriptions in your automation.</p> <p>Click on the tabs below, to see how we'll change our requests by accessing a <code>Higher Common Node</code> on each level of an xAPI Path</p> Full xAPI PathNext Higher Common NodeHighest Common Node <p>xFeedback Register Configuration/Bluetooth/Allowed</p> <p>xFeedback Register Configuration/Bluetooth/Allowed</p> <p>xFeedback Register Configuration/Bluetooth/Allowed</p> <ul> <li> <p>xAPI: xConfiguration Video Input Airplay</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Register Configuration/Video/Input/AirPlay\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xConfigurations Page, press the toggles and buttons in the Airplay row</li> <li>Observe your Terminal Window's output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Press those buttons and switches a few times to see more changes come in</li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p></p> <p></p> View Subscription Assistant Operation <p></p> <p></p> </li> </ul> <p>xConfiguration Video Input Airplay</p> Lesson: Unsubscribe to Multiple xConfigurations under a Higher Common Node  <sub>(rxp-1.4.7)</sub> <ul> <li> <p>xAPI: xConfiguration Video Input Airplay</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Deregister Configuration/Video/Input/AirPlay\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xConfigurations Page, press the toggles and buttons in the Airplay row</li> <li>Observe your Terminal Window's output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Press those buttons and switches a few times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> <p>Tip</p> <p>In cases where you have multiple subscriptions, you can unsubscribe from all by running</p> Type into terminal and press Enter<pre><code>xFeedback DeregisterAll\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#getting-and-subscribing-to-status-rxp-15","title":"Getting and Subscribing to Status <sub>(rxp-1.5)</sub>","text":"<p>xStatuses</p> <p>xStatuses contain information about the current state of the device, such as connected calls, the status of the gatekeeper registration, connected inputs and output sources. This status information will fire a callback when that particular status occurs and their last known state is stored and can be retrieved.</p> <p>Many of the same techniques we reviewed under section Getting, Setting and Subscribing to xConfigurations <sub>(rxp-1.4)</sub> will apply to xStatuses</p> <p>Be sure to complete Getting, Setting and Subscribing to xConfigurations <sub>(rxp-1.4)</sub> prior to continuing in this section, as many pieces of additional context were covered there, and won't be repeated moving forward</p> <p>Click to expand each xStatus Lesson below, execute them in your terminal session and observe the responses in the terminal window</p> Lesson: Getting an xStatus Value <sub>(rxp-1.5.1)</sub> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xStatus Audio Volume\n</code></pre> <ul> <li>Observe your terminal output and review the response</li> </ul> Click to Compare your Terminal Output <pre><code>*s Audio Volume: 65\n** end\n</code></pre> </li> </ul> <p>xStatus Audio Volume</p> Lesson: Get multiple xStatus Values under a Common Node <sub>(rxp-1.5.2)</sub> <ul> <li> <p>xAPI: xStatus Audio Input</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xStatus Audio Input\n</code></pre> <ul> <li>Observe your terminal output and review the response</li> </ul> </li> </ul> Click to Compare your Terminal Output <pre><code>[PLACEHOLDER - LUIS OUTPUT]\n</code></pre> <p>xStatus Audio Input</p> Lesson: Subscribing to an xStatus <sub>(rxp-1.5.3)</sub> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xFeedback Register Status/Audio/Volume\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Terminal Window's output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p></p> <p></p> View Subscription Assistant Operation <p></p> <p></p> </li> </ul> <p>xStatus Audio Volume</p> Lesson: Unsubscribing to an xStatus  <sub>(rxp-1.5.4)</sub> <ul> <li> <p>xAPI: xStatus Audio Input</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xFeedback Deregister Status/Audio/Volume\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Terminal Window's output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> Lesson: Subscribe to Multiple xStatuses under a Common Node <sub>(rxp-1.5.5)</sub> <ul> <li> <p>xAPI: xStatus Cameras Camera[n] Position</p> </li> <li> <p>Task:</p> Type into terminal and press Enter<pre><code>xFeedback Register Status/Cameras/Camera/Position\n</code></pre> What happened to the [n] in the xAPI Path? <p>You may have noticed we never declared [n] in the xAPI Path for the command we ran. This was left out on purpose. [n] corresponds to the CameraId you want to target. Some Codecs can control up 7 cameras, so these xAPI paths branch per connected Camera</p> <p>Whereas you could be running this lab on a variety of RoomOS Devices, it's better to leave [n] out of the path for Lab Purposes. Not declaring [n] adds new value to us as developers in a multi-camera system; it allows us to subscribe to ALL camera's positions as they change rather than having to specify 1 camera of interest </p> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xStatuses Page, click the button in the Camera Control Wheel row<ul> <li>Alternatively, you can adjust your cameras position through the native camera control interface</li> </ul> </li> <li>Observe your Terminal Window's output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> Click on the tabs below to Compare TerminalView Subscription AssistantView Native Camera Control Interface <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> </li> </ul> <p>xStatus Cameras Camera[n] Position</p> Lesson: Unsubscribe from all xStatuses <sub>(rxp-1.5.6)</sub> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>    xFeedback DeregisterAll\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xStatuses Page, click the button in the Camera Control Wheel row<ul> <li>Alternatively, you can adjust your cameras position through the native camera control interface</li> </ul> </li> <li>Observe your Terminal Window's output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#subscribing-to-events-rxp-16","title":"Subscribing to Events <sub>(rxp-1.6)</sub>","text":"<p>xEvents</p> <p>Similar to xStatuses, xEvents will fire a callback when that particular event occurs; however, xEvents contain simpler information that's not necessary to store on the device, so you will not be able to get the value of the event after it fires.</p> Why not store xEvent Data? <p>As noted above, xEvents are much simpler callbacks. </p> <p>For example, xStatus Call contains information about the call such as the Display Name, CallBack Number, CallId and so on. This information is very useful for building something like a Favorites List or Troubleshooting that call. </p> <p>When compared to xEvent UserInterface Extensions Widget Action, this event fires whenever a widget is interacted with by a user. We simply want to know when the button is pressed in order for use to run an automation, but storing this event has little to no value outside the general log collection on the device.</p> <p>Click to expand each xEvent Lesson below, execute them in your terminal session and observe the responses in the terminal window.</p> Lesson: Subscribing to an xEvent <sub>(rxp-1.6.1)</sub> <ul> <li> <p>xAPI: xEvent UserInterface Message Prompt Response</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Register Event/UserInterface/Message/Prompt/Response\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xEvents Page, click the Prompt Button in the UserInterface Message row<ul> <li>This will create a Pop Up with 5 options</li> <li>Click on any one of these 5 Options</li> </ul> </li> <li>Observe your Terminal Window's output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Feel free to try each of the options under that <code>Prompt</code> and continue to observe your Terminal Window's to understand how each one of them differs</li> </ul> </li> <li>Now click either the <code>TextInput</code>, the <code>Rating</code> or the <code>Alert</code> button and follow any instructions those interfaces offer</li> <li>Observe your Terminal Window's output, you should see events for your Subscription fill the Terminal Window<ul> <li>Responses for <code>TextInput</code>, <code>Rating</code> or <code>Alert</code> shouldn't show since you're currently only subscribed to the <code>Prompt</code> branch</li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p></p> <p></p> View Subscription Assistant Operation <p></p> <p></p> </li> </ul> <p>xEvent UserInterface Message Prompt Response</p> Lesson: Unsubscribing to an xEvent <sub>(rxp-1.6.2)</sub> <ul> <li> <p>xAPI: xEvent UserInterface Message Prompt Response</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Deregister Event/UserInterface/ScreenShotRequest/RequestId\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xEvents Page, click either the <code>Prompt</code>, the <code>TextInput</code>, the <code>Rating</code> or the <code>Alert</code> button in the UserInterface Message row and submit any accompanying actions in that interface</li> <li>Observe your Terminal Window's output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window</li> </ul> </li> </ul> </li> </ul> <p>xEvent UserInterface Message Prompt Response</p> Lesson: Subscribe to Multiple xEvents under a Common Node <sub>(rxp-1.6.3)</sub> <ul> <li>xAPI: xEvent UserInterface</li> </ul> <p>Note</p> <p>By Subscribing to a Higher Common Node, such as xEvent UserInterface, we can see all UI related Events available in that xAPI Node</p> <ul> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>xFeedback Register Event/UserInterface\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xEvents Page, try any of the <code>Widgets</code> on this page, and submit any accompanying actions in that interface if any</li> <li>Observe your Terminal Window's output, you should see events for your Subscription fill the Terminal Window<ul> <li>Optional: Try all of the <code>Widgets</code> on that page </li> </ul> </li> </ul> </li> </ul> Click to Compare your Terminal Output <p></p> <p></p> View Subscription Assistant Operation <p></p> <p></p> </li> </ul> <p>xEvent UserInterface</p> Lesson: Unsubscribe from all xEvents <sub>(rxp-1.6.4)</sub> <ul> <li> <p>xAPI: N/A</p> </li> <li> <p>Task: </p> Type into terminal and press Enter<pre><code>    xFeedback DeregisterAll\n</code></pre> <ul> <li>Press the Subscription Assistant Button on your Touch Interface<ul> <li>Under the xEvents Page, try any of the <code>Widgets</code> on this page, and submit any accompanying actions in that interface if any</li> <li>Observe your Terminal Window's output, those responses you saw in the previous lesson should have stopped outputting in your Terminal Window<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#tagging-your-xapi-calls-rxp-17","title":"Tagging your xAPI Calls <sub>(rxp-1.7)</sub>","text":"<p>As you work to build your automation in a SSH terminal session, you may find yourself making multiple calls against the same path and the timing of that output may be critical for your solution.</p> <p>To help simplify which data belongs where, you can tag your xAPI paths with a custom value to better track your work.</p> <p>By appending |resultId=\"<code>myValue</code>\" to the end of any xAPI Call, the response from that xAPI will include that resultId you assign</p> <p>Review Tagging examples below</p> xStatus Audio VolumexCommand Video SelfView SetxConfiguration SystemUnit NamexFeedback Register Event/CallSuccessful <pre><code>xStatus Audio Volume |resultId=\"Custom Value 1\"\n*s Audio Volume: 50\n** resultId: \"Custom Value 1\"\n** end\n</code></pre> <pre><code>xCommand Video SelfView Set Mode: On |resultId=\"Custom Value 2\"\n\nOK\n*r SelfViewSetResult (status=OK): \n** resultId: \"Custom Value 2\"\n** end\n</code></pre> <pre><code>xConfiguration SystemUnit Name |resultId=\"Custom Value 3\"\n*c xConfiguration SystemUnit Name: \" \"\n** resultId: \"Custom Value 3\"\n** end\n\nOK\n</code></pre> <p>Note</p> <p>When declaring xFeedback, or subscribing to any xAPI, the resultId will only print when you execute the command, but will not print with the subsequent data coming in from the subscription</p> <pre><code>xFeedback Register Event/CallSuccessful |resultId=\"Custom Value 4\"\n** resultId: \"Custom Value 4\"\n** end\n\nOK\n*e CallSuccessful Protocol: \"Spark\"\n*e CallSuccessful Direction: \"outgoing\"\n*e CallSuccessful RemoteURI: \"spark:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n*e CallSuccessful EncryptionIn: \"On\"\n*e CallSuccessful EncryptionOut: \"On\"\n*e CallSuccessful CallRate: 20000\n*e CallSuccessful CallId: 3\n** end\n*e CallSuccessful Protocol: \"Spark\"\n*e CallSuccessful Direction: \"outgoing\"\n*e CallSuccessful RemoteURI: \"spark:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n*e CallSuccessful EncryptionIn: \"On\"\n*e CallSuccessful EncryptionOut: \"On\"\n*e CallSuccessful CallRate: 20000\n*e CallSuccessful CallId: 4\n** end  \n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_ssh/#section-rxp-1-cleanup-rxp-18","title":"Section rxp-1 Cleanup <sub>(rxp-1.8)</sub>","text":"<p>Important</p> <ul> <li>Press the Subscription Assistant Button on your Touch Interface</li> <li>Under the Section Cleanup Page, select the Run Section Cleanup? button</li> <li>Select Yes, Run the Cleanup Script</li> </ul> <p></p> Section Cleanup Confirmation <p></p> <p>This will reverse the changes we've made to the endpoint, and leave us ready for the next section</p> You can run the cleanup via the terminal as well <p>Copy the contents below into your terminal window and run them all at once</p> Type into terminal and press Enter<pre><code>xFeedback DeregisterAll\nxConfiguration Audio DefaultVolume: 50\nxCommand UserInterface Extensions Panel Remove PanelId: wx1_lab_multilineCommand\nxCommand Video SelfView Set Mode: Off FullscreenMode: Off\nxCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Audio Volume SetToDefault Device: Internal\n</code></pre> <p>Feel free to close your Terminal Window</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/","title":"Accessing the xAPI via WebSockets (section rxp-4)","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#accessing-the-xapi-via-websockets-section-rxp-4","title":"Accessing the xAPI via WebSockets <sub>(section rxp-4)</sub>","text":"<p>Abstract</p> <p>WebSockets offer a way to enable real time communication over HTTP/HTTPS but allows for persistent communication, unlike an HTTP Post or Get request which briefly opens a socket and closes</p> <p>It's akin to our SSH, but differs in format, execution, network port and protocol for communication</p> <p>       Learn more about our WebSocket xAPI </p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#websocket-authentication-and-format-rxp-41","title":"WebSocket Authentication and Format <sub>(rxp-4.1)</sub>","text":""},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#url-structure-rxp-411","title":"URL Structure <sub>(rxp-4.1.1)</sub>","text":"<p>The request URL for your Codec will change depending on whether you're making a WebSocket or Secure WebSocket Connection</p> WebSocket [ws]Secure WebSocket [wss] <p>ws://[YOUR_DEVICE_IP]/ws</p> <p>wss://[YOUR_DEVICE_IP]/ws</p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#authentication-format-rxp-412","title":"Authentication Format <sub>(rxp-4.1.2)</sub>","text":"<p>The Codec uses basic authentication to accept incoming requests. This authentication is formatted in base64 with it's username and password concatenated as a single string separated by a colon :</p> <p>Click on the tabs below to see how an example Username and Password transitions to base64</p> Base Credentials &gt;Decoded String &gt;Base64 Encoded String &gt;Authorization Request HeaderSec-WebSocket-Protocol Request Header <p>Username: admin Password: admin1234</p> <p>admin:admin1234 </p> <p>YWRtaW46YWRtaW4xMjM0 </p> <p>\"Authorization\": \"Basic YWRtaW46YWRtaW4xMjM0\"  </p> <p>\"Sec-WebSocket-Protocol\": \"auth-YWRtaW46YWRtaW4xMjM0\"  </p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#request-headers-rxp-413","title":"Request Headers <sub>(rxp-4.1.3)</sub>","text":"<p>Your WebSockets will use either the <code>Authorization</code> or <code>Sec-WebSocket-Protocol</code> as it's sole header</p> <p> Key Value Use Case <code>Authorization</code> <code>Basic [YOUR_BASE64_ENCODED_AUTH]</code> Focused on authentication, ensuring the client is allowed to connect. <code>Sec-WebSocket-Protocol</code> <code>auth-[YOUR_BASE64_ENCODED_AUTH]</code> Focused on defining the protocol for the communication after the connection is established. This method is required for browser-based clients. </p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#body-format-rxp-414","title":"Body Format <sub>(rxp-4.1.4)</sub>","text":"<p>All WebSocket messages are formatted in JSON. They require the following Objects to be successful</p> Object Value Description IsRequired jsonrpc \"2.0\" The JSON RPC Version Yes id String/Integer An identifier of this request. The server must reply with the same value in the Response object. Yes method String A String containing the name of the method to be invoked. For example \"xGet\", \"xQuery\", \"xCommand/[Path]\" or \"xSet\". Yes params Nest Objects An Object that holds the parameter values to be used during the invocation of the method. The Object must have member names that match the names that the server expects. Yes <p>Review WebSocket Message Structure Examples and Responses</p> xCommand/[Path]xGet [xStatus/xConfiguration]xQuery [xStatus/xConfiguration]xSet [xConfiguration]xFeedback [xStatus/xConfiguration/xEvent] <p>xCommand Paths follow the xCommand method in the <code>method</code> object, separated by forward slash ( / )</p> <p>Parameters for the xCommand are defined as individual objects under the <code>params</code> object written in JSON format</p> Request Response Error Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"method\": \"xCommand/Dial\",\n  \"params\": {\n    \"Number\": \"bobby@example.com\",\n    \"Protocol\": \"Spark\"\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"result\": { // &lt;-- This is the Value for your request\n  \"CallId\": 2,\n  \"ConferenceId\": 1\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 111,\n  \"error\": {\n    \"code\": 1,\n      \"data\": {\n      \"Cause\": 21\n    },\n    \"message\": \"Not paired with isdn link\"\n  }\n}\n</code></pre> <p><code>xStatus</code> and <code>xConfiguration</code> branches can make use of the xGet method. Unlike Commands, the xAPI path is provided in the params object under a Path object and is structured as an Array</p> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 102,\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"SystemUnit\", \"Name\"]\n  }\n}   \n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 102,\n  \"result\": \"my-device\" // &lt;-- This is the Value for your request\n}\n</code></pre> <p><code>xStatus</code> and <code>xConfiguration</code> branches can make use of the xQuery method. xQuery is formatted and functions largely like the xGet method</p> <p>Note the difference between <code>xQuery</code> and <code>xGet</code></p> <ul> <li>The response to xQuery always starts from the top node, i.e. \"Status\" or \"Configuration\".</li> <li>The response to xGet starts relative to the path given in the \"Query\".</li> <li>xQuery can also implement Wildcards (<code>**</code>) in it's path, which matches zero or more levels in the path.</li> </ul> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 105,\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Status\", \"**\", \"DisplayName\"] \n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 105,\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Status\": {\n      \"SIP\": {\n        \"CallForward\": {\n          \"DisplayName\": \"Room Bar Pro\"\n        }\n      },\n      \"SystemUnit\": {\n        \"Software\": {\n          \"DisplayName\": \"RoomOS 11.20...\"\n        }\n      }\n    }\n  }\n}\n</code></pre> Request Response  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 110,\n  \"method\": \"xSet\",\n  \"params\": {\n    \"Path\": [\"Configuration\",\"SystemUnit\",\"Name\"],\n    \"Value\": \"My New System Name\"\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 110,\n  \"result\": true // &lt;-- This is the Value for your request\n}\n</code></pre> <p>xFeedback, or Subscriptions, have 2 Id objects within the life of it's process. When sending any message, you will assign an <code>id</code> and get an initial response containing that same <code>id</code>. But when you subscribe, it will contain an additional Id in it's results object which corresponds to this specific subscription. All notifications after the initial response from this subscription will contain the Subscription Id not the initial message <code>id</code>. This is important, as you may have multiple or similar subscriptions you may want to instantiate and handle separately as you develop your solution.</p> Subscribe Request Initial Response Notification Response Unsubscribe Request  <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113, // &lt;-- This is the Message id\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Video\", \"Selfview\"],\n    \"NotifyCurrentValue\": true // &lt;-- When true, will respond with additional notifications\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113,\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Id\": 1 // &lt;-- This is the Subscription Id of the new feedback registration. Use this Subscription Id to map incoming notifications to the initial subscription request, or to unsubscribe from this data\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"xFeedback/Event\",\n  \"params\": {\n    \"Id\": 1, // &lt;-- This is the Subscription Id of the feedback registration.\n    \"Status\": {\n      \"Video\": {\n        \"Selfview\": {\n          \"FullscreenMode\": \"Off\",\n          \"Mode\": \"Off\",\n          \"OnMonitorRole\": \"First\",\n          \"PIPPosition\": \"CenterRight\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 113, // &lt;-- This is the Message id\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Id\": 1, // &lt;-- This is the Subscription Id of the initial feedback registration.\n  }\n}\n</code></pre> Subscription Visual Flow <pre><code>sequenceDiagram\n    participant My Customization\n    participant Target Codec\n    My Customization&lt;&lt;--&gt;&gt;Target Codec: WebSocket Connection\n    Note over My Customization,Target Codec: Register Subscription\n    My Customization-&gt;&gt;+Target Codec: xFeedback/Subscribe [Message `id`#58; 101]\n    Target Codec -&gt;&gt; My Customization: Acknowledges Message `id`#58; 101&lt;br&gt;[Provides Subscription `Id`#58; 1]\n    Note over My Customization,Target Codec: Incoming Events\n    Target Codec --&gt;&gt;+ My Customization: &lt;br&gt; Event Payload. Contains [Subscription `Id`#58; 1]\n    Target Codec --&gt;&gt; My Customization: &lt;br&gt; Event Payload. [Subscription `Id`#58; 1]\n    Target Codec --&gt;&gt;- My Customization: &lt;br&gt; ........... [Subscription `Id`#58; 1]\n    Note over My Customization,Target Codec: Deregister Subscription\n    My Customization-&gt;&gt;-Target Codec: xFeedback/Unsubscribe &lt;br&gt;Provide Subscription [`Id`#58; 1] NOT Message [`id`#58; 101] as param&lt;br&gt;[Subscription `Id`#58; 1]</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#full-websocket-examples-rxp-415","title":"Full WebSocket examples <sub>(rxp-4.1.5)</sub>","text":"Click to view a Full Example of each written using NodeJs [Javascript Backend] <pre><code>const WebSocket = require('ws');\n\n// Base64 encode your username and password for Basic Auth\nconst username = 'admin';\nconst password = 'admin1234';\nconst ipAddress = 'X.X.X.X';\nconst encoded_auth = Buffer.from(`${username}:${password}`).toString('base64')\n  .replace(/\\+/g, '-')\n  .replace(/\\//g, '_')\n  .replace(/=+/g, '');\n\n// Define the subprotocol including custom authentication\nconst subprotocols = [`auth-${encoded_auth}`];\n\n// Create a WebSocket connection, requesting the subprotocols\nconst socket = new WebSocket(`wss://${ipAddress}/ws`, subprotocols, {\n  rejectUnauthorized: false\n});\n\nsocket.on('open', () =&gt; {\n  console.log('WebSocket established against Codec');\n\n  // Structure your xAPI message to send\n  const message = {\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"xStatus SystemUnit Uptime\",\n    \"method\": \"xGet\",\n    \"params\": {\n      \"Path\": [\"Status\", \"SystemUnit\", \"Uptime\"]\n    }\n  };\n\n  // Send the JSON message as a string\n  socket.send(JSON.stringify(message));\n});\n\nsocket.on('message', (message) =&gt; {\n  try {\n    const data = JSON.parse(message);\n    console.log('Parsed response:', data);\n\n    socket.close();\n  } catch (error) {\n    console.error('Error parsing JSON:', error);\n  }\n});\n\nsocket.on('error', (error) =&gt; {\n  console.error('WebSocket error observed:', error);\n  socket.close();\n});\n\nsocket.on('close', (event) =&gt; {\n  console.log('WebSocket connection closed:', event);\n});\n</code></pre> Click to view a Full Example of each written using the Python WebSocket-client API <pre><code>import WebSocket\nimport json\nimport base64\n\n# Base64 encode your username and password for Basic Auth\nusername = 'admin'\npassword = 'admin1234'\nip_address = 'X.X.X.X'  # Replace with your actual IP address\nencoded_auth = base64.b64encode(f\"{username}:{password}\".encode()).decode()\nencoded_auth = encoded_auth.replace('+', '-').replace('/', '_').replace('=', '')\n\n# Define the subprotocol including custom authentication\nsubprotocols = f\"auth-{encoded_auth}\"\n\n# Define the WebSocket URL\nws_url = f\"wss://{ip_address}/ws\"\n\n# Define the on_open event\ndef on_open(ws):\n    print(\"WebSocket established against Codec\")\n\n    # Structure your xAPI message to send\n    message = {\n        \"jsonrpc\": \"2.0\",\n        \"id\": \"xStatus Systemunit Uptime\",\n        \"method\": \"xGet\",\n        \"params\": {\n            \"Path\": [\"Status\", \"SystemUnit\", \"Uptime\"]\n        }\n    }\n\n    # Send the JSON message as a string\n    ws.send(json.dumps(message))\n\n# Define the on_message event\ndef on_message(ws, message):\n    try:\n        data = json.loads(message)\n        print(\"Parsed response:\", data)\n\n        # Close the WebSocket after receiving the message\n        ws.close()\n    except json.JSONDecodeError as error:\n        print(\"Error parsing JSON:\", error)\n\n# Define the on_error event\ndef on_error(ws, error):\n    print(\"WebSocket error observed:\", error)\n    ws.close()\n\n# Define the on_close event\ndef on_close(ws, close_status_code, close_msg):\n    print(\"WebSocket connection closed:\", close_msg)\n\n# Create the WebSocket application\nws = WebSocket.WebSocketApp(ws_url,\n                            subprotocols=[subprotocols],\n                            on_open=on_open,\n                            on_message=on_message,\n                            on_error=on_error,\n                            on_close=on_close)\n\n# Allow self-signed certificates\nws.run_forever(sslopt={\"cert_reqs\": 0})\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#create-and-configure-postman-collection-rxp-42","title":"Create and Configure Postman Collection <sub>(rxp-4.2)</sub>","text":"<p>Unfortunately, we can't provide a WebSocket collection in Postman for you, as WebSocket collection exports are not available in PostMan as of October 2024</p> <p>However, you can still use Postman to setup WebSocket requests. Use the guide below as an example to build a WebSocket collection and requests in Postman before moving into Section 2.4's lessons</p> Lesson Setup 1. Create First WebSocket Request2. Save the Request and create a new Collection3. Configure your Collection Variables4. Assign your Request Template URL and Headers5. Assign Request Template Message Body <ul> <li>In order to create a new Collection Folder, we need to instantiate a new Request first, then assign it to a new folder</li> </ul> Select NewSelect WebSocket <p></p> <p></p> <ul> <li> <p>Once you have your new request made, select save, then assign a Name for the Request and creat a folder for this request</p> </li> <li> <p>For this first request, assign the name Request Template</p> <ul> <li>For each lesson, we'll duplicate/fork this request</li> </ul> </li> <li> <p>Name the folder xAPI-WebSockets</p> </li> </ul> <p></p> <ul> <li> <p>To simplify the process, assign variables to the entire collection</p> </li> <li> <p>Select the new xAPI-WebSockets folder</p> </li> <li> <p>Select variables and assign the following variables</p> <ul> <li><code>device_ipAddress</code></li> <li><code>device_base64_encoded_auth</code></li> </ul> </li> <li> <p>In the Current Value Column, </p> <ul> <li>Set your Device IP Address for <code>device_ipAddress</code></li> <li>Set your device login credentials encoded in base64 for <code>device_base64_encoded_auth</code></li> </ul> </li> </ul> <p></p> <ul> <li> <p>Select your Request Template request</p> </li> <li> <p>Use wss://{{ device_ipAddress }}/ws as your URL</p> <ul> <li><code>{{ device_ipAddress }}</code> will access your Device IP current value</li> </ul> </li> <li> <p>Select the Headers Tab and assign the following headers</p> Header Value Authorization Basic  {{ device_base64_encoded_auth }} Sec-WebSocket-Protocol auth- {{ device_base64_encoded_auth }} </li> </ul> <p></p> <ul> <li>Select the Message Tab and assign the following body template</li> </ul> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"\",\n  \"method\": \"\",\n  \"params\": {}\n}\n</code></pre> <p>;</p> <p>Important</p> <p>For each lesson in section 2.4 do the following with your WebSocket Request Template</p> <ul> <li>Duplicate the Request Template</li> <li>Rename the Duplicate request to match the name of the lesson</li> <li>Assign the Id value in the Message Body to the lesson name</li> <li>Follow the lesson tasks</li> </ul>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#executing-xcommands-rxp-43","title":"Executing xCommands <sub>(rxp-4.3)</sub>","text":"<p>???+ lesson \"Lesson: Execute an xCommand\" <sub>(rxp-4.3.1)</sub></p> <pre><code>!!! info inline end \"Message Body Location\"\n\n    &lt;figure markdown&gt;\n      ![Message body location](./assets/wx1_1451_part_2/2-4-3_Execute-xCommand-BodyLocation.png){ width=\"400\" }\n    &lt;/figure&gt;\n\n- **xAPI:** xCommand Video Selfview Set\n\n- **Task:** \n    - Assign the correct ==Method== to the `method` object for xCommands\n    - Fill in the `params` object using the following parameters\n        - Mode: On\n        - FullScreenMode: On\n        - OnMonitorRole: First\n\n- Once the Message body has been updated\n    - ==Save== the request\n    - Select ==Connect== to establish the WebSocket connection to the Codec\n    - select ==Send== and review the Postman Terminal's repsonse and observe any changes to your device\n\n- When you've finished this lesson, select ==Disconnect== to terminate the WebSocket connection\n\n??? question \"Need Help with the Syntax?\"\n\n    &lt;a class=\"md-button md-button--primary\" href=\"../cheatsheet\" target=\"_blank\" &gt;\n      Open the &lt;strong&gt;WebSocket Method and Parameter&lt;/strong&gt; Table in the CheatSheet &lt;i class=\"fa-solid fa-square-up-right\"&gt;&lt;/i&gt;\n    &lt;/a&gt;\n\n??? success \"View properly formatted Message and Successful Response\"\n\n\n    === \"Message Body `JSON`\"\n\n          ``` { .json }\n          {\n            \"jsonrpc\": \"2.0\",\n            \"id\": \"Execute an xCommand\",\n            \"method\": \"xCommand/Video/Selfview/Set\",\n            \"params\": {\n              \"Mode\": \"On\",\n              \"FullScreenMode\": \"On\",\n              \"OnMonitorRole\":\"First\"\n            }\n          }\n          ```\n\n    === \"Response Body\"\n\n        ``` { .json , .no-copy }\n        {\n          \"id\": \"Execute an xCommand\",\n          \"jsonrpc\": \"2.0\",\n          \"result\": { // &lt;-- This is the Value for your request\n            \"status\": \"OK\"\n          }\n        }\n        ```\n</code></pre> Lesson: Execute an xCommand with multiple arguments with the same name <p>In cases where we need to declare multiple arguments of the same name, rather than duplicating and re-running the parameters, we instead leverage an Array in place of the value, containing all values we want to implement under that Parameter</p> <p>   Learn more about Arrays </p> <p>Click on the tabs to see how Terminal Syntax relates to WebSocket Syntax</p> Terminal SyntaxWebSocket Syntax <pre><code>xParent Child ChildParam_X: 1, ChildParam_X: 2\n</code></pre> Body<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Example Syntax\",\n  \"method\": \"xParent/Child\",\n  \"params\": {\n    \"ChildParam_X\": [1, 1]\n  }\n}\n</code></pre> <ul> <li> <p>xAPI: xCommand Video Input SetMainVideoSource</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for xCommands</li> <li>Fill in the <code>params</code> object using the following parameters, but duplicate the ConnectorId<ul> <li>ConnectorId: 1</li> <li>Layout: Equal</li> </ul> </li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse and observe any changes to your device</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View Successful OSD Output <p></p> <p></p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Execute an xCommand with multiple arguments with the same name\",\n  \"method\": \"xCommand/Video/Input/SetMainVideoSource\",\n  \"params\": {\n    \"ConnectorId\": [1, 1],\n    \"Layout\":\"Equal\"\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Execute an xCommand with multiple arguments with the same name\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"status\": \"OK\"\n  }\n}\n</code></pre> Lesson: Execute an xCommand with a multiline argument <p>Info</p> <p>Multiline Arguments can be placed into the <code>params</code> object as well. This specifically uses a <code>body</code> object which will contain your multi-line argument.</p> <p>The structure of a Multiline argument should look similar to the following</p> <p>Click on the tabs to see how Terminal Syntax relates to WebSocket Syntax</p> Terminal SyntaxWebSocket Syntax <pre><code>[xParent Child ChildParam_X: SomeValue]\n[Multi Line Content]\n.\n</code></pre> Body<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Example Syntax\",\n  \"method\": \"xParent/Child\",\n  \"params\": {\n    \"ChildParam_X\": \"SomeValue\",\n    \"body\": \"Multi Line Content\"\n  }\n}\n</code></pre> <p>Note</p> <p>Your Selfview may still be open</p> <p>Run the following in your terminal window to close selfview</p> <pre><code>xCommand Video Selfview Set Mode: Off\n</code></pre> Challenge: Alter <code>Execute an xCommand</code> in your WebSocket Postman Collection <p>Rather than re-open your terminal session, you can go back to <code>Execute an xCommand</code> in your WebSocket Postman Collection, and update the <code>params</code> object to set the Mode parameter to Off</p> <p>     Giving Up? Check out the Challenge Answers Page  </p> <ul> <li> <p>xAPI: xCommand UserInterface Extensions Panel Save</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for xCommands</li> <li>Fill in the <code>params</code> object using the following parameters<ul> <li>PanelId: wx1_lab_multilineCommand</li> <li>body:       Your &lt;body&gt; Value<pre><code>&lt;Extensions&gt;\n  &lt;Panel&gt;\n    &lt;Order&gt;1&lt;/Order&gt;\n    &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt;\n    &lt;Location&gt;HomeScreen&lt;/Location&gt;\n    &lt;Icon&gt;Info&lt;/Icon&gt;\n    &lt;Color&gt;#FF70CF&lt;/Color&gt;\n    &lt;Name&gt;MultiLine Command [Section 2.4.3]&lt;/Name&gt;\n    &lt;ActivityType&gt;Custom&lt;/ActivityType&gt;\n  &lt;/Panel&gt;\n&lt;/Extensions&gt;\n</code></pre></li> </ul> </li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse and observe any changes to your device</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View Successful OSD Output <p></p> What to expect on your OSD on a successful request <p></p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Execute an xCommand with a multiline argument\",\n  \"method\": \"xCommand/UserInterface/Extensions/Panel/Save\",\n  \"params\": {\n    \"PanelId\": \"wx1_lab_multilineCommand\",\n    \"body\":\"&lt;Extensions&gt; &lt;Panel&gt; &lt;Order&gt;1&lt;/Order&gt; &lt;PanelId&gt;wx1_lab_multilineCommand&lt;/PanelId&gt; &lt;Location&gt;HomeScreen&lt;/Location&gt; &lt;Icon&gt;Info&lt;/Icon&gt; &lt;Color&gt;#FFCC00&lt;/Color&gt; &lt;Name&gt;MultiLine Command [Section 2.4.3]&lt;/Name&gt; &lt;ActivityType&gt;Custom&lt;/ActivityType&gt; &lt;/Panel&gt; &lt;/Extensions&gt;\"\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Execute an xCommand with a multiline argument\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"status\": \"OK\"\n  }\n}\n</code></pre> Lesson: Execute an xCommand which generates data and responds <ul> <li> <p>xAPI: xCommand UserInterface Extensions List</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for xCommands</li> <li>Fill in the <code>params</code> object using the following parameters<ul> <li>ActivityType: Custom</li> </ul> </li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse and observe any changes to your device</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message and Successful Response Message BodyResponse Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Execute an xCommand with a multiline argument\",\n  \"method\": \"xCommand/UserInterface/Extensions/List\",\n  \"params\": {\n    \"ActivityType\": \"Custom\"\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Execute an xCommand with a multiline argument\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Extensions\": {\n      \"Panel\": [\n        {\n          \"ActivityType\": \"Custom\",\n          \"Color\": \"#FFCC00\",\n          \"Icon\": \"Info\",\n          \"Location\": \"HomeScreen\",\n          \"Name\": \"MultiLine Command [Section 2.4.3]\",\n          \"Order\": 1,\n          \"Origin\": \"local\",\n          \"PanelId\": \"wx1_lab_multilineCommand\",\n          \"Visibility\": \"Auto\",\n          \"id\": 1\n        }\n      ],\n      \"Version\": \"1.11\"\n    },\n    \"status\": \"OK\"\n  }\n}\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#getting-setting-and-subscribing-to-xconfigurations-rxp-44","title":"Getting, Setting and Subscribing to xConfigurations <sub>(rxp-4.4)</sub>","text":"Lesson: Set a new xConfiguration Value <p>Message Body Location</p> <p></p> <p></p> <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li> <p>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above and place it's new Configuration Value in the <code>Value</code> object</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> Need Help with the Syntax? <p>   Open the WebSocket Method and Parameter Table in the CheatSheet  </p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Set a new xConfiguration Value\",\n  \"method\": \"xSet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"Audio\", \"DefaultVolume\"],\n    \"Value\": 75\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Set a new xConfiguration Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": true // &lt;-- This is the Value for your request\n}\n</code></pre> Lesson: Getting an xConfiguration Value <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above</li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Getting an xConfiguration Value\",\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"Audio\", \"DefaultVolume\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Getting an xConfiguration Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": 75 // &lt;-- This is the Value for your request\n}\n</code></pre> Lesson: Get multiple xConfiguration Values under a Common Node <ul> <li> <p>xAPI: xConfiguration Audio</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above</li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Get multiple xConfiguration Values under a Common Node\",\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Configuration\", \"Audio\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Get multiple xConfiguration Values under a Common Node\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"DefaultVolume\": 75,\n    \"Input\": {\n      \"Microphone\": [\n        {\n          \"Mode\": \"On\",\n          \"Zone\": 1,\n          \"id\": 1\n        },\n        {\n          \"EchoControl\": {\n            \"Mode\": \"On\",\n            \"NoiseReduction\": \"On\"\n          },\n          \"Gain\": 20,\n          \"Mode\": \"On\",\n          \"Zone\": 1,\n          \"id\": 2\n        },\n        {\n          \"EchoControl\": {\n            \"Mode\": \"On\",\n            \"NoiseReduction\": \"On\"\n          },\n          \"Gain\": 20,\n          \"Mode\": \"On\",\n          \"Zone\": 1,\n          \"id\": 3\n        }\n      ],\n      \"USBC\": [\n        {\n          \"Gain\": -5,\n          \"Mode\": \"On\",\n          \"VideoAssociation\": {\n            \"MuteOnInactiveVideo\": \"On\"\n          },\n          \"id\": 1\n        }\n      ],\n      \"USBMicrophone\": [\n        {\n          \"EchoControl\": {\n            \"Mode\": \"On\"\n          },\n          \"Gain\": 5,\n          \"Zone\": 1,\n          \"id\": 1\n        }\n      ]\n    },\n    \"Microphones\": {\n      \"BeamMix\": {\n        \"Inputs\": \"Auto\"\n      },\n      \"Mute\": {\n        \"Enabled\": \"True\"\n      },\n      \"NearTalkerSector\": {\n        \"Mode\": \"Off\"\n      },\n      \"NoiseRemoval\": {\n        \"Mode\": \"Enabled\"\n      },\n      \"PhantomPower\": \"On\",\n      \"UsbPassthrough\": {\n        \"MuteButton\": \"Active\"\n      },\n      \"VoiceActivityDetector\": {\n        \"Mode\": \"Off\"\n      }\n    },\n    \"Output\": {\n      \"InternalSpeaker\": {\n        \"Mode\": \"On\"\n      },\n      \"Line\": [\n        {\n          \"Mode\": \"On\",\n          \"OutputType\": \"Loudspeaker\",\n          \"id\": 1\n        }\n      ]\n    },\n    \"Panning\": {\n      \"Mode\": \"Auto\"\n    },\n    \"Placement\": \"Wallmount\",\n    \"SoundsAndAlerts\": {\n      \"RingTone\": \"Sunrise\",\n      \"RingVolume\": 50\n    },\n  }\n}\n</code></pre> Lesson: Query an xConfiguration Value <ul> <li> <p>xAPI: xConfiguration SystemUnit Name</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Query an xConfiguration Value\",\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Configuration\", \"SystemUnit\", \"Name\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Query an xConfiguration Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Configuration\": {\n      \"SystemUnit\": {\n        \"Name\": \"Room Bar Pro\"\n      }\n    }\n  }\n}\n</code></pre> Lesson: Query an xConfiguration Value using a WildCard <p>Info</p> <p>When forming an xQuery Message, you can use <code>**</code> as a wildcard value within the path of the xAPI. This will return any matching nodes following <code>**</code> similar to the role of <code>//</code> in an SSH session.</p> <ul> <li> <p>xAPI: xConfiguration ** Name</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for setting xConfigurations</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above. Be sure to treat <code>**</code> as a separate entity in the xAPI Path.</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Query an xConfiguration Value using a WildCard\",\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Configuration\", \"**\", \"Name\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Query an xConfiguration Value using a WildCard\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": { // &lt;-- This is the Value for your request\n    \"Configuration\": {\n      \"FacilityService\": {\n        \"Service\": [\n          {\n            \"Name\": \"Live Support\",\n            \"id\": 1\n          },\n          {\n            \"Name\": \"\",\n            \"id\": 2\n          },\n          {\n            \"Name\": \"\",\n            \"id\": 3\n          },\n          {\n            \"Name\": \"\",\n            \"id\": 4\n          },\n          {\n            \"Name\": \"\",\n            \"id\": 5\n          }\n        ]\n      },\n      \"Network\": [\n        {\n          \"DNS\": {\n            \"Domain\": {\n              \"Name\": \"\"\n            }\n          },\n          \"id\": 1\n        }\n      ],\n      \"SystemUnit\": {\n        \"Name\": \"Room Bar Pro\"\n      },\n      \"UserInterface\": {\n        \"Theme\": {\n          \"Name\": \"Night\"\n        }\n      },\n      \"Video\": {\n        \"Input\": {\n          \"Connector\": [\n            {\n              \"Name\": \"Camera\",\n              \"id\": 1\n            },\n            {\n              \"Name\": \"PC (HDMI)\",\n              \"id\": 2\n            },\n            {\n              \"Name\": \"PC (USB-C)\",\n              \"id\": 3\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> Lesson: Subscribe and Unsubscribe to an xConfiguration <ul> <li> <p>xAPI: xConfiguration Audio DefaultVolume</p> </li> <li> <p>Task: </p> <ul> <li> <p>Subscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xConfiguration</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xConfigurations Page, move the Slider labeled Audio DefaultVolume to a new position and release</li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xConfiguration</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xConfigurations Page, move the Slider labeled Audio DefaultVolume to a new position and release</li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Message Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribing to an xConfiguration\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Configuration\",\"Audio\",\"DefaultVolume\"],\n    \"NotifyCurrentValue\": true\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribing to an xConfiguration\",\n  \"method\": \"xFeedback/Unsubscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> </li> </ul> Lesson: Subscribe and Unsubscribe to Multiple xConfigurations under a Common Node <ul> <li> <p>xAPI: xConfiguration Airplay</p> </li> <li> <p>Task: </p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xConfiguration</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xConfigurations Page, press the toggles and buttons in the Airplay row</li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xConfiguration</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xConfigurations Page, press the toggles and buttons in the Airplay row</li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to Multiple xConfigurations under a Common Node\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Configuration\",\"Video\",\"Input\",\"Airplay\"],\n    \"NotifyCurrentValue\": true\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribing to an xConfiguration\",\n  \"method\": \"xFeedback/Unsubscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#getting-and-subscribing-to-xstatuses-rxp-45","title":"Getting and Subscribing to xStatuses <sub>(rxp-4.5)</sub>","text":"Lesson: Getting an xStatus Value <p>Message body location</p> <p></p> <p></p> <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for getting an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> Need Help with the Syntax? <p>   Open the WebSocket Method and Parameter Table in the CheatSheet  </p> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Getting an xStatus Value\",\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Status\", \"Audio\", \"Volume\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Getting an xStatus Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": 50 // &lt;-- This is the Value for your request\n}\n</code></pre> Lesson: Get multiple xStatuses Values under a Common Node <ul> <li> <p>xAPI: xStatus Audio</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for getting an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Path</code> object using the xAPI above</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Get multiple xStatuses Values under a Common Node\",\n  \"method\": \"xGet\",\n  \"params\": {\n    \"Path\": [\"Status\", \"Audio\"]\n  }\n}\n</code></pre> <p><code>{ .json , .no-copy } {   \"id\": \"Get multiple xStatuses Values under a Common Node\",   \"jsonrpc\": \"2.0\",   \"result\": {     \"Devices\": {       \"Bluetooth\": {         \"ActiveProfile\": \"None\"       },       \"HandsetUSB\": {         \"ConnectionStatus\": \"NotConnected\",         \"Cradle\": \"OnHook\"       },       \"HeadsetUSB\": {         \"ConnectionStatus\": \"NotConnected\",         \"Description\": \"\",         \"Manufacturer\": \"\"       }     },     \"Input\": {       \"Connectors\": {         \"HDMI\": [           {             \"Mute\": \"On\",             \"id\": 1           }         ],         \"Microphone\": [           {             \"ConnectionStatus\": \"Connected\",             \"id\": 1           },           {             \"ConnectionStatus\": \"NotConnected\",             \"id\": 2           },           {             \"ConnectionStatus\": \"NotConnected\",             \"id\": 3           }         ],         \"USBC\": [           {             \"Mute\": \"On\",             \"id\": 1           }         ]       }     },     \"Microphones\": {       \"MusicMode\": \"Off\",       \"Mute\": \"Off\",       \"NoiseRemoval\": \"On\",       \"VoiceActivityDetector\": {         \"Activity\": \"False\"       }     },     \"Output\": {       \"Connectors\": {         \"HDMI\": [           {             \"Mode\": \"DelayMeasurement\",             \"id\": 1           }         ],         \"InternalSpeaker\": [           {             \"DelayMs\": 0,             \"id\": 1           }         ],         \"Line\": [           {             \"ConnectionStatus\": \"NotConnected\",             \"DelayMs\": 0,             \"id\": 1           }         ]       },       \"MeasuredHdmiArcDelay\": 0,       \"MeasuredHdmiDelay\": 0,       \"ReportedHdmiCecDelay\": 0     },     \"SelectedDevice\": \"Internal\",     \"Ultrasound\": {       \"Volume\": 70     },     \"Volume\": 50,     \"VolumeHandsetUsb\": 50,     \"VolumeHeadsetBluetooth\": 50,     \"VolumeHeadsetUsb\": 50,     \"VolumeInternal\": 50,     \"VolumeMute\": \"Off\"   } }</code></p> Lesson: Query an xStatus Value <ul> <li> <p>xAPI: xStatus Video Input Airplay Status</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for querying an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Query an xStatus Value\",\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Video\", \"Input\", \"Airplay\", \"Status\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Query an xStatus Value\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Status\": {\n      \"Video\": {\n        \"Input\": {\n          \"AirPlay\": {\n            \"Status\": \"Active\"\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> Lesson: Query an xStatus Value using a WildCard <ul> <li> <p>xAPI: xStatus ** Temperature</p> </li> <li> <p>Task: </p> <ul> <li>Assign the correct Method to the <code>method</code> object for getting an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above. Be sure to treat <code>**</code> as a separate entity in the xAPI Path.</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>select Send and review the Postman Terminal's repsonse</li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> </li> </ul> View properly formatted Message and Successful Response Message Body <code>JSON</code>Response Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Query an xStatus Value using a WildCard\",\n  \"method\": \"xQuery\",\n  \"params\": {\n    \"Query\": [\"Status\", \"**\", \"Temperature\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"id\": \"Query an xStatus Value using a WildCard\",\n  \"jsonrpc\": \"2.0\",\n  \"result\": {\n    \"Status\": {\n      \"SystemUnit\": {\n        \"Hardware\": {\n          \"Monitoring\": {\n            \"Temperature\": {\n              \"Status\": \"Normal\"\n            }\n          }\n        }\n      },\n      \"Video\": {\n        \"Output\": {\n          \"Monitor\": [\n            {\n              \"Temperature\": \"Normal\",\n              \"id\": 1\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n</code></pre> Lesson: Subscribe and Unsubscribe to an xStatus <ul> <li> <p>xAPI: xStatus Audio Volume</p> </li> <li> <p>Task: </p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xStatus</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> </li> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume, to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume, to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to an xStatus\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Audio\", \"Volume\"],\n    \"NotifyCurrentValue\": true\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribe to an xStatus\",\n  \"method\": \"xFeedback/Unsubscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> View Subscription Assistant <p></p> <p></p> Lesson: Subscribe and Unsubscribe to Multiple xStatuses under a Common Node <ul> <li> <p>xAPI: xStatus Cameras Camera [N] Position</p> </li> <li> <p>Task:</p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xStatus</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xStatuses Page, click the button in the Camera Control Wheel row<ul> <li>Alternatively, you can adjust your cameras position through the native camera control interface</li> </ul> </li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xStatuses Page, click the button in the Camera Control Wheel row<ul> <li>Alternatively, you can adjust your cameras position through the native camera control interface</li> </ul> </li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to Multiple xStatuses under a Common Node\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Status\", \"Cameras\", \"Camera\", \"Position\"],\n    \"NotifyCurrentValue\": true\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribe to Multiple xStatuses under a Common Node\",\n  \"method\": \"xFeedback/Unsubscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> View Subscription Assistant <p></p> <p></p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#subscribing-to-xevents-rxp-46","title":"Subscribing to xEvents <sub>(rxp-4.6)</sub>","text":"Subscribe and Unsubscribe to an xEvent <p>XML Body Location</p> <p></p> <p></p> <ul> <li> <p>xAPI: xEvent UserInterface Message Prompt Response</p> </li> <li> <p>Task: </p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xStatus</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xEvents Page, click the Prompt Button in the UserInterface Message row<ul> <li>This will create a Pop Up with 5 options</li> <li>Click on any of these 5 Options</li> </ul> </li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Try each of the options under <code>Prompt</code> and continue to observe your Postman Terminal</li> </ul> </li> <li>Press click either the <code>TextInput</code>, the <code>Rating</code> or the <code>Alert</code> button and submit any accompanying actions in that interface</li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Responses for <code>TextInput</code>, <code>Rating</code> or <code>Alert</code> shouldn't show since you're currently only subscribed to <code>Prompt</code></li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xStatuses Page, move the Slider labeled Adjust Volume, to a new position and release<ul> <li>Alternatively, you can adjust the volume with the Codec's native volume control buttons</li> </ul> </li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Move the slider a few more times to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> Need Help with the Syntax? <p>   Open the WebSocket Method and Parameter Table in the CheatSheet  </p> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to an xEvent\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Event\", \"UserInterface\", \"Message\", \"Prompt\", \"Response\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribe to an xEvent\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> View Subscription Assistant <p></p> <p></p> Lesson: Subscribe and Unsubscribe to Multiple xEvents under a Common Node <ul> <li> <p>xAPI: xEvent UserInterface</p> </li> <li> <p>Task: </p> <ul> <li> <ul> <li>Within the <code>params</code> object, fill in the <code>Query</code> object using the xAPI above</li> </ul> <p>Assign the correct Method to the <code>method</code> object in order to Subscribe to an xEvent</p> <ul> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Connect to establish the WebSocket connection to the Codec</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal<ul> <li>Record the responses Result Id value <code>result: {Id: ##}</code> [This is your Subscription Id]</li> </ul> </li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xEvents Page, try any of the <code>Widgets</code> on this page, and submit any accompanying actions in that interface if any</li> <li>Observe your Postman Terminal output, you should see events for your Subscription fill the Postman Terminal<ul> <li>Optional: Try all of the <code>Widget</code> on that page </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Unsubscribe</p> <ul> <li>Assign the correct Method to the <code>method</code> object in order to Unsubscribe from an xStatus</li> <li> <p>Within the <code>params</code> object, fill in the <code>Query</code> object the Subscription Id you recorded</p> </li> <li> <p>Once the Message body has been updated</p> <ul> <li>Save the request</li> <li>Select Send</li> <li>Observe the Initial Response in the Postman Terminal</li> </ul> </li> <li> <p>Press the <code>Subscription Assistant Button</code> on your Touch Interface</p> <ul> <li>Under the xEvents Page, try any of the <code>Widgets</code> on this page, and submit any accompanying actions in that interface if any</li> <li>Observe your Postman Terminal output, those responses you saw in the previous lesson should have stopped outputting in your Postman Terminal<ul> <li>Optional: Continue pressing buttons to see more changes come in</li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>When you've finished this lesson, select Disconnect to terminate the WebSocket connection</p> </li> </ul> View properly formatted Messages Subscribe Message bodyUnsubscribe Message Body <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Subscribe to Multiple xEvents under a Common Node\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Query\": [\"Event\", \"UserInterface\"]\n  }\n}\n</code></pre> <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"Unsubscribe to Multiple xEvents under a Common Node\",\n  \"method\": \"xFeedback/Subscribe\",\n  \"params\": {\n    \"Id\": 1 //&lt;-- NOTE: You're Id may differ\n  }\n}\n</code></pre> View Subscription Assistant <p></p> <p></p>"},{"location":"Main-Lab/RoomOS/rxp_xapi/rxp_xapi_websockets/#section-rxp-4-cleanup-rxp-48","title":"Section rxp-4 Cleanup <sub>(rxp-4.8)</sub>","text":"<p>Important</p> <ul> <li>Press the <code>Subscription Assistant Button</code> on your Touch Interface</li> <li>Under the Section Cleanup Page, select the Run Section Cleanup? button</li> <li>Select Yes, Run the Cleanup Script</li> </ul> <p></p> Section Cleanup Confirmation <p></p> <p>This will reverse the changes we've made to the endpoint, and leave us ready for the next section</p> You can run the cleanup via the terminal as well <p>Copy the contents below into your terminal window and run them all at once</p> Type into terminal and press Enter<pre><code>xConfig Audio DefaultVolume: 50\nxCommand UserInterface Extensions Panel Remove PanelId: wx1_lab_multilineCommand\nxCommand Video Selfview Set Mode: Off FullscreenMode: Off\nxCommand Video Input SetMainVideoSource ConnectorId: 1\nxCommand Audio Volume SetToDefault Device: Internal\nxCommand HTTPFeedBack Deregister FeedbackSlot: 1 FeedbackSlot: 2 FeedbackSlot: 3 FeedbackSlot: 4\n</code></pre>"},{"location":"Main-Lab/Setup/stp_intro/","title":"Lab Setup&nbsp<i class=\"fa-solid fa-gear\"></i>","text":"<p>Access your Pod Information</p> <ul> <li>Your Device Pod # is located on the bottom left had corder of the display</li> <li>Download this CSV file, open and locate your Pod Information</li> </ul> <p></p> Device Pod Assignment Sheet <p></p> <ul> <li>Fill in the information for your RoomOS Device below</li> </ul> <p>Cache your lab credentials </p> <p>Note</p> <p>This information is saved in the browser session storage area. Closing the page or opening the lab in a new tab will not carry this information over. You will need to re-fill this information or manually type this in as you go should it be cleared</p> <p>This lab will have you sign into several devices and services, to make the content a bit easier to follow, this lab can dynamically replace key pieces of information for you.</p> <p>If you have, or have been given the following information for the services services below, please take this time to fill in this information and click the  Update Lab Guide button below</p> <p>RoomOS Device IP Address: </p> <p>RoomOS Device Username: </p> <p>RoomOS Device Password: </p> <p>Update Lab Guide</p> <p> </p><p></p>"},{"location":"howToUse/admonition/","title":"Admonition","text":"<p>In addition to the  stock admonitions which are available out of the box we have added some additional branded admonitions which were created by Bobby McGonigle. </p> <p>Blank</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Blank!')\n</code></pre> <p>Vidcast</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Vidcast!')\n</code></pre> <p>Download</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Download!')\n</code></pre> <p>Cedeploy</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Ce-Deploy!')\n</code></pre> <p>Webex</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Webex!')\n</code></pre> <p>Gif</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('How should I pronounce Gif?')\n</code></pre> <p>Important</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Important!')\n</code></pre> <p>Challenge</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Challenge!')\n</code></pre> <p>Tool</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Tool!')\n</code></pre> <p>Curious</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <pre><code>console.log('Hello Curious!')\n</code></pre>"},{"location":"howToUse/customFeatures/","title":"customFeatures","text":""},{"location":"howToUse/customFeatures/#adding-a-copy-button-without-a-code-block","title":"Adding a Copy Button Without a Code Block","text":"<p><code>This will copy the following text: &lt;copy&gt;Text to copy&lt;/copy&gt;</code> </p> <p>This will copy the following text: Text to copy</p>"},{"location":"howToUse/customFeatures/#adding-user-specific-variables-into-your-lab-guide","title":"Adding user specific variables into your lab guide","text":"<p>There may be times in which you want to embed some attendee specific information into the instructions of your lab guide, like credentials or phone numbers, which will be used on multiple pages of your lab guide.  You can gather the information via a form or you can pass a pre-encoded JSON string as a URL parameter to populate the variable values into the browser's session storage.  Then you can use a simple HTML tag with a special class name to update the values in the lab guide.  This feature can be combined with the copy button method above.</p>"},{"location":"howToUse/customFeatures/#form-method","title":"Form Method","text":"Show me the code <pre><code>&lt;form id=\"info\"&gt;\n\n\n&lt;label for=\"Admin\"&gt;Admin Login:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Admin\" name=\"Admin\"&gt;&lt;br&gt;\n\n&lt;label for=\"PW\"&gt;Admin Password:&lt;/label&gt;\n&lt;input type=\"text\" id=\"PW\" name=\"PW\"&gt;&lt;br&gt;\n\n&lt;label for=\"EP\"&gt;Inbound Channel Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"EP\" name=\"EP\"&gt;&lt;br&gt;\n\n&lt;label for=\"DN\"&gt;Inbound Channel Phone Number:&lt;/label&gt;\n&lt;input type=\"text\" id=\"DN\" name=\"DN\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue\"&gt;Queue 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue\" name=\"Queue\"&gt;&lt;br&gt;\n\n&lt;label for=\"Queue2\"&gt;Queue 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Queue2\" name=\"Queue2\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team\"&gt;Team 1 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team\" name=\"Team\"&gt;&lt;br&gt;\n\n&lt;label for=\"Team2\"&gt;Team 2 Name:&lt;/label&gt;\n&lt;input type=\"text\" id=\"Team2\" name=\"Team2\"&gt;&lt;br&gt;\n&lt;br&gt;\n&lt;button onclick=\"setValues()\"&gt;Update Lab Guide&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> Example Input Form Admin Login: Admin Password: Inbound Channel Name: Inbound Channel Phone Number: Queue 1 Name: Queue 2 Name: Team 1 Name: Team 2 Name: Update Lab Guide <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned Team name 2: Provided by proctor</p>"},{"location":"howToUse/customFeatures/#url-method","title":"URL Method","text":"<p>If you have a lot of attendee variables in your lab, you may choose to precompile and encode them so that you can simply provide a URL link which will load all of their required information.</p> <p>To see this in action, add this string at the end of the URL for any page on this site: ?eyJBZG1pbiI6ImFkbWluQHh5ei5iaXoiLCJQVyI6InNVcGVyU2VjcmV0MTIzISIsIkVQIjoiRVAxIiwiRE4iOiIrMTkxMDU1NTEyMTUyIiwiUXVldWUiOiJRdWV1ZTEiLCJRdWV1ZTIiOiJRdWV1ZTIiLCJUZWFtIjoiVGVhbTEiLCJUZWFtMiI6IlRlYW0yIn0=</p>"},{"location":"howToUse/initialSetup/","title":"Initial Setup","text":""},{"location":"howToUse/initialSetup/#initial-setup","title":"Initial Setup","text":"<p>This lab guide template uses MKDocs to take your markdown documentation and transform it into an interactive web based lab guide.  You will need to install some software on your PC or Mac in order to take full advantage of the tool which will allow you to view your changes as you save them and ensure that your formatting is exactly how you want it.</p>"},{"location":"howToUse/initialSetup/#prerequisite-software-to-install","title":"Prerequisite Software to Install","text":"<ol> <li>Python</li> <li>Visual Studio Code</li> <li>Git</li> </ol>"},{"location":"howToUse/initialSetup/#setting-up-your-lab-guide-on-your-computer","title":"Setting up your lab guide on your computer","text":""},{"location":"howToUse/initialSetup/#clone-your-repository-with-git","title":"Clone your repository with git","text":"<p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Clone Repository</p> <p>Enter the repository source:  https://github.com/WebexCC-SA/LAB-1451.git</p> <p>Select or create a new folder to clone the repository into.</p>"},{"location":"howToUse/initialSetup/#build-the-environment","title":"Build the environment","text":"<p>When prompted to open the cloned repository, select open.</p> <p>Drag open the terminal at the bottom of the Visual Studio Code window</p> Show Me <p></p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</p> <p>venv\\Scripts\\activate.ps1</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000 </p> <p>In your terminal enter the following commands:</p> <p>python -m venv venv</p> <p>source venv/bin/activate</p> <p>pip install -r requirements.txt</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/postInitial/","title":"Using the tool after the initial setup","text":""},{"location":"howToUse/postInitial/#using-the-tool-after-the-initial-setup","title":"Using the tool after the initial setup","text":"<p>After the initial setup you will only need to take the following steps:</p> <p>Open Visual Studio Code</p> <p>Click the Source Control button in the left menu </p> <p>Click Open Folder and navigate to the folder where you cloned the repository</p> If you are on a PCIf you are on a Mac <p>In your terminal enter the following commands:</p> <p>venv\\Scripts\\activate.ps1</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p> <p>In your terminal enter the following commands:</p> <p>source venv/bin/activate</p> <p>mkdocs serve</p> <p>Open a browser to http://127.0.0.1:8000</p>"},{"location":"howToUse/references/","title":"References","text":""},{"location":"howToUse/references/#mk-docs-feature-reference","title":"MK Docs Feature Reference:","text":"<p>https://squidfunk.github.io/mkdocs-material/reference/ </p>"},{"location":"howToUse/references/#markdown-cheat-sheets","title":"Markdown Cheat Sheets:","text":"<p>https://www.markdownguide.org/cheat-sheet/ </p> <p>https://github.com/lifeparticle/Markdown-Cheatsheet </p>"},{"location":"howToUse/syncChanges/","title":"Publishing Your Changes","text":""},{"location":"howToUse/syncChanges/#publishing-your-changes","title":"Publishing Your Changes","text":"<p>As you progress with the creation of your lab guide, you should sync your changes periodically to GitHub.  </p>"},{"location":"howToUse/syncChanges/#syncing-your-changes-to-github","title":"Syncing your changes to GitHub","text":"<p>Make sure that you have saved all of the files you want to sync up to the repository</p> <p>Click the Source Control button in the left menu </p> <p>Click the plus sign next to each file you want to sync as you hover over the file names or alternatively, click the plus sign next to changes</p> <p>Enter a note about the changes you are making in the message text box</p> <p>Click the down chevron  on the commit button to reveal more options</p> <p>Select Commit &amp; Sync </p>"},{"location":"howToUse/syncChanges/#after-you-sync-your-changes-it-will-take-a-few-minutes-for-github-actions-to-build-the-website-so-that-you-can-view-all-of-the-changes-you-made","title":"After you Sync your changes, it will take a few minutes for GitHub Actions to build the website so that you can view all of the changes you made.","text":""}]}